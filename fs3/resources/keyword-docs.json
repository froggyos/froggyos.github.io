{
    "var": {
        "description": "Declares a variable with a specified type and initial value.",
        "usage": "var [variable] = [string|number|array]",
        "example": [
            "var myString = 'Hello, World!'",
            "var myNumber = 42",
            "var myArray  = [1, 2, 3]"
        ]
    },
    "cvar": {
        "description": "Declares a constant variable with a specified type and initial value. The type is declared by the inital value assigned.",
        "usage": "cvar [variable] = [string|number|array]",
        "example": [
            "cvar myConstString = 'I am constant!'",
            "cvar myConstNumber = 3.14",
            "cvar myConstArray  = ['a', 'b', 'c']"
        ]
    },
    "set": {
        "description": "Sets the value of an existing variable. The new value must match the variable's type.",
        "usage": "set [$variable] = [string|number|array]",
        "example": [
            "set $myString = 'New Value'",
            "set $myNumber = 100",
            "set $myArray  = [4, 5, 6]"
        ]
    },
    "arrset": {
        "description": "Sets the value of an existing array variable at a specified index.",
        "usage": "arrset [$array] [index] = [string|number|array]",
        "example": [
            "arrset $myArray 0 = 'First Element'",
            "arrset $myArray 1 = 42",
            "arrset $myArray 2 = [7, 8, 9]"
        ]
    },
    "free": {
        "description": "Frees a variable, removing it from memory.",
        "usage": "free [$variable]",
        "example": [
            "free $myString"
        ]
    },
    "out": {
        "description": "Outputs a string or number to the console.",
        "usage": "out [string|number]",
        "example": [
            "out 'Hello, World!'",
            "out 42"
        ]
    },
    "warn": {
        "description": "Outputs a warning message to the console.",
        "usage": "warn [string]",
        "example": [
            "warn 'This is a warning message!'"
        ]
    },
    "longwarn": {
        "description": "Outputs a multi-line warning message to the console.",
        "usage": "longwarn [string] [string]",
        "example": [
            "longwarn 'Warning Title' 'This is a detailed warning message that can span multiple lines.'"
        ]
    },
    "error": {
        "description": "Throws an error with a specified message.",
        "usage": "error [string]",
        "example": [
            "error 'This is an error message!'"
        ]
    },
    "longerror": {
        "description": "Throws a multi-line error with a specified title and message.",
        "usage": "longerror [string] [string]",
        "example": [
            "longerror 'Error Title' 'This is a detailed error message that can span multiple lines.'"
        ]
    },
    "ask": {
        "description": "Prompts the user for input and stores the result in a variable.",
        "usage": "ask [$variable] [string]",
        "example": [
            "ask $userInput 'Please enter your name:'"
        ]
    },
    "prompt": {
        "description": "Displays a prompt to the user and stores the response in a variable.",
        "usage": "prompt [$variable] [number] [array]",
        "example": [
            "prompt $userResponse 0 ['Yes', 'No', 'Maybe']"
        ]
    },
    "filearg": {
        "description": "Retrieves a command-line argument by index and stores it in a variable.",
        "usage": "filearg [$variable] [number]",
        "example": [
            "filearg $firstArg 0"
        ]
    },
    "kill": {
        "description": "Immediately stops program execution by raising a `RuntimeError`.",
        "usage": "kill",
        "example": [
            "kill"
        ]
    },
    "quietkill": {
        "description": "Immediately stops program execution without any error message or output.",
        "usage": "quietkill",
        "example": [
            "quietkill"
        ]
    },
    "if": {
        "description": "Begins a conditional block that executes if the specified condition is true.",
        "usage": "if [condition] [block]",
        "example": [
            "if <<myNumber > 10>> { ",
            "    out 'Number is greater than 10'",
            "}"
        ]
    },
    "else": {
        "description": "Begins a block that executes if the preceding `if` condition is false.",
        "usage": "else [block]",
        "example": [
            "if <<myNumber > 10>> { ",
            "    out 'Number is greater than 10'",
            "} # note: else CANNOT be on the same line as the closing block",
            "else {",
            "    out 'Number is 10 or less'",
            "}"
        ]
    },
    "loop": {
        "description": "Begins a loop that iterates a specified number of times or while a condition is true.",
        "usage": "loop [number|condition_statement] [block]",
        "example": [
            "loop 5 { ",
            "    out 'This will print 5 times'",
            "}",
            "",
            "var count = 0",
            "loop <<count < 3>> { ",
            "    out 'This will print while count is less than 3'",
            "    set $count = $count + 1",
            "}"
        ]
    },
    "foreach": {
        "description": "Begins a loop that iterates over each element in an array.",
        "usage": "foreach [$variable] in [$array ] [block]",
        "example": [
            "var array = ['item1', 'item2', 'item3']",
            "foreach $item in $array {",
            "    set $item = item>concat('_modified')",
            "}"
        ]
    },
    "skip": {
        "description": "Immediately ends execution of the current block. Does not effect loops.",
        "usage": "skip",
        "example": [
            "if <<true>> {",
            "    out 'This will be printed once.'",
            "    skip",
            "    out 'This will never be printed.'",
            "}"
        ]
    },
    "break": {
        "description": "Immediately ends execution of the current loop.",
        "usage": "break",
        "example": [
            "loop 5 {",
            "    out 'This will be printed once.'",
            "    break",
            "    out 'This will never be printed.'",
            "}"
        ]
    },
    "continue": {
        "description": "Immediately ends the current loop iteration and begins the next iteration.",
        "usage": "continue",
        "example": [
            "loop 5 {",
            "    out 'This will be printed 5 times.'",
            "    continue",
            "    out 'This will never be printed.'",
            "}"
        ]
    },
    "exit": {
        "description": "Immediately ends the current function.",
        "usage": "exit",
        "example": [
            "pfunc @myFunction ['myfunc_num:N'] {",
            "    if <<myfunc_num < 5>> {",
            "        out 'Number must be greater than or equal to 5'",
            "        exit",
            "    }",
            "    out 'You passed!'",
            "}",
            "",
            "pcall @myFunction [2]",
            "pcall @myFunction [5]",
            "",
            "# Output:",
            "# Number must be greater than or equal to 5",
            "# You passed!"
        ]
    },
    "func": {
        "description": "Declares a function with a specified name. Cannot have parameters.",
        "usage": "func [function_reference] [block]",
        "example": [
            "func @greet {",
            "    out 'Hello there!'",
            "}"
        ]
    },
    "pfunc": {
        "description": "Declares a parameterized function with a specified name and parameters. Parameters are defined as an array of strings, where each string specifies the parameter name and type (e.g., 'paramName:Type'). Supported types are string (S), number (N), and array (A).",
        "usage": "pfunc [function_reference] [array] [block]",
        "example": [
            "pfunc @add ['num1:N', 'num2:N'] {",
            "    var result = num1 + num2",
            "    out 'The sum is: '>concat(result)",
            "}"
        ]
    },
    "call": {
        "description": "Calls a function by its reference.",
        "usage": "call [function_reference]",
        "example": [
            "func @greet {",
            "    out 'Hello there!'",
            "}",
            "",
            "call @greet"
        ]
    },
    "pcall": {
        "description": "Calls a parameterized function by its reference, passing the specified arguments as an array.",
        "usage": "pcall [function_reference] [array]",
        "example": [
            "pfunc @add ['num1:N', 'num2:N'] {",
            "    var result = num1 + num2",
            "    out 'The sum is: '>concat(result)",
            "}",
            "",
            "pcall @add [5, 10]"
        ]
    },
    "return": {
        "description": "Returns a value from a function. Does not end function execution. To retrieve this value, use the `fReturn` variable after the function call.",
        "usage": "return [string|number|array]",
        "example": [
            "pfunc @multiply ['num1:N', 'num2:N'] {",
            "    return num1 * num2",
            "}",
            "",
            "pcall @multiply [4, 5]",
            "out 'The product is: '>concat(fReturn)"
        ]
    },
    "import": {
        "description": "Imports predefined keywords, methods, and variables that extend the functionality of FroggyScript3.",
        "usage": "import [string]",
        "example": [
            "import 'math'"
        ]
    },
    "keydown": {
        "description": "Sets up an event listener that triggers a block of code when a specified key is pressed down.",
        "usage": "keydown [string] [block]",
        "example": [
            "keydown 'a' {",
            "    out 'The \"a\" key was pressed down!'",
            "}"
        ]
    },
    "wait": {
        "description": "Pauses execution for a specified number of milliseconds.",
        "usage": "wait [number]",
        "example": [
            "out 'This will print immediately.'",
            "wait 2000",
            "out 'This will print after a 2 second delay.'"
        ]
    },
    "clearterminal": {
        "description": "Clears all previous output from the console.",
        "usage": "clearterminal",
        "example": [
            "clearterminal"
        ]
    }
}