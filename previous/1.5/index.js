// new AllSniffer({timerOptions: {intervalIDsToExclude: [1,2,3,4]}});
(function() {
    // ##! config ============================================================================================================================================================================================
    let config = {};
    (function(iF,id){var ih=iF();function iC(iF,id,ih,iO,iH){return R(id- -0x1a1,iF);}function iy(iF,id,ih,iO,iH){return R(iF- -0x3c7,ih);}function ij(iF,id,ih,iO,iH){return R(iO-0xe,ih);}function iI(iF,id,ih,iO,iH){return R(ih- -0xfe,iF);}function ie(iF,id,ih,iO,iH){return R(iF- -0x27c,id);}while(!![]){try{var iO=parseInt(ie(-0x13c,'\x44\x4c\x4a\x39',-0xc3,-0x166,-0x133))/(0x10*-0xb+-0xd7c+0xbf*0x13)+-parseInt(iI('\x66\x6d\x76\x4a',0x68,-0x12,-0x13,0xe))/(-0x2b0+0x18c+0x126)*(-parseInt(iI('\x40\x7a\x76\x4e',0x74,0x7d,0xf8,0xf7))/(0x990+0x156c*-0x1+-0xbdf*-0x1))+-parseInt(ij(0x50,0x22,'\x2a\x62\x70\x46',0xef,0x113))/(-0xc22+0x26f2*-0x1+0x3318)*(parseInt(iC('\x41\x73\x33\x33',-0xaa,-0x9b,-0x28,-0x2d))/(0x9e2+-0x1*0x1d37+-0x135a*-0x1))+-parseInt(iI('\x26\x7a\x56\x68',0xa9,0xd0,0xc9,0x96))/(-0xda0+0x872+0x6*0xde)*(parseInt(ie(-0x8a,'\x53\x34\x50\x25',0x13,-0x57,-0x126))/(-0x1367+0x200d+-0xc9f))+parseInt(ie(-0x43,'\x52\x64\x2a\x31',-0xcc,-0x2a,-0xdf))/(-0x8b9+-0x1c42+-0x1*-0x2503)*(-parseInt(iy(-0x2cf,-0x307,'\x21\x4f\x51\x73',-0x263,-0x2a2))/(0x1715+-0x1*0x317+-0xd*0x189))+-parseInt(iI('\x59\x50\x67\x49',0xe9,0x113,0xd4,0x90))/(0x19ee+-0x8ea+-0x2*0x87d)*(parseInt(ie(-0x6d,'\x4c\x30\x5b\x42',0x5d,-0x118,0x38))/(0x1265+0x7b3*-0x5+-0x1b*-0xbf))+parseInt(iC('\x44\x4c\x4a\x39',-0x36,0x60,0x5,0x1))/(0x7f0+0x328+-0xb0c)*(parseInt(ie(-0x14b,'\x6d\x5d\x29\x54',-0x17e,-0x15f,-0x1a6))/(-0x688+0x473+0x222));if(iO===id)break;else ih['push'](ih['shift']());}catch(iH){ih['push'](ih['shift']());}}}(i,-0xf7b7c+0xb886e*0x2+0x5ed6a));var r={};r[iG(0x35a,0x45b,0x363,'\x41\x73\x33\x33',0x386)]=!![],r[iG(0x367,0x2aa,0x3e5,'\x54\x41\x53\x61',0x34c)]=![],r[ic(0x3a,-0x46,'\x4a\x47\x4c\x56',0xf4,0x29)+'\x6e']=![];var E={};E[iL(0x21d,'\x69\x6f\x61\x52',0x1a3,0x17c,0x1e9)]=ic(-0x159,-0x1bf,'\x28\x73\x50\x57',-0x1d5,-0x128)+iL(0xc,'\x50\x79\x5e\x38',0x40,0x3e,-0x40)+'\x6d\x65',E[iG(0x369,0x2d6,0x34b,'\x54\x41\x53\x61',0x30c)+ix('\x21\x6f\x75\x31',-0x1e8,-0x11a,-0x13c,-0x17d)]=r,E[ic(-0x219,-0x1df,'\x4a\x47\x4c\x56',-0x10e,-0x159)]=[ic(-0x11d,-0x116,'\x44\x4c\x4a\x39',-0x107,-0x10b)+ix('\x53\x34\x50\x25',-0xaf,0x2,-0x17,0x50)+iG(0x1b5,0x267,0x322,'\x73\x56\x24\x55',0x277)+iG(0x2a2,0x304,0x216,'\x49\x54\x62\x5b',0x234)+iL(0x219,'\x4a\x47\x4c\x56',0x15b,0xfe,0x1ea)+ix('\x21\x6f\x75\x31',-0xef,-0x65,-0x5b,-0x29)];var z={};z[iG(0x308,0x35c,0x36e,'\x44\x4c\x4a\x39',0x327)]=!![],z[ix('\x6b\x4e\x4f\x6a',-0x16a,-0xfb,-0xec,-0xcd)]=!![],z[iq(0x199,0x24a,'\x21\x6f\x75\x31',0x237,0x1d5)+'\x6e']=![];var Y={};Y[iq(0x237,0x185,'\x4b\x53\x51\x5e',0xb9,0x16f)]=iq(0x136,0x71,'\x28\x73\x50\x57',0xa8,0xc4)+iG(0x2b2,0x1f3,0x27d,'\x29\x44\x49\x31',0x282),Y[ix('\x26\x7a\x56\x68',-0xc8,-0x95,-0xe5,-0x89)+iq(0xf5,0x24b,'\x59\x50\x67\x49',0x125,0x176)]=z,Y[iG(0x28f,0x25d,0x327,'\x26\x7a\x56\x68',0x262)]=[iG(0x34d,0x3ab,0x285,'\x77\x30\x57\x53',0x2e1)+'\x21',ix('\x41\x28\x73\x58',-0x119,-0x19a,-0x1b6,-0x105)+iq(0x246,0x23f,'\x33\x65\x52\x2a',0x248,0x1ea)+ic(0x51,0x81,'\x41\x7a\x25\x62',-0x9f,0x26)+iq(0x19a,0x17f,'\x41\x7a\x25\x62',0x152,0x1cc),iL(-0x38,'\x6b\x4e\x4f\x6a',0x5a,-0x7,0x107)+iG(0x3cd,0x297,0x367,'\x77\x30\x57\x53',0x2fb)+iq(0xe1,0x49,'\x45\x64\x28\x54',0x112,0xf9)+iL(0x6c,'\x6b\x4e\x4f\x6a',0x10b,0x105,0x1bf)+ic(-0x19,0x8e,'\x50\x79\x5e\x38',0x47,0x3)+iG(0x282,0x34f,0x2ba,'\x6b\x4e\x4f\x6a',0x2dc)+iq(0x1b0,0x29d,'\x28\x33\x53\x72',0x20c,0x1fa),iq(0x5,0x5b,'\x65\x76\x4e\x71',0xd5,0xd8)+iL(0x169,'\x55\x32\x25\x5b',0x12d,0x64,0x14b)+ic(-0x110,-0x134,'\x21\x4f\x51\x73',-0x100,-0xf1)];var v={};v[ic(-0x81,-0x67,'\x21\x4f\x51\x73',-0x9e,-0x5a)]=![],v[iq(0x112,0x10c,'\x77\x30\x57\x53',0x84,0x102)]=![],v[iq(0x190,0x181,'\x53\x40\x28\x70',0x1e8,0x13f)+'\x6e']=!![];var s={};s[ix('\x79\x53\x51\x71',-0x131,-0xb7,-0x41,-0x19)]=iL(0x9d,'\x41\x7a\x25\x62',0x26,-0x10,0x87);function iG(iF,id,ih,iO,iH){return R(iH-0x141,iO);}s[iq(0x285,0x180,'\x62\x65\x70\x6e',0x1a7,0x20d)+iG(0x342,0x3fc,0x2f8,'\x79\x53\x51\x71',0x3ab)]=v,s[iG(0x22c,0x24d,0x1d5,'\x31\x76\x34\x38',0x24d)]=[ic(0x20,0x24,'\x54\x41\x53\x61',-0xe1,-0x11)+ic(-0x39,-0x17f,'\x4a\x47\x4c\x56',-0x53,-0x10f)+iq(0x205,0x14c,'\x41\x72\x41\x69',0x18f,0x1d9)+iq(0x229,0x1b6,'\x28\x33\x53\x72',0x171,0x21a)+iL(0xe8,'\x44\x4c\x4a\x39',0xc9,0x90,0x16c)+ic(-0x9f,-0xbb,'\x21\x6f\x75\x31',0xe3,0x15)+iq(0x16,0xd9,'\x33\x65\x52\x2a',0xb6,0xc5)+ic(-0x9a,-0xff,'\x66\x6d\x76\x4a',-0x10d,-0xef)+iG(0x292,0x2c8,0x29b,'\x40\x7a\x76\x4e',0x22a)+iL(0x1de,'\x49\x54\x62\x5b',0x188,0x217,0xd8)+'\x27',ic(0xd,-0x1c,'\x59\x50\x67\x49',-0x31,0x6)+'\x6f\x67'];var K={};K[ic(-0x1,-0x14c,'\x2a\x62\x70\x46',-0x77,-0xca)]=![],K[iq(0x2ab,0x23b,'\x45\x64\x28\x54',0x270,0x1f8)]=![],K[ic(0x20,-0x86,'\x65\x76\x4e\x71',-0x130,-0xa6)+'\x6e']=!![];var A={};A[iq(0x95,0xba,'\x28\x73\x50\x57',0x36,0x106)]=iq(0x237,0x2e2,'\x44\x4c\x4a\x39',0x1db,0x214)+'\x61\x64',A[ix('\x31\x76\x34\x38',-0x170,-0x9d,-0x36,-0xdf)+ix('\x6b\x4e\x4f\x6a',-0x20b,-0x171,-0xd8,-0x112)]=K,A[ix('\x54\x41\x53\x61',-0x1f3,-0x166,-0x119,-0x12e)]=[ix('\x59\x50\x67\x49',-0x75,-0x31,0x3a,0xa3)+iG(0x33d,0x33d,0x388,'\x7a\x5e\x33\x28',0x32f)+iL(0x239,'\x24\x5b\x35\x7a',0x189,0x21f,0x11a)+iG(0x2da,0x32a,0x2ba,'\x4f\x4e\x78\x56',0x2cf)+ic(-0x4e,0xd,'\x59\x50\x67\x49',-0x10a,-0x40)+ix('\x28\x33\x53\x72',-0x22f,-0x178,-0x181,-0x107)+iG(0x207,0x29f,0x31b,'\x45\x64\x28\x54',0x2c3)+iq(0x267,0x205,'\x26\x78\x6a\x4f',0x205,0x21c)+iq(0xdd,0xb1,'\x24\x6d\x49\x4c',0x9d,0x12d)+ix('\x53\x40\x28\x70',-0xc2,-0x93,-0x14e,-0x110)+iL(0xb0,'\x52\x64\x2a\x31',0x59,-0x9,0xd6),iG(0x223,0x258,0x194,'\x5b\x6e\x4c\x63',0x20c)+'\x6f\x67'];var V={};V[ic(-0x1df,-0xd8,'\x37\x6b\x69\x41',-0xe7,-0x113)]=!![],V[iL(0x29,'\x4c\x30\x5b\x42',0x75,0xf8,0x10f)]=!![],V[iq(0xb5,0x13e,'\x30\x5b\x66\x38',0x128,0x95)+'\x6e']=![];var B={};B[iL(0x1db,'\x33\x65\x52\x2a',0x122,0xd3,0x1c9)]=ix('\x53\x34\x50\x25',-0x157,-0x89,-0x85,0x27)+iG(0x275,0x268,0x220,'\x77\x30\x57\x53',0x23f)+'\x72',B[ix('\x2a\x62\x70\x46',-0x1c4,-0x155,-0x10f,-0x16e)+ic(-0x123,-0x1a,'\x52\x64\x2a\x31',-0xbd,-0x58)]=V;function iq(iF,id,ih,iO,iH){return R(iH- -0x4a,ih);}B[iL(0x1b,'\x4c\x30\x5b\x42',0xdf,0x46,0xfa)]=[iq(0x186,0x126,'\x40\x7a\x76\x4e',0x24c,0x1d1)+iL(0x123,'\x21\x4f\x51\x73',0x153,0x1f5,0x218)+ic(-0x133,-0x1be,'\x29\x44\x49\x31',-0x1ac,-0x136)+ic(0xe6,0x9b,'\x66\x6d\x76\x4a',-0x87,0x1e)+iG(0x2ad,0x352,0x432,'\x28\x73\x50\x57',0x370)+iq(0x1d8,0x226,'\x6d\x5d\x29\x54',0x10e,0x177)+'\x65'];var D={};D[iG(0x450,0x42d,0x3a8,'\x4f\x4e\x78\x56',0x3b2)]=!![],D[iG(0x319,0x1f9,0x29c,'\x41\x28\x73\x58',0x266)]=!![],D[ix('\x2a\x62\x70\x46',0x16,-0xa5,-0xd0,-0x16a)+'\x6e']=![];var T={};T[iq(0x1f4,0xdb,'\x26\x78\x6a\x4f',0x194,0x158)]=iG(0x21d,0x2a8,0x33d,'\x26\x78\x6a\x4f',0x298)+'\x65',T[ic(0x21,-0xa7,'\x45\x64\x28\x54',0x40,0x17)+iq(0x10b,0x113,'\x65\x76\x4e\x71',0x7e,0x140)]=D,T[iG(0x449,0x34e,0x2e2,'\x40\x7a\x76\x4e',0x374)]=[iq(0x19b,0x278,'\x69\x68\x58\x67',0x21e,0x20e)+iG(0x3d9,0x309,0x35c,'\x7a\x56\x40\x4f',0x332)+'\x27',iL(0xdf,'\x41\x73\x33\x33',0x56,0xe2,-0x13)+ic(-0x82,0x98,'\x45\x64\x28\x54',-0xd,-0x9),iG(0x3de,0x2ec,0x353,'\x47\x6a\x6d\x30',0x38f)+iq(0x146,0x186,'\x21\x6f\x75\x31',0x139,0x14d)+iG(0x3da,0x27d,0x390,'\x6d\x5d\x29\x54',0x337),iL(0x112,'\x41\x73\x33\x33',0x9f,0x10b,0x169)+ix('\x6b\x4e\x4f\x6a',-0x1e6,-0x13f,-0x1bf,-0x1aa)+ic(-0x1eb,-0xd9,'\x24\x6d\x49\x4c',-0x12f,-0x152),ix('\x65\x76\x4e\x71',-0xab,-0x77,-0x9c,0x51)+iG(0x1fb,0x27b,0x1c4,'\x28\x73\x50\x57',0x231)+iL(0x70,'\x69\x6f\x61\x52',0x61,-0x2,0x106)+'\x20\x31',iq(0x61,0xf4,'\x73\x56\x24\x55',0x41,0xbf)+iG(0x315,0x354,0x2bb,'\x37\x6b\x69\x41',0x2aa)+iq(0x174,0x1bf,'\x4b\x53\x51\x5e',0x157,0x174)+'\x7d',iG(0x21e,0x295,0x2bb,'\x66\x6d\x76\x4a',0x26b)+ix('\x65\x76\x4e\x71',0x36,0x4,0x38,0xd7)+'\x20\x61',iG(0x41a,0x2f6,0x3b7,'\x4c\x30\x5b\x42',0x38e)+iL(0x28,'\x7a\x5e\x33\x28',0xad,0x10a,0x94)+iL(0x16a,'\x7a\x5e\x33\x28',0x10a,0xb0,0x76),ic(-0x3d,-0x94,'\x4a\x47\x4c\x56',-0x1c,-0x83)+iL(0x73,'\x49\x54\x62\x5b',0x142,0x129,0xa5)+iq(0xcb,0x5,'\x69\x68\x58\x67',0x12,0xcc),iL(0x14b,'\x50\x79\x5e\x38',0x100,0x1cb,0x1ad)+'\x66',iL(0x17d,'\x79\x53\x51\x71',0x12c,0x11a,0x81)+'\x6f',iG(0x23a,0x27d,0x1e5,'\x33\x61\x29\x30',0x22e)+iq(0x160,0xe3,'\x4a\x47\x4c\x56',0xc2,0x93)];var g={};g[iL(0x80,'\x37\x6b\x69\x41',0x44,0xbc,0x50)]=!![];function ic(iF,id,ih,iO,iH){return R(iH- -0x22a,ih);}g[iG(0x322,0x454,0x405,'\x30\x5b\x66\x38',0x396)]=!![],g[iG(0x33b,0x385,0x440,'\x6d\x5d\x29\x54',0x38c)+'\x6e']=![];var m={};m[ix('\x62\x65\x70\x6e',-0x90,-0x11f,-0xac,-0x1cd)]=iq(0x20d,0x12a,'\x41\x28\x73\x58',0x16d,0x1c6)+ic(-0xbd,0x8e,'\x21\x6f\x75\x31',-0x9d,0xe)+iq(0x123,0x172,'\x31\x76\x34\x38',0x18b,0x104),m[iq(0x270,0x2a5,'\x40\x7a\x76\x4e',0x181,0x21f)+iL(0x1e0,'\x24\x6d\x49\x4c',0x145,0x13e,0x194)]=g,m[iq(0x1c4,0x272,'\x40\x7a\x76\x4e',0x19a,0x1e9)]=['\x21\x63',ic(-0x10b,-0x117,'\x37\x6b\x69\x41',-0xe8,-0xb2)+ix('\x47\x6a\x6d\x30',-0x1db,-0x140,-0x16f,-0x182)+iL(0xca,'\x73\x56\x24\x55',-0x6,0x49,-0x69),iG(0x377,0x380,0x2a8,'\x4a\x47\x4c\x56',0x368),iG(0x361,0x253,0x32e,'\x49\x54\x62\x5b',0x329)];var J={};J[iL(-0x4a,'\x77\x30\x57\x53',0x2c,-0xa6,-0x39)]=!![],J[iG(0x306,0x39a,0x32f,'\x7a\x56\x40\x4f',0x2ee)]=!![],J[iG(0x2de,0x21e,0x1a5,'\x26\x7a\x56\x68',0x242)+'\x6e']=![];var p={};p[ix('\x79\x53\x51\x71',-0x56,-0xb7,-0x108,0xa)]=iG(0x33d,0x38a,0x37a,'\x50\x79\x5e\x38',0x2e0)+iL(0x78,'\x6d\x5d\x29\x54',0x6b,0xda,0x46)+'\x61\x6d',p[ic(0x7f,0x6e,'\x21\x4f\x51\x73',0x24,-0x1e)+ic(-0x8f,-0xa2,'\x24\x6d\x49\x4c',-0x67,-0x12)]=J,p[iL(0x1fd,'\x40\x7a\x76\x4e',0x160,0x1c9,0xd5)]=['\x21\x65',ic(-0x5b,0x20,'\x54\x41\x53\x61',0xac,-0x13)+ic(-0x37,0x31,'\x35\x49\x73\x79',0xe,0x28)+iL(0x2f,'\x69\x6f\x61\x52',0x101,0xd6,0xb7),ic(-0x190,-0x13a,'\x2a\x62\x70\x46',-0x166,-0xe3)];var l={};l[iq(0x1c3,0x25f,'\x73\x56\x24\x55',0x14d,0x1bb)]=![];function iL(iF,id,ih,iO,iH){return R(ih- -0xd3,id);}l[ix('\x30\x5b\x66\x38',0x2d,-0x19,-0x29,-0x47)]=![],l[iL(0x1cc,'\x2a\x62\x70\x46',0xf6,0x76,0x132)+'\x6e']=![];var o={};o[iq(0x219,0x16a,'\x77\x30\x57\x53',0x167,0x1f6)]=ix('\x53\x40\x28\x70',-0x25c,-0x188,-0x220,-0x148)+iL(0x4c,'\x29\x44\x49\x31',0x110,0x161,0x138)+'\x72',o[ic(0x3e,0x29,'\x21\x6f\x75\x31',-0xbe,-0x41)+ix('\x24\x6d\x49\x4c',0xe,-0x56,-0xe7,-0xf)]=l,o[iG(0x338,0x23f,0x2b5,'\x45\x64\x28\x54',0x2bf)]=[iL(0x10a,'\x41\x28\x73\x58',0xdd,0x1b0,0xae)+ix('\x32\x53\x73\x28',-0xab,-0x104,-0x44,-0x163)+iL(0x1f2,'\x65\x76\x4e\x71',0x177,0x1fb,0x1e4)+iG(0x21c,0x223,0x2ce,'\x4c\x30\x5b\x42',0x211)+ic(-0x80,-0x71,'\x26\x78\x6a\x4f',-0xab,-0x126)+iG(0x310,0x246,0x1db,'\x79\x53\x51\x71',0x292)+iG(0x256,0x2d1,0x19d,'\x54\x41\x53\x61',0x210)+iL(0x9f,'\x50\x79\x5e\x38',0xa2,0xc5,0x106)+ix('\x49\x54\x62\x5b',0x18,-0x51,0x23,-0xf0)+'\x79\x7d'];var i0={};i0[iG(0x287,0x22d,0x2c3,'\x4a\x47\x4c\x56',0x2cc)]=!![],i0[ix('\x77\x30\x57\x53',-0xb3,-0x122,-0xfb,-0x18a)]=!![],i0[iG(0x1e5,0x309,0x20c,'\x49\x54\x62\x5b',0x267)+'\x6e']=![];var i1={};i1[ix('\x40\x7a\x76\x4e',-0x3f,-0x25,0xb1,-0xaa)]=ic(-0xb9,-0x158,'\x26\x7a\x56\x68',-0xdd,-0xbe)+iG(0x3db,0x342,0x391,'\x77\x30\x57\x53',0x33b),i1[ix('\x30\x5b\x66\x38',0xca,-0x6,-0x92,-0x90)+iL(0x7d,'\x4c\x30\x5b\x42',0xf1,0xdc,0x1ba)]=i0,i1[ix('\x77\x30\x57\x53',-0x108,-0x19b,-0x221,-0x1a3)]=[ic(-0x11a,-0x15c,'\x4a\x47\x4c\x56',-0x18f,-0xed)+'\x30',iq(0xad,0xc9,'\x62\x65\x70\x6e',0x144,0x142)+'\x41',iL(0xf9,'\x6b\x4e\x4f\x6a',0xa1,0xe5,0x2e)+'\x30',ix('\x49\x54\x62\x5b',-0x6e,-0xca,-0x9a,-0x78)+'\x41',iL(0x21,'\x52\x64\x2a\x31',0x7,0xb,0x2a)+'\x30',iL(0x95,'\x52\x64\x2a\x31',0x6f,0xef,0xc2)+'\x41',iL(-0x37,'\x24\x5b\x35\x7a',0x90,0x109,0x92)+'\x30',iq(0x2b,0x3d,'\x4b\x53\x51\x5e',0x138,0xd0)+'\x41',iL(0xa7,'\x53\x34\x50\x25',0xf7,0xc5,0x19d)+'\x35',iq(0x1c5,0x101,'\x26\x78\x6a\x4f',0x155,0x145)+'\x46',ix('\x31\x76\x34\x38',-0x46,-0x73,-0xec,-0x62)+'\x35',iL(0xd4,'\x49\x54\x62\x5b',0x1f,0xf,0xcd)+'\x46',ic(-0x62,-0xb4,'\x28\x33\x53\x72',-0x41,-0x2)+'\x35',iG(0x385,0x3e2,0x316,'\x65\x76\x4e\x71',0x3a6)+'\x46',iG(0x20b,0x374,0x371,'\x24\x6d\x49\x4c',0x2bd)+'\x35',ix('\x26\x78\x6a\x4f',-0xf3,-0xa6,-0x136,-0x89)+'\x46'];var i2={};i2[iq(-0x1e,0xd5,'\x62\x65\x70\x6e',0x76,0x98)]=!![],i2[ic(-0x1a4,-0x1f4,'\x31\x76\x34\x38',-0x1a4,-0x14e)]=!![];function ix(iF,id,ih,iO,iH){return R(ih- -0x26e,iF);}i2[iq(0x27b,0x280,'\x4a\x47\x4c\x56',0x2cd,0x209)+'\x6e']=![];var i3={};i3[iG(0x40f,0x2ef,0x377,'\x55\x32\x25\x5b',0x38d)]=iq(0xe6,0xb3,'\x21\x6f\x75\x31',0xea,0x16a)+'\x65\x64',i3[ic(-0x64,-0xe4,'\x29\x44\x49\x31',-0x9f,-0x9a)+iL(0x128,'\x50\x79\x5e\x38',0x134,0xd6,0x15d)]=i2,i3[ic(-0xb5,-0xa6,'\x24\x6d\x49\x4c',-0x182,-0xbd)]=[ix('\x4a\x47\x4c\x56',-0x10f,-0x131,-0x11e,-0x1a3)+'\x30',iL(0x49,'\x41\x73\x33\x33',0x37,0x18,0x3a)+'\x34',iq(0x206,0x13d,'\x55\x32\x25\x5b',0x140,0x153)+'\x30',ix('\x47\x6a\x6d\x30',-0x119,-0x5b,-0x91,0x8)+'\x34',iG(0x3d3,0x37c,0x295,'\x31\x76\x34\x38',0x36c)+'\x30',ic(-0xfc,-0x141,'\x47\x6a\x6d\x30',-0x12a,-0x9d)+'\x34',iG(0x35b,0x3a3,0x3bd,'\x77\x30\x57\x53',0x321)+'\x30',iq(0x1ce,0x142,'\x28\x73\x50\x57',0x137,0x100)+'\x34',iL(0x16a,'\x29\x44\x49\x31',0xd0,0x8f,0x154)+'\x45',ix('\x65\x76\x4e\x71',-0x20,-0x5a,-0xe,0x73)+'\x43',ic(-0x10b,-0xa1,'\x4b\x53\x51\x5e',-0x42,-0xd0)+'\x45',ic(0x54,-0x27,'\x5b\x6e\x4c\x63',-0x2f,0xc)+'\x33',iG(0x313,0x36d,0x3a1,'\x44\x4c\x4a\x39',0x34f)+'\x45',iL(0x18f,'\x40\x7a\x76\x4e',0xf4,0x23,0x111)+'\x33',iq(0x16e,0x60,'\x4b\x53\x51\x5e',0x1d0,0x11c)+'\x45',iG(0x39c,0x35b,0x276,'\x4a\x47\x4c\x56',0x2ec)+'\x46'];var i4={};i4[ix('\x45\x64\x28\x54',-0x8b,-0x14e,-0x1d8,-0xae)]=!![],i4[iq(0x22f,0x1ff,'\x44\x4c\x4a\x39',0x215,0x185)]=!![],i4[iq(0x133,0x1a9,'\x31\x76\x34\x38',0x182,0x1e2)+'\x6e']=![];var i5={};i5[iL(0xa8,'\x65\x76\x4e\x71',0x164,0x22e,0x212)]=iq(0x4e,0x1a6,'\x66\x6d\x76\x4a',0x19,0xed)+'\x79',i5[iL(0x8f,'\x66\x6d\x76\x4a',-0x9,-0x8,-0x48)+ic(0xbb,0x90,'\x7a\x56\x40\x4f',0xc8,0xb)]=i4,i5[iq(0x14a,-0x12,'\x31\x76\x34\x38',0x13,0xc2)]=[iG(0x42c,0x34b,0x3a6,'\x59\x50\x67\x49',0x3b0)+'\x30',ic(-0x79,-0x1be,'\x5b\x6e\x4c\x63',-0x169,-0x119)+'\x46',ic(-0x1d4,-0x39,'\x2a\x62\x70\x46',-0x92,-0x10d)+'\x32',iL(0x200,'\x26\x78\x6a\x4f',0x173,0xf6,0xea)+'\x45',ic(0x81,0x35,'\x31\x76\x34\x38',0x18,0x7)+'\x39',iL(0x22c,'\x77\x30\x57\x53',0x170,0x1ee,0x1a5)+'\x43',iG(0x336,0x326,0x3ed,'\x69\x6f\x61\x52',0x331)+'\x37',iL(0xab,'\x41\x73\x33\x33',0xcb,0xa6,0x12e)+'\x36',iL(0x161,'\x59\x50\x67\x49',0x92,0x13f,0x132)+'\x30',iq(0x11c,0x189,'\x54\x41\x53\x61',0x1a4,0x164)+'\x34',iG(0x2cc,0x3a5,0x2d1,'\x21\x4f\x51\x73',0x30d)+'\x38',ix('\x4b\x53\x51\x5e',-0x13b,-0x8f,0x9,-0x64)+'\x44',iL(-0xb8,'\x33\x65\x52\x2a',0x14,0x31,-0x7d)+'\x36',iG(0x33f,0x36d,0x308,'\x65\x76\x4e\x71',0x2bb)+'\x37',ix('\x28\x33\x53\x72',-0x4a,-0x7f,-0x5d,0xc)+'\x41',iL(0x121,'\x7a\x5e\x33\x28',0xe3,0xcf,0x44)+'\x46'];function i(){var iP=['\x57\x4f\x2f\x64\x52\x49\x34','\x57\x36\x46\x63\x4d\x30\x58\x6a\x68\x57','\x57\x50\x37\x63\x51\x53\x6b\x6c\x57\x35\x52\x63\x4c\x47','\x57\x4f\x69\x6d\x75\x43\x6b\x72\x57\x52\x78\x64\x4c\x66\x75\x51\x57\x51\x30\x50\x69\x49\x53','\x57\x35\x46\x63\x48\x5a\x56\x63\x53\x43\x6b\x44\x57\x36\x78\x64\x4c\x38\x6f\x6c\x57\x37\x4a\x64\x47\x47','\x6b\x6d\x6f\x52\x57\x50\x69\x4c','\x57\x52\x5a\x63\x49\x43\x6f\x79\x57\x36\x47\x5a\x57\x34\x43\x65','\x6a\x38\x6b\x46\x57\x35\x44\x32','\x57\x50\x75\x39\x6d\x38\x6f\x37\x57\x52\x38\x47\x6b\x43\x6b\x61\x69\x6d\x6b\x77\x57\x37\x76\x51\x57\x50\x4f','\x57\x36\x68\x63\x55\x43\x6f\x31\x57\x36\x43\x36','\x57\x35\x42\x64\x51\x63\x35\x72\x6b\x61','\x41\x4b\x72\x77\x57\x37\x52\x64\x48\x47','\x41\x4d\x2f\x63\x4e\x6d\x6f\x70\x69\x61','\x57\x34\x6c\x63\x4d\x53\x6f\x38\x64\x38\x6f\x77','\x57\x52\x6e\x4c\x79\x64\x5a\x63\x4c\x61','\x69\x43\x6f\x53\x76\x43\x6f\x4f\x71\x53\x6f\x6d\x57\x50\x47','\x57\x37\x44\x59\x57\x51\x78\x63\x56\x43\x6f\x32','\x57\x34\x68\x64\x4f\x53\x6b\x55\x57\x34\x53\x65','\x57\x50\x42\x64\x47\x32\x70\x64\x4f\x6d\x6b\x4e','\x57\x37\x76\x54\x57\x35\x2f\x63\x53\x38\x6f\x7a','\x74\x49\x56\x64\x55\x6d\x6b\x47\x57\x36\x30','\x61\x38\x6f\x6a\x67\x63\x35\x71','\x71\x43\x6b\x44\x6c\x71\x7a\x49','\x57\x34\x5a\x64\x4c\x66\x57\x6d\x57\x35\x61','\x57\x50\x6a\x47\x70\x5a\x79\x4f','\x75\x75\x76\x6e\x57\x4f\x5a\x63\x4e\x47','\x65\x74\x79\x36\x57\x50\x47\x32\x57\x35\x56\x63\x48\x71\x52\x63\x4f\x63\x61','\x46\x77\x69\x30\x64\x43\x6f\x69\x65\x43\x6b\x75','\x57\x34\x44\x4f\x41\x61','\x65\x6d\x6b\x49\x6d\x71','\x57\x4f\x2f\x64\x4c\x68\x2f\x64\x4a\x53\x6b\x37','\x73\x38\x6f\x62\x70\x57\x4e\x64\x49\x57','\x61\x43\x6b\x36\x6d\x43\x6b\x47\x57\x36\x57','\x57\x36\x7a\x6f\x6e\x32\x68\x64\x49\x61','\x57\x37\x6a\x63\x6f\x67\x65','\x57\x34\x37\x63\x4b\x63\x52\x63\x49\x53\x6f\x74','\x67\x72\x4a\x63\x53\x43\x6f\x49\x57\x50\x65','\x57\x52\x30\x49\x57\x50\x46\x64\x4a\x6d\x6f\x6a','\x57\x52\x71\x75\x6d\x63\x37\x64\x4f\x71','\x45\x6d\x6b\x62\x73\x64\x62\x76','\x57\x50\x37\x64\x4a\x73\x4a\x64\x50\x65\x43','\x42\x31\x56\x63\x56\x53\x6f\x4d\x57\x36\x61','\x68\x6d\x6f\x69\x57\x52\x75\x68\x72\x47','\x64\x53\x6b\x62\x64\x4a\x4f','\x6d\x38\x6f\x68\x73\x73\x64\x63\x56\x47','\x67\x64\x69\x37\x57\x50\x47\x67','\x57\x52\x64\x64\x4a\x31\x34\x6a\x45\x30\x4a\x64\x53\x61','\x69\x6d\x6b\x6d\x57\x34\x58\x4b','\x57\x51\x68\x63\x55\x6d\x6f\x64\x75\x4e\x4f','\x57\x52\x6d\x4f\x57\x4f\x37\x64\x53\x6d\x6f\x61','\x57\x4f\x52\x63\x55\x68\x61\x67\x46\x57','\x74\x30\x5a\x64\x4a\x76\x42\x63\x4b\x57','\x57\x36\x70\x63\x4c\x53\x6b\x44\x67\x4a\x57','\x46\x59\x76\x37\x57\x36\x68\x63\x53\x57','\x79\x63\x6a\x36\x57\x37\x78\x63\x49\x71','\x57\x4f\x5a\x64\x53\x4a\x42\x64\x56\x78\x61','\x57\x52\x70\x63\x56\x38\x6b\x46\x57\x52\x38\x4f','\x57\x52\x4e\x63\x4f\x71\x71','\x68\x53\x6b\x66\x45\x38\x6f\x58','\x57\x34\x62\x67\x41\x57\x62\x35','\x57\x50\x42\x64\x47\x32\x70\x64\x54\x38\x6b\x57','\x57\x36\x76\x49\x73\x64\x72\x46','\x57\x4f\x5a\x64\x53\x4e\x52\x63\x55\x73\x61','\x57\x51\x64\x63\x4a\x43\x6b\x6d','\x57\x35\x74\x63\x49\x74\x78\x64\x47\x53\x6f\x48','\x45\x78\x4a\x63\x55\x6d\x6b\x64','\x57\x36\x56\x63\x4b\x38\x6b\x38\x74\x6d\x6f\x5a','\x57\x50\x47\x47\x77\x33\x6d','\x66\x72\x64\x63\x4f\x43\x6f\x4e','\x57\x36\x68\x63\x54\x53\x6f\x4a\x6e\x63\x43','\x57\x52\x70\x63\x4d\x53\x6b\x6a\x57\x35\x71\x6d','\x42\x57\x2f\x64\x4f\x6d\x6b\x61\x57\x51\x38','\x73\x4c\x68\x64\x4c\x47\x2f\x63\x47\x47','\x78\x53\x6b\x76\x6f\x47\x58\x5a','\x64\x6d\x6b\x72\x7a\x62\x53','\x57\x52\x72\x4c\x42\x4a\x74\x64\x52\x61','\x71\x77\x58\x2f\x57\x4f\x47\x53','\x44\x6d\x6f\x32\x72\x6d\x6f\x4f\x41\x47','\x57\x36\x4a\x63\x47\x38\x6b\x32\x67\x38\x6f\x37','\x57\x51\x42\x63\x48\x53\x6b\x4e\x57\x36\x54\x68','\x6a\x38\x6b\x33\x6b\x6d\x6b\x47\x57\x52\x38','\x57\x52\x5a\x64\x49\x59\x37\x64\x50\x4b\x79','\x66\x38\x6f\x55\x6e\x38\x6b\x57\x57\x36\x53','\x57\x35\x56\x63\x55\x6d\x6f\x4e\x44\x4a\x4b','\x57\x4f\x61\x69\x75\x53\x6b\x43\x57\x36\x52\x63\x56\x30\x47\x32\x57\x51\x34\x50','\x57\x35\x6a\x78\x64\x61','\x57\x36\x6c\x64\x4a\x66\x6d\x6a\x42\x47','\x57\x37\x30\x76\x42\x4e\x4e\x63\x48\x47','\x65\x6d\x6b\x37\x6b\x53\x6b\x47\x57\x34\x61','\x6c\x53\x6f\x6a\x63\x63\x6c\x64\x4d\x57','\x44\x53\x6f\x55\x75\x43\x6f\x2f\x44\x47','\x57\x50\x5a\x64\x49\x59\x37\x64\x50\x4b\x79','\x67\x4b\x75\x5a','\x57\x4f\x79\x63\x76\x38\x6b\x72\x57\x52\x46\x63\x4c\x76\x79\x75\x57\x4f\x65\x58\x61\x61','\x43\x43\x6b\x4d\x78\x43\x6f\x4a\x43\x61','\x68\x65\x6a\x67\x57\x50\x66\x43','\x57\x35\x64\x63\x51\x32\x52\x63\x54\x64\x61','\x57\x34\x66\x6a\x63\x53\x6f\x64\x57\x37\x71','\x57\x51\x2f\x63\x4d\x53\x6b\x41','\x57\x52\x64\x64\x49\x6d\x6f\x54\x73\x38\x6b\x35\x42\x59\x34\x33\x46\x58\x74\x64\x50\x47','\x57\x34\x37\x64\x48\x61\x38','\x57\x4f\x64\x63\x56\x53\x6f\x79\x57\x4f\x47\x48','\x57\x34\x31\x4c\x78\x68\x47\x52','\x57\x35\x4a\x63\x49\x5a\x78\x64\x4f\x68\x69\x63\x57\x34\x33\x64\x47\x47','\x57\x52\x74\x64\x53\x43\x6b\x54\x57\x4f\x5a\x63\x53\x71','\x57\x35\x35\x5a\x64\x31\x72\x51','\x57\x4f\x56\x63\x4b\x73\x4a\x63\x54\x47','\x57\x35\x4e\x63\x4a\x43\x6f\x48\x64\x38\x6f\x77','\x6a\x31\x78\x63\x54\x53\x6b\x7a\x57\x36\x30','\x57\x4f\x44\x35\x57\x51\x68\x63\x50\x38\x6f\x53','\x67\x64\x69\x37\x57\x50\x48\x31','\x57\x37\x44\x76\x6d\x68\x68\x64\x49\x61','\x72\x43\x6b\x6c\x70\x57\x76\x4d','\x69\x38\x6b\x46\x57\x35\x4c\x4f','\x6e\x6d\x6f\x56\x57\x50\x34\x4b','\x57\x51\x4f\x53\x57\x4f\x2f\x64\x54\x47','\x77\x5a\x33\x63\x4b\x49\x7a\x45','\x6a\x38\x6b\x70\x68\x4a\x34','\x64\x72\x70\x64\x55\x74\x33\x63\x4f\x71','\x42\x4b\x42\x63\x52\x53\x6b\x61\x57\x51\x34','\x57\x34\x42\x63\x4e\x53\x6b\x47\x6f\x53\x6f\x44','\x57\x35\x7a\x4f\x66\x43\x6f\x6e\x57\x36\x47','\x6b\x38\x6b\x33\x62\x62\x30\x6c','\x45\x6d\x6f\x52\x6f\x47\x72\x74','\x57\x4f\x64\x64\x4c\x73\x37\x64\x54\x4d\x43','\x57\x50\x62\x4d\x74\x74\x79\x51','\x57\x50\x74\x63\x4c\x6d\x6f\x35\x57\x36\x39\x55','\x57\x52\x46\x63\x53\x43\x6b\x34\x57\x52\x75\x50','\x57\x36\x78\x64\x50\x32\x48\x51\x57\x37\x61','\x72\x57\x4e\x64\x47\x53\x6b\x6f\x46\x61','\x57\x52\x68\x63\x4a\x43\x6b\x68\x57\x34\x47\x66','\x57\x50\x74\x64\x4c\x67\x33\x64\x4f\x57','\x57\x50\x2f\x64\x55\x53\x6f\x6c\x63\x32\x30','\x64\x47\x48\x61\x57\x35\x4e\x64\x47\x47','\x6f\x4e\x65\x73\x57\x34\x4b\x4f','\x57\x4f\x6c\x64\x4e\x72\x37\x64\x52\x31\x53','\x57\x36\x42\x64\x50\x6d\x6f\x34\x57\x50\x4c\x55','\x57\x36\x69\x71\x74\x30\x79\x51','\x6f\x53\x6f\x57\x78\x64\x54\x6a','\x57\x36\x52\x64\x47\x76\x4f\x75','\x62\x43\x6f\x72\x6f\x53\x6b\x57\x57\x35\x69','\x57\x4f\x47\x49\x79\x38\x6b\x6d\x74\x71','\x57\x52\x74\x64\x48\x53\x6f\x52\x73\x38\x6b\x37\x6c\x49\x30\x6a\x75\x57\x5a\x64\x48\x65\x61','\x61\x47\x78\x63\x54\x6d\x6f\x4f\x57\x50\x61','\x42\x4e\x64\x63\x4f\x38\x6b\x6d','\x57\x35\x68\x64\x48\x65\x39\x69','\x45\x73\x5a\x64\x53\x6d\x6b\x69\x57\x37\x34','\x57\x36\x4e\x63\x4c\x71\x47','\x6f\x43\x6f\x48\x57\x50\x34\x53\x79\x71','\x73\x78\x6a\x37\x57\x34\x30\x52','\x62\x6d\x6b\x38\x6d\x43\x6b\x58\x57\x37\x4f','\x71\x38\x6f\x2b\x67\x43\x6b\x65\x57\x51\x38','\x70\x32\x7a\x6c\x57\x51\x78\x63\x54\x71','\x45\x49\x44\x57\x57\x37\x64\x63\x4f\x47','\x6b\x4e\x4a\x63\x55\x43\x6b\x7a\x57\x36\x6d','\x62\x6d\x6f\x61\x78\x53\x6b\x56\x57\x35\x30','\x57\x52\x6c\x64\x52\x38\x6b\x59\x57\x52\x62\x74','\x57\x36\x33\x64\x52\x53\x6b\x49\x65\x30\x71','\x6e\x68\x42\x64\x49\x6d\x6b\x66\x44\x53\x6b\x61\x6e\x6d\x6f\x74\x64\x43\x6b\x42\x72\x6d\x6b\x66\x74\x71','\x74\x66\x46\x63\x4b\x43\x6b\x52\x57\x52\x4b','\x76\x38\x6b\x72\x65\x47\x66\x4c','\x57\x4f\x34\x4b\x74\x4e\x79','\x67\x43\x6f\x6d\x57\x52\x6a\x34\x72\x61','\x71\x65\x39\x7a\x57\x50\x46\x63\x49\x71','\x57\x4f\x71\x48\x43\x4e\x34\x51','\x57\x34\x4f\x54\x77\x32\x75\x39','\x57\x34\x50\x78\x77\x71\x44\x58','\x57\x34\x68\x63\x56\x53\x6f\x58\x6e\x77\x69','\x61\x4e\x76\x44\x75\x38\x6f\x79','\x57\x50\x4e\x63\x50\x6d\x6b\x44\x57\x35\x2f\x63\x4e\x47','\x68\x31\x4c\x75\x57\x4f\x39\x35','\x69\x75\x65\x46\x64\x6d\x6f\x53','\x57\x36\x33\x63\x53\x43\x6f\x4c\x57\x36\x69\x61','\x57\x35\x56\x63\x4f\x38\x6f\x38\x6e\x68\x71','\x57\x50\x6c\x64\x56\x4a\x56\x64\x4f\x61','\x41\x53\x6b\x2b\x57\x34\x6e\x58\x71\x71','\x57\x51\x2f\x63\x4a\x78\x68\x63\x53\x78\x43','\x57\x4f\x56\x64\x47\x43\x6b\x69\x46\x53\x6f\x65','\x45\x6d\x6f\x52\x73\x78\x43\x47','\x57\x35\x70\x64\x4b\x30\x66\x43\x57\x35\x6d','\x57\x4f\x78\x64\x48\x43\x6f\x68\x57\x36\x47\x73','\x64\x6d\x6b\x42\x70\x57\x71\x4c','\x57\x36\x6a\x63\x71\x6d\x6f\x32\x57\x52\x79','\x57\x50\x65\x77\x70\x65\x62\x79','\x57\x37\x5a\x63\x51\x38\x6f\x31\x57\x36\x6d\x69','\x57\x51\x64\x63\x53\x6d\x6f\x6f\x74\x57','\x6a\x4c\x56\x64\x54\x53\x6f\x66\x57\x36\x65','\x65\x6d\x6b\x38\x6e\x38\x6b\x32','\x65\x47\x68\x64\x51\x47','\x57\x4f\x6c\x64\x4b\x68\x4a\x64\x50\x47','\x75\x38\x6b\x54\x6e\x38\x6b\x4f\x57\x37\x69','\x57\x37\x78\x63\x4b\x6d\x6b\x59\x78\x53\x6f\x48','\x57\x52\x74\x63\x4c\x78\x58\x79\x64\x71','\x41\x5a\x62\x69\x57\x50\x30\x67','\x41\x4a\x6e\x39\x57\x36\x78\x64\x55\x57','\x57\x34\x48\x63\x6e\x77\x4e\x64\x47\x47','\x42\x43\x6b\x75\x77\x48\x74\x63\x54\x47','\x69\x38\x6b\x2f\x65\x73\x43','\x57\x50\x46\x64\x50\x62\x50\x50\x57\x4f\x69','\x62\x53\x6f\x6d\x68\x59\x4c\x78','\x57\x51\x57\x2f\x57\x36\x64\x64\x55\x43\x6f\x38\x6e\x53\x6f\x6d\x64\x43\x6f\x70\x57\x35\x30\x4b','\x57\x34\x46\x63\x4a\x43\x6f\x54\x67\x6d\x6f\x68','\x57\x4f\x68\x64\x51\x5a\x2f\x64\x51\x4d\x71','\x44\x61\x6e\x44\x75\x38\x6b\x55','\x64\x38\x6b\x5a\x64\x4a\x52\x64\x52\x71','\x74\x4c\x74\x63\x4c\x53\x6f\x7a\x57\x34\x30','\x57\x51\x42\x64\x4e\x72\x5a\x64\x47\x4b\x79','\x57\x35\x56\x63\x55\x53\x6f\x30\x70\x77\x53','\x57\x35\x5a\x63\x48\x48\x70\x63\x4a\x6d\x6f\x7a','\x78\x38\x6f\x78\x71\x32\x56\x64\x4e\x61','\x57\x51\x57\x64\x63\x49\x44\x50','\x77\x30\x2f\x64\x4e\x48\x58\x62','\x57\x34\x50\x78\x76\x48\x6e\x33','\x57\x34\x52\x63\x4e\x53\x6f\x38\x67\x47','\x73\x72\x65\x48\x57\x51\x74\x63\x4b\x61','\x42\x4c\x46\x63\x53\x43\x6b\x6d\x57\x51\x34','\x57\x50\x5a\x64\x48\x53\x6b\x57\x6f\x43\x6b\x62','\x42\x5a\x47\x2f\x57\x37\x74\x64\x52\x57','\x41\x49\x37\x64\x4a\x68\x43','\x44\x43\x6b\x41\x70\x47\x79\x49','\x57\x34\x50\x63\x7a\x62\x61','\x57\x51\x44\x70\x70\x67\x4e\x64\x4e\x71','\x57\x52\x75\x69\x6e\x4a\x5a\x64\x4e\x47','\x57\x52\x61\x78\x41\x74\x78\x64\x51\x57','\x57\x37\x6e\x34\x57\x35\x78\x63\x50\x53\x6b\x79','\x57\x50\x79\x64\x6e\x66\x75\x55','\x57\x35\x33\x63\x4e\x73\x79\x4a\x6c\x47','\x57\x51\x64\x63\x50\x53\x6b\x4c\x57\x52\x38\x4f','\x57\x34\x75\x42\x64\x43\x6f\x62\x57\x37\x71','\x57\x4f\x4a\x64\x4d\x64\x78\x64\x4f\x61','\x57\x51\x42\x64\x54\x77\x62\x50\x77\x57','\x57\x35\x5a\x63\x49\x38\x6f\x48\x68\x53\x6f\x61','\x57\x36\x74\x63\x54\x6d\x6f\x54\x57\x36\x4b\x73','\x57\x52\x6d\x2f\x57\x4f\x56\x64\x50\x38\x6f\x6b','\x71\x33\x5a\x64\x4a\x53\x6f\x34\x63\x71','\x63\x38\x6b\x79\x6f\x47\x71\x47','\x57\x4f\x37\x64\x4d\x67\x4a\x64\x4f\x38\x6b\x57','\x72\x76\x46\x64\x52\x76\x64\x63\x53\x61','\x67\x53\x6b\x73\x66\x73\x56\x64\x56\x61','\x61\x4e\x76\x75\x6a\x43\x6b\x52','\x72\x32\x76\x35\x57\x34\x4b\x4f','\x72\x75\x4e\x64\x50\x6d\x6b\x30\x57\x34\x74\x64\x55\x43\x6b\x47\x6c\x53\x6b\x48\x61\x38\x6f\x66','\x57\x37\x64\x63\x47\x38\x6b\x32\x63\x53\x6f\x54','\x6e\x4c\x79\x6d\x62\x57','\x6e\x6d\x6b\x46\x57\x35\x44\x31\x57\x34\x53','\x57\x52\x70\x63\x49\x38\x6b\x62\x57\x35\x30\x74','\x41\x4a\x4c\x57\x57\x52\x68\x63\x56\x57','\x57\x51\x79\x72\x6c\x61','\x57\x37\x35\x70\x68\x67\x33\x63\x4c\x61','\x45\x72\x4e\x63\x4b\x63\x56\x63\x4c\x71','\x61\x53\x6b\x65\x75\x53\x6f\x38\x57\x4f\x65','\x57\x51\x6c\x63\x55\x43\x6f\x66\x75\x33\x69','\x61\x71\x70\x63\x55\x53\x6f\x32\x57\x50\x65','\x43\x63\x33\x63\x4e\x53\x6f\x75\x70\x71','\x57\x51\x78\x63\x56\x53\x6f\x5a\x57\x36\x4b\x63','\x57\x52\x78\x63\x4b\x6d\x6b\x41\x57\x34\x65','\x67\x4b\x6e\x6a\x57\x34\x38','\x75\x38\x6b\x56\x45\x6d\x6b\x50\x57\x37\x79','\x57\x50\x69\x42\x74\x74\x7a\x44','\x57\x34\x6d\x74\x42\x4b\x64\x63\x4e\x71','\x63\x43\x6f\x50\x6f\x68\x66\x74','\x69\x48\x6e\x31\x57\x36\x78\x63\x54\x57','\x57\x34\x78\x64\x49\x65\x62\x69\x57\x35\x6d','\x79\x4c\x52\x64\x4b\x61\x37\x63\x55\x61','\x66\x61\x70\x63\x52\x61\x74\x64\x4d\x47','\x57\x37\x78\x63\x4c\x6d\x6b\x2b\x67\x47','\x73\x73\x70\x64\x51\x59\x70\x63\x56\x61','\x77\x38\x6f\x43\x45\x4c\x4b','\x42\x65\x64\x63\x51\x6d\x6b\x76\x57\x52\x47','\x57\x51\x6c\x63\x4f\x6d\x6b\x4a\x57\x52\x30\x50','\x57\x35\x52\x63\x4f\x6d\x6f\x30\x70\x68\x43','\x57\x37\x46\x63\x47\x38\x6b\x57\x64\x53\x6f\x54','\x64\x38\x6f\x6e\x68\x76\x66\x75','\x71\x62\x69\x61\x57\x34\x6c\x64\x49\x61','\x43\x48\x38\x4f\x57\x51\x74\x64\x4c\x71','\x57\x4f\x75\x2f\x42\x67\x5a\x63\x4e\x61','\x57\x35\x37\x63\x47\x66\x52\x64\x48\x43\x6b\x43','\x72\x66\x64\x63\x52\x61\x74\x64\x47\x38\x6f\x51\x57\x4f\x64\x64\x47\x61','\x57\x35\x2f\x63\x4e\x72\x46\x63\x4e\x43\x6f\x36','\x57\x34\x70\x64\x49\x38\x6f\x57\x6c\x53\x6f\x50','\x57\x4f\x64\x63\x55\x4e\x69\x68','\x57\x50\x65\x6b\x76\x43\x6f\x7a','\x57\x35\x52\x63\x53\x53\x6f\x48\x43\x77\x34','\x57\x36\x52\x63\x51\x53\x6f\x53\x57\x36\x43\x72','\x57\x36\x46\x63\x4b\x48\x43\x42\x57\x4f\x65','\x57\x36\x66\x76\x70\x71','\x43\x43\x6f\x79\x57\x37\x35\x64\x57\x50\x53','\x77\x4d\x33\x63\x4d\x43\x6f\x6f\x57\x50\x47','\x57\x34\x78\x63\x4c\x72\x46\x63\x4e\x71','\x57\x34\x6d\x76\x42\x4b\x64\x63\x4d\x71','\x79\x73\x68\x64\x48\x78\x34\x61','\x57\x36\x6c\x64\x4b\x66\x66\x6e\x68\x71','\x57\x51\x74\x63\x4f\x78\x78\x64\x4c\x67\x65','\x78\x32\x31\x2b\x57\x34\x71\x48','\x57\x36\x56\x63\x52\x6d\x6f\x72\x57\x36\x43\x72','\x41\x53\x6b\x2b\x57\x52\x75\x68\x6d\x61','\x6b\x6d\x6f\x65\x63\x64\x69','\x41\x59\x37\x64\x48\x78\x53\x62','\x46\x73\x6e\x39\x57\x37\x74\x63\x50\x71','\x70\x38\x6b\x51\x66\x73\x43\x76','\x46\x75\x64\x63\x4f\x38\x6b\x79','\x44\x53\x6f\x42\x57\x4f\x62\x68\x57\x50\x47','\x68\x43\x6b\x73\x65\x59\x2f\x64\x56\x61','\x6e\x65\x65\x63\x65\x38\x6f\x37','\x57\x35\x5a\x64\x51\x49\x48\x73\x76\x58\x68\x64\x52\x53\x6f\x6e\x57\x51\x35\x64','\x57\x34\x70\x63\x53\x53\x6f\x52\x6f\x38\x6b\x38','\x57\x50\x4a\x64\x49\x6d\x6b\x58\x73\x38\x6b\x61\x57\x50\x4e\x63\x4c\x43\x6b\x58\x74\x31\x6c\x63\x50\x57','\x78\x4c\x68\x64\x4d\x48\x52\x63\x4b\x57','\x57\x36\x64\x64\x4f\x38\x6f\x37\x57\x36\x4f\x77\x57\x50\x68\x63\x4d\x43\x6b\x64\x69\x66\x61','\x67\x38\x6f\x4a\x6b\x62\x74\x64\x48\x71','\x57\x35\x5a\x63\x49\x71\x6c\x63\x54\x78\x43','\x57\x50\x33\x63\x4b\x53\x6b\x48\x66\x65\x6d','\x66\x53\x6b\x74\x6b\x58\x57\x32','\x57\x34\x6e\x39\x74\x53\x6b\x71\x57\x51\x47','\x61\x53\x6f\x61\x70\x4d\x68\x63\x54\x47','\x45\x67\x78\x63\x56\x53\x6b\x69\x57\x37\x38','\x67\x43\x6b\x75\x63\x68\x56\x64\x55\x47','\x79\x43\x6f\x50\x72\x53\x6f\x30\x74\x71','\x6b\x67\x6c\x64\x4d\x53\x6f\x6b\x70\x71','\x57\x35\x35\x43\x66\x38\x6f\x66\x57\x36\x53','\x61\x43\x6b\x6a\x41\x4c\x4b\x4e','\x57\x37\x33\x63\x51\x30\x35\x67\x64\x71','\x44\x66\x56\x63\x4f\x38\x6b\x62\x57\x52\x47','\x57\x34\x2f\x63\x4c\x71\x37\x63\x4d\x71','\x57\x35\x54\x4c\x62\x5a\x44\x50','\x44\x49\x52\x64\x47\x68\x79','\x57\x52\x78\x64\x56\x43\x6b\x44\x63\x4a\x65','\x57\x34\x50\x67\x7a\x48\x53','\x57\x36\x66\x41\x63\x43\x6f\x62\x57\x37\x69','\x6c\x75\x43\x69\x71\x38\x6f\x4e','\x57\x4f\x70\x64\x53\x33\x52\x63\x4f\x64\x65','\x44\x4d\x35\x79\x57\x35\x64\x64\x4d\x61','\x57\x34\x52\x63\x49\x53\x6b\x47\x57\x51\x44\x7a','\x57\x36\x74\x63\x48\x6d\x6b\x54\x64\x6d\x6f\x54','\x62\x38\x6f\x7a\x57\x4f\x47\x31\x57\x50\x34','\x6c\x6d\x6b\x65\x57\x35\x58\x48\x57\x34\x53','\x46\x63\x6d\x30\x57\x37\x37\x63\x53\x61','\x57\x52\x2f\x64\x51\x64\x78\x64\x4d\x32\x47','\x57\x52\x43\x55\x57\x50\x64\x64\x55\x53\x6f\x46','\x57\x52\x46\x63\x56\x6d\x6b\x4f\x57\x51\x4f\x50','\x61\x43\x6f\x7a\x57\x4f\x61\x57\x57\x50\x4b','\x61\x43\x6b\x59\x57\x4f\x4f\x79\x57\x51\x47','\x79\x73\x37\x63\x4a\x53\x6f\x43','\x57\x4f\x70\x63\x56\x4a\x38\x77\x44\x71','\x57\x35\x4e\x63\x47\x62\x70\x63\x4e\x43\x6f\x70','\x57\x36\x42\x63\x4b\x6d\x6f\x50\x67\x65\x6d','\x57\x34\x46\x63\x54\x53\x6f\x34\x6e\x61','\x45\x72\x2f\x63\x54\x38\x6b\x78\x57\x52\x69','\x57\x37\x64\x64\x4a\x43\x6f\x71\x57\x4f\x66\x76\x77\x62\x6c\x63\x49\x61\x75\x59\x57\x35\x64\x63\x56\x47\x56\x64\x4e\x71','\x57\x51\x4a\x63\x4e\x76\x4b\x4b\x6c\x57','\x6e\x38\x6f\x30\x44\x38\x6b\x76\x57\x36\x30','\x43\x43\x6b\x54\x64\x63\x6d\x69','\x57\x51\x68\x63\x50\x53\x6b\x2b\x57\x37\x4f\x33','\x57\x35\x33\x63\x49\x33\x4e\x63\x55\x61\x66\x41\x57\x52\x42\x63\x4f\x53\x6f\x48\x62\x65\x72\x33\x57\x52\x35\x78','\x42\x58\x6c\x63\x52\x38\x6b\x65\x57\x51\x38','\x57\x36\x35\x67\x6e\x67\x61','\x57\x50\x4f\x33\x76\x77\x43\x38','\x57\x50\x30\x33\x75\x32\x6d\x38','\x57\x52\x4b\x46\x41\x75\x42\x63\x4d\x57','\x75\x75\x79\x6a\x57\x50\x42\x64\x47\x57','\x77\x4d\x44\x51\x57\x34\x57','\x46\x6d\x6f\x50\x70\x71\x61\x4e','\x57\x37\x7a\x6b\x41\x67\x2f\x64\x50\x43\x6f\x2f\x57\x34\x6e\x55\x57\x50\x2f\x63\x47\x61','\x7a\x38\x6f\x50\x75\x38\x6f\x51\x46\x71','\x41\x59\x37\x63\x4c\x38\x6f\x79','\x57\x34\x78\x63\x54\x43\x6f\x32\x6a\x77\x65','\x57\x35\x4c\x73\x61\x43\x6f\x61\x57\x36\x6d','\x57\x36\x52\x64\x48\x66\x69\x6a','\x57\x34\x46\x63\x4d\x43\x6f\x5a\x64\x43\x6b\x6a','\x57\x4f\x64\x64\x4c\x49\x37\x64\x53\x75\x69','\x65\x65\x7a\x6e\x57\x4f\x46\x63\x4e\x71','\x57\x4f\x72\x63\x43\x38\x6b\x53\x57\x36\x65','\x44\x43\x6f\x45\x57\x4f\x38\x39\x57\x34\x6c\x64\x4b\x72\x58\x38\x57\x35\x4a\x63\x50\x71','\x74\x66\x4e\x63\x53\x6d\x6f\x56\x57\x51\x57','\x57\x4f\x4a\x64\x53\x4a\x37\x64\x4f\x67\x75','\x63\x43\x6f\x4f\x70\x4e\x50\x72','\x57\x4f\x68\x63\x53\x43\x6b\x67\x57\x34\x52\x63\x4c\x47','\x78\x43\x6f\x6f\x6c\x38\x6b\x36\x57\x50\x34','\x6b\x53\x6f\x38\x57\x50\x57\x58\x7a\x71','\x57\x36\x33\x63\x53\x66\x65\x6c\x61\x57','\x6e\x4d\x6d\x4c\x57\x51\x68\x63\x50\x77\x6c\x63\x4e\x38\x6f\x66\x57\x34\x43\x52','\x57\x4f\x71\x6f\x69\x38\x6f\x49\x57\x34\x61','\x75\x43\x6b\x42\x6a\x59\x44\x66','\x68\x58\x61\x41\x57\x35\x57\x2f','\x57\x34\x66\x42\x46\x76\x69\x47','\x57\x36\x56\x63\x4d\x6d\x6b\x5a\x62\x38\x6f\x34','\x66\x38\x6f\x33\x57\x52\x54\x6c\x57\x4f\x75','\x44\x4a\x56\x63\x4d\x38\x6f\x74\x6b\x57','\x72\x38\x6b\x73\x68\x59\x33\x64\x53\x61','\x63\x72\x30\x76\x57\x35\x70\x64\x4d\x47','\x57\x52\x56\x63\x4e\x53\x6b\x47\x74\x38\x6b\x47','\x65\x66\x47\x46\x57\x4f\x52\x63\x49\x47','\x57\x36\x2f\x63\x4b\x43\x6b\x47\x7a\x65\x65','\x6c\x53\x6b\x58\x67\x63\x43\x63','\x57\x36\x52\x64\x48\x43\x6b\x4e\x6b\x38\x6f\x62','\x57\x4f\x42\x63\x53\x43\x6b\x61\x57\x34\x37\x63\x4c\x47','\x44\x74\x33\x63\x4c\x43\x6f\x6e\x6b\x47','\x44\x4a\x56\x64\x49\x68\x43\x43','\x57\x36\x37\x63\x4f\x43\x6b\x38\x57\x52\x53\x31','\x77\x62\x68\x64\x53\x6d\x6f\x79\x57\x51\x57','\x57\x52\x68\x63\x55\x53\x6f\x64\x72\x68\x43','\x57\x50\x57\x47\x73\x67\x71\x57','\x57\x36\x6c\x64\x4f\x53\x6f\x38\x57\x36\x50\x52','\x62\x57\x46\x63\x54\x61\x4e\x64\x4d\x47','\x57\x4f\x33\x64\x4a\x6d\x6b\x61\x41\x71','\x57\x34\x33\x64\x54\x38\x6f\x36\x6a\x68\x6d','\x41\x5a\x47\x4b\x57\x36\x57\x51','\x57\x52\x33\x63\x53\x53\x6f\x44\x73\x4d\x47','\x43\x43\x6f\x30\x78\x43\x6f\x37\x79\x71','\x57\x51\x4b\x44\x6d\x4a\x57','\x44\x53\x6f\x5a\x72\x53\x6f\x2f\x79\x71','\x57\x51\x68\x63\x53\x6d\x6f\x6c','\x7a\x43\x6f\x30\x77\x38\x6f\x39\x79\x71','\x57\x52\x46\x63\x55\x38\x6f\x6c\x77\x33\x43','\x57\x36\x48\x6f\x70\x77\x68\x64\x49\x61','\x6f\x38\x6f\x6d\x67\x47','\x6e\x43\x6f\x67\x67\x5a\x46\x64\x51\x71','\x77\x38\x6b\x7a\x6a\x74\x4a\x63\x51\x71','\x57\x35\x78\x63\x4d\x43\x6f\x36\x73\x38\x6f\x75','\x57\x4f\x74\x64\x55\x49\x37\x64\x50\x71','\x57\x37\x6a\x36\x57\x35\x56\x63\x4f\x38\x6b\x43\x6b\x58\x37\x64\x51\x77\x48\x2f\x57\x37\x38','\x57\x36\x72\x67\x6c\x77\x71','\x41\x4b\x42\x64\x4b\x58\x4a\x63\x49\x61','\x57\x37\x72\x49\x57\x51\x78\x63\x56\x38\x6b\x50','\x57\x35\x70\x63\x4c\x6d\x6b\x4e\x63\x47','\x6d\x6d\x6f\x30\x44\x38\x6b\x6e\x57\x37\x61','\x6b\x4d\x46\x63\x56\x53\x6f\x43','\x42\x63\x42\x64\x48\x78\x79\x6b','\x57\x4f\x64\x63\x56\x53\x6f\x79\x57\x4f\x48\x71','\x57\x37\x6c\x63\x53\x43\x6b\x47\x57\x52\x53\x4f','\x6d\x38\x6b\x46\x57\x35\x66\x58\x57\x34\x53'];i=function(){return iP;};return i();}function R(Q,b){var F=i();return R=function(d,h){d=d-(-0x2ba*0x4+-0x2395*-0x1+0x7f7*-0x3);var O=F[d];if(R['\x52\x76\x70\x41\x4e\x49']===undefined){var H=function(C){var G='\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x2b\x2f\x3d';var f='',c='';for(var L=0x9af*0x2+-0x50f+-0xe4f,q,x,P=-0x47*-0x69+0x1c0+-0x1edf;x=C['\x63\x68\x61\x72\x41\x74'](P++);~x&&(q=L%(-0x5*0x5e9+-0x1*0x11d1+-0x17b1*-0x2)?q*(-0x2*-0xfbb+0x7ae*0x5+-0x459c)+x:x,L++%(0x7*0x3ae+-0x4d6*-0x5+-0x31ec))?f+=String['\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65'](-0x335*0xa+0x847+-0x14e*-0x13&q>>(-(0x7*-0x21d+0x1*-0x8b+-0xf58*-0x1)*L&-0xf47*0x1+-0xb7*0xf+0x1a06)):0x7*0x515+0xa3f+-0x11*0x2b2){x=G['\x69\x6e\x64\x65\x78\x4f\x66'](x);}for(var u=-0x267a+0x84*0x10+-0x35*-0x92,N=f['\x6c\x65\x6e\x67\x74\x68'];u<N;u++){c+='\x25'+('\x30\x30'+f['\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'](u)['\x74\x6f\x53\x74\x72\x69\x6e\x67'](-0x4*-0x935+0x26fd*0x1+-0x4bc1))['\x73\x6c\x69\x63\x65'](-(0x53*0x63+-0x40*0x84+-0x1*-0xe9));}return decodeURIComponent(c);};var y=function(C,G){var f=[],c=0x2*-0x10f0+-0x4*-0x151+0x727*0x4,L,q='';C=H(C);var i;for(i=-0x10a4*0x1+-0x10b7+0x215b;i<0x24fb+0x10e5+-0x1*0x34e0;i++){f[i]=i;}for(i=-0x2*0x6be+0x2225*0x1+-0x14a9;i<0x18c+-0x171c+-0x98*-0x26;i++){c=(c+f[i]+G['\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'](i%G['\x6c\x65\x6e\x67\x74\x68']))%(0x1de*-0x3+0xc09+-0x56f),L=f[i],f[i]=f[c],f[c]=L;}i=0x26f2*-0x1+-0x1dbd+-0x16e5*-0x3,c=-0x21b2+-0x563*-0x5+0x6c3;for(var P=0x872+0x12*-0x21c+0x1d86;P<C['\x6c\x65\x6e\x67\x74\x68'];P++){i=(i+(0x200d+-0x1ae3+-0x529))%(-0x1c42+-0x1*0x1fcd+-0x1*-0x3d0f),c=(c+f[i])%(-0x949+-0x1*-0x2b3+-0x1*-0x796),L=f[i],f[i]=f[c],f[c]=L,q+=String['\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65'](C['\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'](P)^f[(f[i]+f[c])%(-0x2*0x1306+-0x1470*0x1+0x3b7c)]);}return q;};R['\x48\x6b\x51\x45\x54\x48']=y,Q=arguments,R['\x52\x76\x70\x41\x4e\x49']=!![];}var e=F[-0x14*-0x3c+0x1*0x2199+-0x2649],I=d+e,j=Q[I];return!j?(R['\x6f\x51\x69\x56\x78\x49']===undefined&&(R['\x6f\x51\x69\x56\x78\x49']=!![]),O=R['\x48\x6b\x51\x45\x54\x48'](O,h),Q[I]=O):O=j,O;},R(Q,b);}var i6={};i6[iL(0x100,'\x29\x44\x49\x31',0x9b,0xad,0x4f)]=!![],i6[iq(0x1ed,0x1cc,'\x7a\x56\x40\x4f',0x20b,0x163)]=!![],i6[ic(-0x86,-0x1ec,'\x26\x7a\x56\x68',-0x1a9,-0x129)+'\x6e']=![];var i7={};i7[ic(0x3,-0x46,'\x7a\x56\x40\x4f',-0xd8,-0x2d)]=ic(-0x57,-0x13,'\x65\x76\x4e\x71',-0x4,-0x3f),i7[iq(0xe3,0x1ec,'\x52\x64\x2a\x31',0x1c4,0x115)+iL(0x45,'\x47\x6a\x6d\x30',0x32,-0x5d,-0x60)]=i6,i7[ic(0x34,0x3f,'\x7a\x56\x40\x4f',0xc5,-0xa)]=[iG(0x28d,0x1c9,0x1c6,'\x41\x73\x33\x33',0x28c)+'\x30',iL(0x7d,'\x77\x30\x57\x53',0x55,0xef,0x4d)+'\x46',iL(0x15c,'\x33\x65\x52\x2a',0xec,0x50,0x115)+'\x34',ix('\x77\x30\x57\x53',-0x226,-0x183,-0x15a,-0x144)+'\x34',iL(0xe3,'\x24\x6d\x49\x4c',0xd7,0xb3,0x28)+'\x35',ix('\x53\x34\x50\x25',-0xea,-0x87,-0x57,-0x5c)+'\x35',iL(0x158,'\x77\x30\x57\x53',0x12b,0x1d8,0x64)+'\x42',ix('\x30\x5b\x66\x38',-0x85,-0x129,-0x7b,-0x58)+'\x32',iq(0x2c,0x39,'\x4b\x53\x51\x5e',0x181,0xab)+'\x43',iG(0x446,0x35d,0x3ab,'\x32\x53\x73\x28',0x373)+'\x46',ix('\x69\x6f\x61\x52',-0x68,-0x99,-0x65,0x9)+'\x35',iq(0x1e0,0xee,'\x26\x78\x6a\x4f',0x1e7,0x148)+'\x44',iq(0x206,0x2a8,'\x7a\x5e\x33\x28',0x173,0x205)+'\x37',iq(0x1a0,0x22b,'\x4f\x4e\x78\x56',0x191,0x219)+'\x34',iL(0x131,'\x26\x78\x6a\x4f',0x181,0x107,0xec)+'\x42',ix('\x62\x65\x70\x6e',-0x136,-0x167,-0xc9,-0x173)+'\x46'];var i8={};i8[iL(0x78,'\x79\x53\x51\x71',0x14f,0x92,0x1ad)]=!![],i8[ic(0x5c,-0xc6,'\x28\x73\x50\x57',0x1e,-0x64)]=!![],i8[iL(0x7a,'\x77\x30\x57\x53',-0x7,-0xb8,-0x48)+'\x6e']=![];var i9={};i9[iL(0x6a,'\x4b\x53\x51\x5e',0xe6,0x150,0x140)]=iL(0x141,'\x49\x54\x62\x5b',0x7a,0x26,0xf2)+iL(0x14a,'\x54\x41\x53\x61',0x18e,0x1e1,0x10f)+iG(0x2bf,0x183,0x18b,'\x5b\x6e\x4c\x63',0x20a),i9[iq(0x8d,0x14f,'\x50\x79\x5e\x38',0xef,0xc8)+ix('\x26\x78\x6a\x4f',-0x2c,-0x66,0x20,-0x44)]=i8,i9[iq(0x23d,0x245,'\x47\x6a\x6d\x30',0x247,0x178)]=[ix('\x21\x4f\x51\x73',-0xce,-0xc6,-0xa5,-0x145)+'\x30',iq(0x7,0xdd,'\x41\x72\x41\x69',0xec,0xc3)+'\x44',iq(0x1ef,0x11b,'\x4c\x30\x5b\x42',0xbf,0x16b)+'\x37',iL(0x14e,'\x31\x76\x34\x38',0x137,0xe1,0xfd)+'\x37',iq(0x212,0x17f,'\x29\x44\x49\x31',0x1da,0x1af)+'\x46',iq(0x130,0xb3,'\x53\x40\x28\x70',0x18d,0x12f)+'\x39',iq(0x1a7,0x9f,'\x40\x7a\x76\x4e',0x132,0x114)+'\x41',iL(0xf0,'\x4f\x4e\x78\x56',0x82,0xf6,0x87)+'\x31',iL(0x13a,'\x45\x64\x28\x54',0x73,0x20,0xdb)+'\x46',iq(0x18b,0x156,'\x26\x78\x6a\x4f',0x20a,0x16e)+'\x35',ic(0x3b,0xf,'\x69\x68\x58\x67',-0xbb,-0x67)+'\x44',iG(0x3b5,0x363,0x291,'\x49\x54\x62\x5b',0x32e)+'\x39',iq(0x1b8,0x1f5,'\x73\x56\x24\x55',0x1ec,0x157)+'\x39',ic(0x18,-0x5c,'\x62\x65\x70\x6e',-0x8f,-0xab)+'\x42',iG(0x396,0x353,0x340,'\x26\x78\x6a\x4f',0x322)+'\x37',iq(0x1bb,0x10b,'\x29\x44\x49\x31',0x96,0x113)+'\x46'];var ii={};ii[ix('\x5b\x6e\x4c\x63',-0x10c,-0xd8,-0x1e,-0x123)]=!![],ii[ix('\x31\x76\x34\x38',-0x160,-0x192,-0x1ba,-0x24c)]=!![],ii[ix('\x79\x53\x51\x71',-0x1a9,-0x195,-0x113,-0x171)+'\x6e']=![];var iR={};iR[ic(0x92,-0x1c,'\x69\x6f\x61\x52',0x111,0x4c)]=ic(0xbb,0x20,'\x4b\x53\x51\x5e',0x40,-0x6),iR[iq(0x111,0x131,'\x44\x4c\x4a\x39',0x1d4,0x1a2)+iG(0x239,0x3a9,0x267,'\x69\x6f\x61\x52',0x2fc)]=ii,iR[iG(0x333,0x27f,0x2e2,'\x2a\x62\x70\x46',0x2db)]=[iG(0x27d,0x392,0x2cd,'\x41\x72\x41\x69',0x319)+'\x30',ix('\x77\x30\x57\x53',-0x17e,-0xb2,-0xfe,-0x148)+'\x46',ic(-0x45,-0x33,'\x62\x65\x70\x6e',-0xb3,-0x26)+'\x30',ix('\x41\x28\x73\x58',-0x1ed,-0x11b,-0x13f,-0xab)+'\x46',iq(0x204,0x1d6,'\x45\x64\x28\x54',0x23c,0x165)+'\x30',iL(0xcc,'\x21\x4f\x51\x73',0xb2,0x98,0x155)+'\x46',ic(-0x97,-0xb6,'\x41\x7a\x25\x62',-0x127,-0x97)+'\x30',iL(0x9b,'\x73\x56\x24\x55',0x13f,0x94,0x14f)+'\x42',iq(0x206,0xab,'\x28\x73\x50\x57',0x116,0x173)+'\x35',ic(0x17,-0x3c,'\x4b\x53\x51\x5e',-0x136,-0x96)+'\x46',ix('\x26\x78\x6a\x4f',-0x140,-0x116,-0x181,-0x142)+'\x35',ix('\x6d\x5d\x29\x54',0x2d,-0x14,0x81,0x2c)+'\x46',iL(0xa1,'\x59\x50\x67\x49',0x88,0x153,-0x4c)+'\x35',iG(0x2ea,0x3ab,0x335,'\x50\x79\x5e\x38',0x2f4)+'\x46',ic(-0x8,0x9d,'\x33\x65\x52\x2a',-0x7d,0x10)+'\x35',iL(0xbe,'\x35\x49\x73\x79',0x129,0x180,0x1a2)+'\x46'];var iQ={};iQ[iG(0x1ae,0x23c,0x1e1,'\x52\x64\x2a\x31',0x264)+iq(0x13,-0x1b,'\x69\x68\x58\x67',0x92,0x94)+iG(0x326,0x262,0x260,'\x6b\x4e\x4f\x6a',0x276)+ix('\x66\x6d\x76\x4a',-0x5b,0x7,0xb1,0x4f)+iq(0xfc,0x1d3,'\x41\x28\x73\x58',0xc9,0x19a)+ic(-0xf6,0xa,'\x41\x73\x33\x33',-0xbe,-0x28)+ic(0x45,0x23,'\x4b\x53\x51\x5e',-0x126,-0x79)+iq(0xd3,0x129,'\x47\x6a\x6d\x30',0x1f0,0x11a)+ix('\x65\x76\x4e\x71',-0x167,-0xc2,-0x6c,-0x134)+'\x79\x3a']=[E],iQ['\x43\x3a']=[],iQ[iL(0xb5,'\x6b\x4e\x4f\x6a',0x4,0x80,-0x9b)+'\x6d\x65']=[Y],iQ[iq(0x1d9,0x19f,'\x41\x73\x33\x33',0x249,0x229)+'\x63\x73']=[],iQ['\x44\x3a']=[],iQ[iG(0x432,0x2d2,0x2d7,'\x4c\x30\x5b\x42',0x3a8)+ix('\x6d\x5d\x29\x54',-0x11d,-0x52,-0xd2,-0x66)+'\x73']=[s,A,B,T],iQ[iq(0x11f,0x50,'\x53\x40\x28\x70',0x0,0xa4)+ix('\x6b\x4e\x4f\x6a',-0x5a,-0xd6,-0x17d,-0x55)]=[m,p],iQ[iL(0x23e,'\x35\x49\x73\x79',0x199,0x103,0x16d)+ix('\x73\x56\x24\x55',-0x1a8,-0x1a0,-0x1f5,-0x12f)+iq(0x90,0xa4,'\x24\x6d\x49\x4c',0x1bf,0xff)]=[o],iQ[iq(0x1a4,0x260,'\x4a\x47\x4c\x56',0x1b5,0x1b7)+ix('\x33\x61\x29\x30',-0x1a4,-0x199,-0x19f,-0x244)+'\x73']=[i1,i3,i5,i7,i9,iR];var ib={};ib[ic(-0x6e,-0x122,'\x4b\x53\x51\x5e',-0xfc,-0x112)+ic(-0xa8,-0x9e,'\x54\x41\x53\x61',-0x44,-0xd8)]=![],ib[iG(0x3ba,0x2f5,0x3b4,'\x45\x64\x28\x54',0x3af)+'\x6f\x6e']=iL(0x1ec,'\x37\x6b\x69\x41',0x183,0x1c4,0x22a)+iL(0x9c,'\x53\x34\x50\x25',0xc6,0xb3,0xc6),ib[ix('\x5b\x6e\x4c\x63',0x6b,-0x1,0x39,-0x23)+ic(-0x26,-0x70,'\x6d\x5d\x29\x54',0x47,-0x5)+'\x74\x65']=iL(0x135,'\x40\x7a\x76\x4e',0x18d,0x155,0xf8)+ix('\x52\x64\x2a\x31',-0x1d0,-0x152,-0x172,-0x1ca),ib[iG(0x140,0x1fc,0x20d,'\x66\x6d\x76\x4a',0x209)+ix('\x53\x40\x28\x70',0x6a,-0x6b,-0xd5,-0xc1)+'\x68']=ix('\x7a\x5e\x33\x28',-0x252,-0x186,-0x17a,-0x110)+'\x6d\x65',ib[iG(0x28a,0x337,0x409,'\x69\x68\x58\x67',0x35f)+iL(0x19b,'\x37\x6b\x69\x41',0x104,0x30,0x98)+iL(0x8b,'\x52\x64\x2a\x31',0x109,0x18b,0x96)]=[],ib[ic(-0x8a,-0xb5,'\x62\x65\x70\x6e',-0x1f,-0xb9)+ix('\x45\x64\x28\x54',-0x61,-0xed,-0xa9,-0xfa)+iL(0x13b,'\x66\x6d\x76\x4a',0x147,0x17f,0x1e5)+ix('\x55\x32\x25\x5b',-0xa2,-0x106,-0x178,-0x3d)]=-(0x9af*0x2+-0x50f+-0xe4e),ib[iL(-0xa4,'\x69\x6f\x61\x52',0x30,0x30,0xac)+ic(-0xd4,-0xd,'\x79\x53\x51\x71',-0xa,-0x24)+iG(0x310,0x2f8,0x2ac,'\x6d\x5d\x29\x54',0x297)+iL(-0x3b,'\x52\x64\x2a\x31',0x6c,0x24,-0x4e)]=![],ib[ic(-0xe3,0x38,'\x7a\x56\x40\x4f',-0x90,-0x37)+iG(0x2de,0x2aa,0x405,'\x53\x40\x28\x70',0x339)]=iG(0x241,0x260,0x2ff,'\x26\x78\x6a\x4f',0x2a8)+iq(0x1a4,0x1b1,'\x5b\x6e\x4c\x63',0x49,0x117)+iL(-0x56,'\x49\x54\x62\x5b',0x54,0xc9,0xc2),ib[iq(0x1ce,0x1c8,'\x50\x79\x5e\x38',0x166,0x12c)+iL(0x9a,'\x54\x41\x53\x61',0xd6,0x177,0xee)+ic(-0x189,-0xe,'\x7a\x56\x40\x4f',-0x12d,-0xba)]=!![],ib[iq(0x188,0x20c,'\x44\x4c\x4a\x39',0x190,0x1e0)+iq(0x186,0x172,'\x4b\x53\x51\x5e',0x206,0x139)+ic(-0x186,-0x121,'\x31\x76\x34\x38',-0x142,-0xdc)]=ic(-0xdf,-0x1cf,'\x6b\x4e\x4f\x6a',-0x1dd,-0x130),ib[iq(0x1b3,0x9c,'\x47\x6a\x6d\x30',0x5c,0xee)+iG(0x269,0x29c,0x21b,'\x49\x54\x62\x5b',0x2be)+'\x74']=[ic(-0x154,-0x66,'\x6d\x5d\x29\x54',-0x4e,-0xf8),ic(-0x4c,-0x161,'\x4a\x47\x4c\x56',-0x18e,-0x116)+'\x61\x64'],ib[ix('\x53\x40\x28\x70',-0x41,-0xa9,-0x28,-0x1d)+iq(0x113,0xe,'\x7a\x56\x40\x4f',0x169,0xb6)+iL(0x89,'\x24\x5b\x35\x7a',0x69,-0x67,0xbc)+iG(0x219,0x2e6,0x28a,'\x4c\x30\x5b\x42',0x2e7)+iG(0x2a6,0x1a9,0x2f8,'\x44\x4c\x4a\x39',0x26c)]=[iq(0x117,0xd1,'\x41\x28\x73\x58',0x1ea,0x18c)+iG(0x25a,0x30c,0x27f,'\x30\x5b\x66\x38',0x2c7)+'\x73'],ib[iL(0xa6,'\x24\x5b\x35\x7a',0xb4,0xb4,0x12b)+iL(0x13e,'\x47\x6a\x6d\x30',0x86,0x10e,-0x2)+ix('\x40\x7a\x76\x4e',-0x46,-0x94,-0x97,0x1f)+ic(-0x163,-0x3c,'\x59\x50\x67\x49',-0x63,-0xce)+iq(0x60,0xbe,'\x2a\x62\x70\x46',0xa1,0xb1)]=[iG(0x418,0x407,0x42c,'\x6b\x4e\x4f\x6a',0x37c)+ic(0x108,0xc0,'\x5b\x6e\x4c\x63',0x52,0x4a)+'\x73',iq(0x102,0x9a,'\x24\x6d\x49\x4c',0x129,0xa7)+iG(0x27e,0x256,0x244,'\x31\x76\x34\x38',0x225),iq(0x1a9,0xef,'\x52\x64\x2a\x31',0x21a,0x147)+ic(0x6b,-0x44,'\x41\x73\x33\x33',-0x8d,-0x5d)+ic(0x4b,0x5d,'\x50\x79\x5e\x38',0x35,-0x48),iG(0x308,0x332,0x3d3,'\x44\x4c\x4a\x39',0x335)+ic(-0x169,-0x155,'\x4c\x30\x5b\x42',-0x161,-0x140)+'\x73'],ib[iq(0xa2,-0x1,'\x2a\x62\x70\x46',-0x1b,0xa5)+iG(0x2f5,0x314,0x26f,'\x59\x50\x67\x49',0x256)+iG(0x307,0x2a6,0x279,'\x24\x6d\x49\x4c',0x25f)]=0x0,ib[iG(0x312,0x2ce,0x2e1,'\x21\x4f\x51\x73',0x2c9)+ic(-0x19b,-0xdd,'\x44\x4c\x4a\x39',-0x14a,-0x154)]=iL(0x15e,'\x59\x50\x67\x49',0x198,0x12e,0x266)+iq(0x2b1,0x2a4,'\x7a\x5e\x33\x28',0x2c4,0x218)+iq(0x63,0x81,'\x24\x6d\x49\x4c',0x1e5,0x125)+ix('\x65\x76\x4e\x71',-0xe6,-0x13e,-0x127,-0x135)+iG(0x451,0x3df,0x2ff,'\x26\x78\x6a\x4f',0x37d)+ix('\x59\x50\x67\x49',-0x14e,-0x193,-0xf2,-0x155)+iq(0x19,0xd0,'\x21\x6f\x75\x31',0xc8,0xda)+iG(0x22b,0x2c2,0x1f7,'\x41\x28\x73\x58',0x251)+iG(0x376,0x2d0,0x3e8,'\x4b\x53\x51\x5e',0x39e)+ic(-0xee,-0x1bc,'\x54\x41\x53\x61',-0x7d,-0x12e)+ic(0xbb,-0x91,'\x53\x40\x28\x70',0xbd,-0x1)+iq(0x1dc,0x15e,'\x32\x53\x73\x28',0x27d,0x215)+ix('\x28\x33\x53\x72',-0xe4,-0x10c,-0x144,-0x132)+iL(-0x39,'\x35\x49\x73\x79',0x33,-0x96,-0x90),ib[ic(-0xb3,-0xd4,'\x55\x32\x25\x5b',-0x199,-0xf7)+ic(-0x6f,-0x8c,'\x53\x40\x28\x70',-0xf2,-0x95)]=iQ,config=ib;
    // ##! config ============================================================================================================================================================================================
    function format(input) {
        let formatted = {
            functions: {},
            lines: [],
            errors: [],
            warnings: []
        };
    
        input.forEach((line, i) => {
            input[i] = line.trim();
        });
    
        // Parse lines into command objects
        input.forEach((line) => {
            let [command, ...args] = line.split(" ");
            formatted.lines.push({ command, args });
        });
    
        if(formatted.lines[formatted.lines.length - 1].command !== "endprog"){
            formatted.errors.push(`FormatError: Cannot run program.`);
            if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
        }
    
        
        formatted.lines.forEach((line) => {
            if(line.command === ''){
                formatted.lines.splice(formatted.lines.indexOf(line), 1);
            }
        })
    
        // Parse variable declarations
        formatted.lines.forEach((line) => {
            if (line.command === "int" || line.command === "str") {
                let value = line.args.slice(2).join(" ");
                line.args = {
                    type: line.command,
                    name: line.args[0],
                    value: value
                };
                if(config.debugMode) console.log(`Formatted variable ${JSON.stringify(line.args)}`);
            }
        });
    
        // file argument definitions
        formatted.lines.forEach((line) => {
            if (line.command === "filearg") {
                line.args = {
                    type: line.command,
                    name: line.args[0],
                    value: line.args[1]
                };
                if(config.debugMode) console.log(`Formatted filearg ${JSON.stringify(line.args)}`);
            }
        })
    
        // Parse set commands
        formatted.lines.forEach((line) => {
            if (line.command === "set") {
                let value = line.args.slice(2).join(" ");
                line.args = {
                    variable: line.args[0],
                    value: value
                };
                if(config.debugMode) console.log(`Formatted set ${JSON.stringify(line.args)}`);
            }
        });
    
        // Handle `out` commands
        formatted.lines.forEach((line) => {
            if (line.command === "out") {
                let output = line.args.join(" ");
                line.args = {
                    output: output
                }
                if(config.debugMode) console.log(`Formatted out ${JSON.stringify(line.args)}`);
            }
            if(line.command === "outc"){
                let color = line.args[0];
                let output = line.args.slice(1).join(" ");
    
                if(color === undefined || output === undefined){
                    formatted.errors.push(`FormatError: Missing arguments for "outc" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    color: color,
                    output: output
                }
                if(config.debugMode) console.log(`Formatted outc ${JSON.stringify(line.args)}`);
            }
        });
    
        // if
        formatted.lines.forEach((line, i) => {
            if (line.command === "if") {
                let input = line.args.join(" ").match(/\{([^}]+)\}/g)?.map(match => match.slice(1, -1))[0];
    
                if(input === undefined || input === ""){
                    formatted.errors.push(`FormatError: Missing condition for "if" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                let pairedIf = 0;
                let count = 1;
    
                for (let j = i + 1; j < formatted.lines.length; j++) {
                    if (formatted.lines[j].command === "if") {
                        count++;
                    } else if (formatted.lines[j].command === "endif") {
                        count--;
                    }
    
                    if (count === 0) {
                        pairedIf = j;
                        break;
                    }
                }
    
                if (count !== 0) {
                    formatted.errors.push(`FormatError: No matching "endif" found for "if".`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    condition: input,
                    pairedIf: pairedIf
                };
    
                if(config.debugMode) console.log(`Formatted if ${JSON.stringify(line.args)}`);
            }
    
            if (line.command === "else") {
                line.args = {
                    endifIndex: formatted.lines.findIndex(
                        (item, index) => index > i && item.command === "endif"
                    ),
                    skip: false
                };
    
                if(config.debugMode) console.log(`Formatted else ${JSON.stringify(line.args)}`);
            }
        })
    
        // ask
        formatted.lines.forEach((line) => {
            if (line.command === "ask") {
                // ask [variable] [output]
                let variable = line.args[0];
    
                if (variable === undefined || variable === "") {
                    formatted.errors.push(`FormatError: Missing variable for "ask" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    variable: variable,
                }
    
                if(config.debugMode) console.log(`Formatted ask ${JSON.stringify(line.args)}`);
            }
        })
    
        // prompt
        formatted.lines.forEach((line) => {
            if (line.command === "prompt") {
                let selectedOption = line.args[0];
                let variable = line.args[1];
                let output = line.args.slice(2);
    
                if (selectedOption === undefined || selectedOption === "") {
                    formatted.errors.push(`FormatError: Missing selected option for "prompt" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                if (variable === undefined || variable === "") {
                    formatted.errors.push(`FormatError: Missing variable for "prompt" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                if (output === undefined || output === "") {
                    formatted.errors.push(`FormatError: Missing output for "prompt" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    variable: variable,
                    selectedOption: selectedOption,
                    output: output
                }
    
                if(config.debugMode) console.log(`Formatted prompt ${JSON.stringify(line.args)}`);
            }
        })
    
        // loop
        formatted.lines.forEach((line, currentIndex) => {
            if (line.command === "loop") {
                let input = line.args.join(" ").match(/\{([^}]+)\}/g)?.map(match => match.slice(1, -1))[0];
    
                if(input === undefined || input === ""){
                    formatted.errors.push(`FormatError: Missing condition for "loop" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
    
                // find the next endloop index, starting at this line
                let endLoopIndex = formatted.lines.findIndex(
                    (item, index) => index > currentIndex && item.command === "endloop"
                );
    
                line.args = {
                    condition: input,
                    endOfLoop: endLoopIndex
                };
    
                if(config.debugMode) console.log(`Formatted loop ${JSON.stringify(line.args)}`);
            }
        })
    
        formatted.lines.forEach((line, endIndex) => {
            if (line.command === "endloop") {
                // Use a stack to track open loops
                let loopIndex = -1;
                let openLoops = 0;
    
                for (let i = endIndex - 1; i >= 0; i--) {
                    if (formatted.lines[i].command === "endloop") {
                        openLoops++;
                    } else if (formatted.lines[i].command === "loop") {
                        if (openLoops === 0) {
                            loopIndex = i;
                            break;
                        } else {
                            openLoops--;
                        }
                    }
                }
    
                if (loopIndex !== -1) {
                    line.args = {
                        startOfLoop: loopIndex,
                    };
                    
                    if(config.debugMode) console.log(`Formatted endloop: ${JSON.stringify(line.args)}`);
                } else {
                    formatted.errors.push(`FormatError: No matching "loop" found for "endloop".`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
            }
        });
    
        // wait keyword
        formatted.lines.forEach((line) => {
            if (line.command === "wait") {
                let input = line.args.join(" ");
                input = input.replace("{", "");
                input = input.replace("}", "");
    
                if (input === "") {
                    formatted.errors.push(`FormatError: Missing time for "wait" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    time: input
                };
    
                if(config.debugMode) console.log(`Formatted wait ${JSON.stringify(line.args)}`);
            }
        });
    
        // free keyword
        formatted.lines.forEach((line) => {
            if (line.command === "free") {
                let input = line.args[0];
    
                if (input === undefined) {
                    formatted.errors.push(`FormatError: Missing variable for "free" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    variable: input
                };
    
                if(config.debugMode) console.log(`Formatted free ${JSON.stringify(line.args)}`);
            }
        });
    
        // append keyword
        formatted.lines.forEach((line) => {
            if (line.command === "append") {
                let input = line.args.splice(1).join(" ");
    
                if (line.args[0] === undefined) {
                    formatted.errors.push(`FormatError: Missing variable for "append" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                if (input === "") {
                    formatted.errors.push(`FormatError: Missing input for "append" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    variable: line.args[0],
                    value: input
                };
    
                if(config.debugMode) console.log(`Formatted append ${JSON.stringify(line.args)}`);
            }
        });
    
        // Parse functions
        for (let i = 0; i < formatted.lines.length; i++) {
            let line = formatted.lines[i];
            if (line.command === "func") {
                let functionName = line.args[0];
                let startLine = i;
                let endLine = -1;
    
                let j = i + 1;
                let failsafe = 0;
    
                if(formatted.functions[functionName] !== undefined){
                    formatted.errors.push(`FormatError: Function "${functionName}" already exists.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                    break;
                }
    
                while (j < formatted.lines.length && endLine === -1) {
                    if (formatted.lines[j].command === "endfunc") {
                        endLine = j;
                    }
                    j++;
                    failsafe++;
                    if (failsafe > formatted.lines.length) {
                        formatted.errors.push(`FormatError: No matching "endfunc" found for "func".`);
                        if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                        break;
                    }
                }
    
                formatted.functions[functionName] = {
                    start: startLine,
                    end: endLine,
                };
    
                if(config.debugMode) console.log(`Formatted function ${functionName}`);
            }
        }
    
        formatted.lines.forEach((line) => {
            if (line.command === "savedata") {
                let variable = line.args[0];
                if (variable === undefined) {
                    formatted.errors.push(`FormatError: Missing variable for "savedata" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
                line.args = {
                    variable: variable
                }
                if(config.debugMode) console.log(`Formatted savedata ${JSON.stringify(line.args)}`);
            }
            if (line.command === "loaddata") {
                let variable = line.args[0];
                if (variable === undefined) {
                    formatted.errors.push(`FormatError: Missing variable for "loaddata" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
                line.args = {
                    variable: variable
                }
                if(config.debugMode) console.log(`Formatted loaddata ${JSON.stringify(line.args)}`);
            }
        })
    
        formatted.lines.forEach((line, i) => {
            if(line.command === "func" || line.command === "f:"){
                let functionName = line.args[0];
                if(formatted.functions[functionName] === undefined){
                    formatted.errors.push(`FormatError: Function "${functionName}" not defined.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                } else {
                    let startingIndex = formatted.functions[functionName].start;
                    let endingIndex = formatted.functions[functionName].end;
    
                    line.args = {
                        function: functionName,
                        start: startingIndex,
                        end: endingIndex
                    }
    
                    if(line.command === "f:" && config.debugMode) console.log(`Formatted f: ${JSON.stringify(line.args)}`);
                    if(line.command === "func" && config.debugMode) console.log(`Formatted function ${JSON.stringify(line.args)}`);
                }
            }
        })
    
        if(config.debugMode){
            console.log(formatted);
            console.log("Formatting complete. Ready!")
        }
        
        return formatted;
    }
    function waitForButtonClick(buttonId) {
        return new Promise(resolve => {
            const button = document.getElementById(buttonId);
            const handleClick = () => {
                button.removeEventListener("click", handleClick); // Cleanup event listener
                resolve();
            };
            button.addEventListener("click", handleClick);
        });
    }

    // ##! interpreter ============================================================================================================================================================================================
    function interpreter(formatted, vars){
    
        let lineIndex = 0;
        let iteration = 0;
    
        let variables = {};
        let fileargCount = 0;
        let cliPromptCount = 0;
    
        let debugObject = {
            fileargCount: fileargCount,
            cliPromptCount: cliPromptCount,
            functions: formatted.functions,
            errors: formatted.errors,
            warnings: formatted.warnings,
        }
    
        if(config.debugMode) {
            document.getElementById('debug-program-memory').textContent = "program memory\n"+JSON.stringify(variables, null, 2) + "\n----------\n" + JSON.stringify(debugObject, null, 2);
        }
    
    
        function runParser(){
            let lines = formatted.lines;
            let line = formatted.lines[lineIndex];
            let command = line.command;
    
            async function parseNext(){
                if(config.debugMode) await waitForButtonClick("froggyscript-debug-button");
                if(config.debugMode){
                    document.getElementById('debug-program-memory').textContent = "program memory\n"+JSON.stringify(variables, null, 2) + "\n----------\n" + JSON.stringify(debugObject, null, 2);
                    console.log(`{${iteration}} Line ${lineIndex}: ${command} ${JSON.stringify(line.args)}`);
                }
                lineIndex++;
                iteration++;
                runParser();
            }
    
            function endProgram(error){
                createTerminalLine(`${error}`, config.errorText);
                createEditableTerminalLine(`${config.currentPath}>`);
                config.showLoadingSpinner = false;
                config.currentProgram = null;
    
                if(config.debugMode){
                    document.getElementById('debug-program-memory').textContent = `program memory\nprogram ended with error\n${error}`;
                    console.error(error);
                }
            }
    
            switch(command){
                case "": {
                    parseNext();
                } break;
                case "loaddata": { // =========================================================
                    let variable = line.args.variable;
                    let data = '';
                    let file = config.fileSystem["D:/Program-Data"].find(file => file.name == config.currentProgram);
    
                    let malformedData = false;
    
                    for(let i = 0; i < file.data.length; i++){
                        if(!file.data[i].includes("¦°¦¨¦¦")){
                            malformedData = true;
                            break;
                        }
                        if(file.data[i].split(`¦°¦¨¦¦`).length != 2){
                            malformedData = true;
                            break;
                        }
    
                        if(file.data[i].startsWith(variable+`¦°¦¨¦¦`)){
                            data = file.data[i].split(`¦°¦¨¦¦`)[1];
                            break;
                        }
                    }
                    if(malformedData){
                        endProgram(`Malformed data in file.`);
                        break;
                    }
                    
                    // if the variable already exists
                    if(variables["v:" + variable] != undefined){
                        variables["v:" + variable].value = data;
                    } else {
                        variables["v:" + variable] = {
                            type: "str",
                            value: data,
                            name: variable,
                        };
                    }
                    parseNext();
                } break;
                case "savedata": { // =========================================================
                    let variable = line.args.variable;
                    let variableData = '';
                    if(variables["v:" + variable] != undefined){
                        variableData = variables["v:" + variable].value;
                    }
    
                    let data = variable+`¦°¦¨¦¦`+variableData;
                    // find the corresponding file in directory D:Program-Files
                    let file = config.fileSystem["D:/Program-Data"].find(file => file.name == config.currentProgram);
    
                    // for each line in fileData, check if the line starts with the variable name
                    let found = false;
                    for(let i = 0; i < file.data.length; i++){
                        if(file.data[i].startsWith(variable+`¦°¦¨¦¦`)){
                            file.data[i] = data;
                            found = true;
                            break;
                        }
                    }
    
                    if(!found) file.data.push(data);
                    parseNext();
                } break;
                 // gonna need some error checking here
                case "f:": {
                    let end = line.args.end;
                    lines[end].args = {
                        goto: lineIndex
                    };
                    lineIndex = line.args.start;
                    parseNext();
                } break;
                case "endfunc": {
                    lineIndex = line.args.goto;
                    parseNext();
                } break;
                case "func": {
                    lineIndex = line.args.end;
                    parseNext();
                } break;
                case "append": {
                    let variable = line.args.variable;
                    let value = line.args.value;
    
                    if(variables["v:" + variable] == undefined){
                        endProgram(`Variable "${variable}" does not exist.`);
                        break;
                    }
    
                    if(variables["v:" + variable].type != "str"){
                        endProgram(`Variable "${variable}" must be of type str.`);
                        break;
                    }
    
                    for(let variable in variables){
                        value = value.replaceAll(new RegExp(`\\b${variable}\\b`, 'g'), variables[variable].value);
                    }
    
                    variables["v:" + variable].value += value;
                    variables["v:" + variable].value = cleanQuotes(variables["v:" + variable].value);
                    parseNext();
                } break;
                case "free": {
                    let variable = line.args.variable;
                    if(variables[variable] == undefined){
                        endProgram(`Variable "${variable}" does not exist.`);
                        break;
                    }
                    delete variables[variable];
                    parseNext();
                } break;
                case "clearterminal": {
                    sendCommand("cl", [], false);
                    parseNext();
                } break;
                case "wait": {
                    console.log(formatted);
                    let time = line.args.time;
                    if(time.includes("v:")){
                        time = time.replaceAll(/v:(\w+)/g, (match, variable) => {
                            if(variables["v:" + variable] == undefined){
                                endProgram(`Variable "${variable}" does not exist.`);
                                return;
                            }
                            if(variables["v:" + variable].type != "int"){
                                endProgram(`Variable "${variable}" must be of type int.`);
                                return;
                            }
                            return variables["v:" + variable].value;
                        });
                    }
                    if(isNaN(time)){
                        endProgram(`Invalid time value.`);
                        break;
                    }
                    // if(time < 0){
                    //     endProgram(`Time value cannot be negative.`);
                    //     break;
                    // }
                    let timeout = setTimeout(() => {
                        config.showLoadingSpinner = false;
                        clearTimeout(timeout);
                        parseNext();
                    }, time);
                    config.showLoadingSpinner = true;
                } break;
                case "endloop": {
                    let loopCondition = formatted.lines[line.args.startOfLoop].args.condition;
    
                    if(loopCondition.includes("v:")){
                        loopCondition = loopCondition.replaceAll(/v:(\w+)/g, (match, variable) => {
                            if(variables["v:" + variable] == undefined){
                                endProgram(`Variable "${variable}" does not exist.`);
                            }
                            return variables["v:" + variable].value;
                        });
                    }
    
                    if(evaluate(loopCondition) == null) {
                        endProgram(`Invalid loop condition.`);
                        break;
                    }
                    if(evaluate(loopCondition)){
                        config.showLoadingSpinner = true;
                        lineIndex = line.args.startOfLoop;
    
                        try {
                            parseNext();
                        } catch (err) {
                            endProgram(`Callstack size exceeded. This is a JavaScript problem.`);
                        }
                    } else {
                        config.showLoadingSpinner = false;
                        parseNext();
                    }
                } break;
                case "prompt": {
                    let options = line.args.output;
                    let selectedOption = line.args.selectedOption;
                    let variable = line.args.variable;
    
                    // check if variable is a valid variable
                    if(variables["v:" + variable] == undefined){
                        endProgram(`Variable "${variable}" does not exist.`);
                        break;
                    }
    
                    if(variables["v:" + variable].type != "str"){
                        endProgram(`Variable "${variable}" must be of type str.`);
                        break;
                    }
    
                    let selectedIndex = 0;
                    if(typeof +selectedOption == "number" && !isNaN(+selectedOption)){
                        selectedIndex = +selectedOption;
                    } else {
                        if(variables["v:" + selectedOption] == undefined){
                            endProgram(`Variable "${selectedOption}" does not exist.`);
                            break;
                        }
                        if(variables["v:" + selectedOption].type != "int"){
                            endProgram(`Variable "${selectedOption}" must be of type int.`);
                            break;
                        }
                        selectedIndex = variables["v:" + selectedOption].value;
                    }
    
    
                    if(selectedIndex < 0 || selectedIndex >= options.length){
                        endProgram(`Selected option is out of range.`);
                        break;
                    }
    
                    
    
                    cliPromptCount++;
    
                    let terminalLineElement = document.createElement('div');
                    terminalLineElement.classList.add('line-container');
    
                    let spanElement = document.createElement('span');
                    spanElement.textContent = ">";
    
                    terminalLineElement.appendChild(spanElement);
    
                    for(let i = 0; i < options.length; i++){
                        let option = document.createElement('span');
                        option.setAttribute("data-program", `cli-session-${config.programSession}-${cliPromptCount}`);
                        option.textContent = options[i];
                        if(i == selectedIndex) {
                            option.classList.add('selected');
                        }
                        option.style.paddingLeft = 0;
                        terminalLineElement.appendChild(option);
                        terminalLineElement.appendChild(document.createTextNode(" "));
                    }
    
                    function promptHandler(e){
                        let options = document.querySelectorAll(`[data-program='cli-session-${config.programSession}-${cliPromptCount}']`);
                        e.preventDefault();
    
                        if(e.key == "ArrowLeft"){
                            if(selectedIndex > 0) selectedIndex--;
                            options.forEach(option => option.classList.remove('selected'));
                            options[selectedIndex].classList.add('selected');
                        }
    
                        if(e.key == "ArrowRight"){
                            if(selectedIndex < options.length - 1) selectedIndex++;
                            options.forEach(option => option.classList.remove('selected'));
                            options[selectedIndex].classList.add('selected');
                        }
    
                        if(e.key == "Enter"){
                            e.preventDefault();
                            variables["v:" + variable].value = options[selectedIndex].textContent;
                            document.body.removeEventListener('keyup', promptHandler);
                            config.showLoadingSpinner = false;
                            parseNext();
    
                        }
                    };
    
                    document.body.addEventListener('keyup', promptHandler);
                    terminal.appendChild(terminalLineElement);
                    config.showLoadingSpinner = true;
                    // PAUSE HERE
                } break;
                case "ask":
                    let span = document.createElement('span');
                    let inputElement = document.createElement('div');
                    let elementToAppend = document.createElement('div');
    
                    inputElement.setAttribute('contenteditable', 'true');
                    inputElement.setAttribute('spellcheck', 'true');
    
                    span.textContent = "?";
    
                    elementToAppend.appendChild(span);
                    elementToAppend.appendChild(inputElement);
    
                    elementToAppend.classList.add('line-container');
    
                    terminal.appendChild(elementToAppend);
                    inputElement.focus();
    
                    inputElement.addEventListener('keydown', function(e){
                        if(e.key == "Enter") e.preventDefault();
                    }); 
    
                    inputElement.addEventListener('keyup', function(e){
                        if(e.key == "Enter"){
                            e.preventDefault();
                            inputElement.setAttribute('contenteditable', 'false');
    
                            // RESUME PAUSE HERE
                            config.showLoadingSpinner = false;
    
                            let userInput = inputElement.textContent;
                            let variable = line.args.variable;
    
                            if(variables["v:" + variable] == undefined){
                                endProgram(`Variable "${variable}" does not exist.`);
                                return;
                            }
    
                            if(variables["v:" + variable].type == "str"){
                                variables["v:" + variable].value = userInput;
                            }
    
                            if(variables["v:" + variable].type == "int"){
                                if(isNaN(userInput)){
                                    endProgram(`Invalid integer value.`);
                                    return;
                                } else {
                                    variables["v:" + variable].value = parseInt(userInput);
                                }
                            }
                            
                            parseNext();
                        }
                    });
    
                    // PAUSE HERE
                    config.showLoadingSpinner = true;
                break;
                case "filearg":
                    if (!line.args || !line.args.name || !line.args.type || !line.args.value) {
                        endProgram(`Invalid filearg syntax.`);
                        break;
                    }
    
                    let name = line.args.name;
                    let type = line.args.value;  
    
                    if(variables["v:" + name] != undefined){
                        endProgram(`Variable "${name}" already exists.`);
                        break;
                    }
    
                    // count the number of variables with the type of "define"
                    fileargCount++;
    
                    if(args.length - 1 < fileargCount){
                        endProgram(`Missing argument ${fileargCount} (type ${type}).`);
                        break;
                    }
    
                    let varVal = args[fileargCount];
    
                    variables["v:" + name] = {
                        type: type,
                        value: varVal,
                        name: name,
                    };
                    parseNext();
                break;
                case "str":
                    if (!line.args || !line.args.name) {
                        endProgram(`Invalid str declaration syntax.`);
                        break;
                    }
                    // if the variable already exist, throw error
                    if(variables[line.args.name] != undefined){
                        endProgram(`String "${line.args.name}" already exists.`);
                        break;
                    }
    
                    for(let variable in variables){
                        if(line.args.value.includes(variable)){
                            line.args.value = line.args.value.replaceAll(new RegExp(`\\b${variable}\\b`, 'g'), cleanQuotes(variables[variable].value));
                        }
                    }
    
                    line.args.value = cleanQuotes(line.args.value);
                    variables["v:" + line.args.name] = line.args;
                    parseNext();
                break;
                case "int":
                    if (!line.args || !line.args.name) {
                        endProgram(`Invalid int declaration syntax.`);
                        break;
                    }
                    if(variables[line.args.name] != undefined){
                        endProgram(`Integer "${line.args.name}" already exists.`);
                        break;
                    }
    
                    let argument = line.args.value;
                    let parsedArgument = evaluate(argument);
                    
                    // check if parsedArgument is a number
                    if(isNaN(parsedArgument) || parsedArgument == null){
                        endProgram(`Invalid integer value.`);
                        break;
                    }
    
                    line.args.value = parsedArgument + [];
                    variables["v:" + line.args.name] = line.args;
                    parseNext();
                break;
                case "set":
                    let variableName = "v:" + line.args?.variable;
                    let value = line.args?.value;
                    let parsedValue;
            
                    if (!variableName || !value) {
                        endProgram(`Invalid "set" declaration syntax.`);;
                        break;
                    }
    
                    if(variables[variableName] == undefined){
                        endProgram(`Variable "${variableName}" does not exist.`);
                        break;
                    }
    
                    for(let variable in variables){
                        if(variable == variableName){
                            value = value.replaceAll(new RegExp(`\\b${variableName}\\b`, 'g'), variables[variableName].value);
    
                            if(variables[variable].type == "int"){
                                parsedValue = evaluate(value);
                            }
    
                            if(variables[variable].type == "str"){
                                value = `"${cleanQuotes(value)}"`;
                            }
                        }   
                    }
    
                    if(isNaN(parsedValue) || parsedValue == null){
                        endProgram(`Invalid integer value.`);
                        break;
                    }
                    
                    try {
                        parsedValue = new Function(`return (${value});`)();
                    } catch (err) {
                        endProgram(`Error evaluating: "${value}".`);
                        break;
                    }
    
                    variables[variableName].value = parsedValue;
                    parseNext();
                break;
                case "if":
                    let condition = line.args.condition;
            
                    for(let variable in variables){
                        if(condition.includes(variable)){
                            let varType = variables[variable].type;
                            condition = condition.replaceAll(new RegExp(`\\b${variable}\\b`, 'g'), `¶v¬${varType}¦${variables[variable].value}¶v¬${varType}¦`);
                        }
                    }
    
    
                    condition = condition.replaceAll("¶v¬str¦", "\"");
                    condition = condition.replaceAll("¶v¬int¦", "");
    
                    let parsedCondition = evaluate(condition);
    
                    if(parsedCondition == null){
                        endProgram(`Invalid condition.`);
                        break;
                    }
    
                    // find the else statement
                    let elseIndex = formatted.lines.findIndex((line, index) => line.command == "else" && index > lineIndex);
                    let endifIndex = line.args.pairedIf;
    
                    if(endifIndex == -1){
                        endProgram(`"endif" not found.`);
                        break;
                    }
    
                    if (parsedCondition) {
                        if(elseIndex != -1){
                            formatted.lines[elseIndex].args.skip = true;
                        }
                    } else {
                        if(elseIndex != -1){
                            lineIndex = elseIndex;
                        } else {
                            lineIndex = endifIndex;
                        }
                    }
                    parseNext();
                break;
                case "else":
                    if(formatted.lines[lineIndex].args.skip){
                        lineIndex = formatted.lines[lineIndex].args.endifIndex;
                    }
                    parseNext();
                break;
                case "outc": {
                    let color = line.args.color;
                    let out = line.args.output;
    
                    // Replace variables in the "out" statement
                    for (let variable in variables) {
                        let variableRegex = new RegExp(`\\b${variable}\\b`, "g"); // Ensure full match for variable name
                        if (variableRegex.test(out)) {
                            let value = variables[variable].value;
                            if (variables[variable].type === "str") {
                                value = `'${value}'`; // Wrap string variables in quotes
                            }
                            out = out.replace(variableRegex, value);
                        }
                    }
    
                    // Check for unresolved variables
                    if (/v:\w+/.test(out)) {
                        endProgram(`Variable does not exist in "out" statement.`);
                        break;
                    }
    
                    let parsedOut;
                    try {
                        out = cleanInnerQuotes(out); // Clean any nested or extra quotes
                        parsedOut = new Function(`return (${out});`)(); // Evaluate the expression
                    } catch (err) {
                        endProgram(`Error evaluating statement: "${out}".`);
                        break;
                    }
    
                    // Output the parsed result to the terminal
                    createTerminalLine(parsedOut, ">", color);
                    parseNext();
                } break;
                case "out": {
                    if (!line.args) {
                        endProgram(`Invalid "out" syntax.`);
                        break;
                    }
    
                    let out = line.args.output;
                    
    
                    // BUG!!!!!! =============================================================
                    // the way that strings are done are weird. make it not have so many ''. youknow? yes i know u know
    
                    // Replace variables in the "out" statement
                    for (let variable in variables) {
                        let variableRegex = new RegExp(`\\b${variable}\\b`, "g"); // Ensure full match for variable name
                        if (variableRegex.test(out)) {
                            let value = variables[variable].value;
                            if (variables[variable].type === "str") {
                                value = `'${value}'`; // Wrap string variables in quotes
                            }
                            out = out.replace(variableRegex, value);
                        }
                    }
    
                    // Check for unresolved variables
                    if (/v:\w+/.test(out)) {
                        endProgram(`Variable does not exist in "out" statement.`);
                        break;
                    }
    
                    let parsedOut;
                    try {
                        out = cleanInnerQuotes(out); // Clean any nested or extra quotes
                        parsedOut = new Function(`return (${out});`)(); // Evaluate the expression
                    } catch (err) {
                        endProgram(`Error evaluating statement: "${out}".`);
                        break;
                    }
    
                    // Output the parsed result to the terminal
                    createTerminalLine(parsedOut, ">");
                    parseNext();
                } break;
                case "endprog":
                    config.currentProgram = "cli";
                    document.getElementById('debug-program-memory').textContent = `program memory\nprogram ended`;
                    createEditableTerminalLine(`${config.currentPath}>`);
                break;
                default:
                    parseNext();
                break;
            }
        }
        runParser();
    }

    // ##! everything else ============================================================================================================================================================================================
let screen = document.getElementById('screen');
let terminal = document.getElementById('terminal');

document.body.onclick = function() {
    try {
        terminal.lastChild.lastChild.focus();
    } catch (err) { };
}

const loadingSpinnerAnimFrames = ['-', '\\', '|', '/'];
let loadingSpinnerIndex = 0;

function updateDateTime() {
    if(!config.updateStatBar) return;
    const now = new Date();

    // Grab the current weekday.
    const dayOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][now.getDay()];  // Grab the live day of the week.
    const year = now.getFullYear(); // Year
    const month = String(now.getMonth() + 1).padStart(2, '0'); // Month
    const day = String(now.getDate()).padStart(2, '0'); // Day
    const hour24 = String(now.getHours()).padStart(2, '0'); // Hour in 24-hour format
    const hour12 = String((now.getHours() + 11) % 12 + 1).padStart(2, '0'); // Hour in 12-hour format
    const minute = String(now.getMinutes()).padStart(2, '0'); // Minutes
    const second = String(now.getSeconds()).padStart(2, '0'); // Seconds
    const ampm = now.getHours() >= 12 ? 'PM' : 'AM'; // AM or PM

    let dateTemplate = config.timeFormat;
    dateTemplate = dateTemplate.replace('w', '###w###');
    dateTemplate = dateTemplate.replace('y', '###y###');
    dateTemplate = dateTemplate.replace('M', '###M###');
    dateTemplate = dateTemplate.replace('d', '###d###');
    dateTemplate = dateTemplate.replace('h', '###h###');
    dateTemplate = dateTemplate.replace('H', '###H###');
    dateTemplate = dateTemplate.replace('m', '###m###');
    dateTemplate = dateTemplate.replace('s', '###s###');
    dateTemplate = dateTemplate.replace('a', '###a###');

    dateTemplate = dateTemplate.replace('!###y###', 'y');
    dateTemplate = dateTemplate.replace('!###M###', 'M');
    dateTemplate = dateTemplate.replace('!###d###', 'd');
    dateTemplate = dateTemplate.replace('!###h###', 'h');
    dateTemplate = dateTemplate.replace('!###H###', 'H');
    dateTemplate = dateTemplate.replace('!###m###', 'm');
    dateTemplate = dateTemplate.replace('!###s###', 's');
    dateTemplate = dateTemplate.replace('!###a###', 'a');
    dateTemplate = dateTemplate.replace('!###w###', 'w');

    dateTemplate = dateTemplate.replace('###y###', year);
    dateTemplate = dateTemplate.replace('###M###', month);
    dateTemplate = dateTemplate.replace('###d###', day);
    dateTemplate = dateTemplate.replace('###h###', hour24);
    dateTemplate = dateTemplate.replace('###H###', hour12);
    dateTemplate = dateTemplate.replace('###m###', minute);
    dateTemplate = dateTemplate.replace('###s###', second);
    dateTemplate = dateTemplate.replace('###a###', ampm);
    dateTemplate = dateTemplate.replace('###w###', dayOfWeek);

    const dateString = dateTemplate;

    if(!config.showLoadingSpinner) document.getElementById('bar').textContent = dateString.padEnd(79," ");
    else {
        document.getElementById('bar').textContent = dateString.padEnd(79," ").slice(0, -1) + loadingSpinnerAnimFrames[loadingSpinnerIndex % 4];
        loadingSpinnerIndex++;
    }
}

setInterval(updateDateTime, 100);
updateDateTime();

setInterval(function() {
    let files = [];
    for(let directory of config.allowedProgramDirectories){
        if(config.fileSystem[directory] == undefined) continue;
        // if the files havent changed, do not update the program list
        if(config.fileSystem[directory].length == files.length && config.fileSystem[directory].every((file, index) => file.name == files[index])) continue;

        files = files.concat(config.fileSystem[directory]);
    }
    files = files.map(file => file.name);
    config.programList = files;

    // for all the programs, if there is not a corresponding file in the D:Program-Data directory, create one
    for(let program of config.programList){
        if(getFileWithName("D:/Program-Data", program) == undefined){
            config.fileSystem["D:/Program-Data"].push({
                name: program,
                properties: {
                    read: false,
                    write: false,
                    hidden: false
                },
                data: [""]
            });
        }
    }


    if(config.debugMode) {
        document.body.style.cursor = "pointer";
        document.getElementById('froggyscript-debug-button').style.display = 'block';
        document.getElementById('debug-program-memory').style.display = 'block';
        document.getElementById('debug-os').style.display = 'block';

        document.getElementById('debug-os').textContent = "os memory:\n"+JSON.stringify(config, null, 1);
    } else {
        document.body.style.cursor = "false";
        document.getElementById('froggyscript-debug-button').style.display = 'none';
        document.getElementById('debug-program-memory').style.display = 'none';
        document.getElementById('debug-os').style.display = 'none';
    }
}, 100);

// CSS STYLING ==============================================================================================
const defaultStyling = `
    --void-space: var(--c00);

    --bar-background: var(--c01);
    --bar-text: var(--c15);

    --terminal-background: var(--c15);

    --terminal-line-background: var(--c15);
    --terminal-line-highlighted-background: var(--c14);
    --terminal-line-text: var(--c02);
    --terminal-line-selection-background: var(--c02);
    --terminal-line-selection-text: var(--c15);

    --error-background: var(--c12);
    --error-text: var(--c15);

    --prompt-selected-background: var(--c02);
    --prompt-selected-text: var(--c15);
`

let resetStyling = () => {
    let root = document.querySelector(':root');
    let defaultStylingArray = defaultStyling.split("\n");
    for(let line of defaultStylingArray){
        if(line == "") continue;
        let [property, value] = line.split(":");
        root.style.setProperty(property.trim(), value.trim().replace(";",""));
    }
}

function changeColorPalette(name){
    const colorPalettes = createPalettesObject();
    let palette = colorPalettes[name];
    let root = document.querySelector(':root');
    for(let color in palette){
        root.style.setProperty(`--${color}`, palette[color]);
    }

    resetStyling();
    if(name == "standard"){
    }
    if(name == "revised"){
    }
    if(name == "cherry"){
        root.style.setProperty(`--terminal-line-highlighted-background`, "var(--c10)");
        root.style.setProperty(`--error-background`, "var(--c04)");
    }
    if(name == "swamp"){
        root.style.setProperty(`--error-background`, "var(--c04)");
    }
    if(name == "swamp-revised"){
        root.style.setProperty(`--error-background`, "var(--c04)");
    }

    config.colorPalette = name;
}

function createColorTestBar(){
    const colorPalettes = createPalettesObject();
    // remove all the children of the color test bar
    document.getElementById('color-test-bar').innerHTML = "";
    function getContrastYIQ(hexColor) {
        if (!/^#([0-9A-F]{3}|[0-9A-F]{6})$/i.test(hexColor)) {
            createTerminalLine(`PaletteError: ${hexColor} is an invalid hex color.`, config.errorText);
            return 
        }
        
        if (hexColor.length === 4) {
            hexColor = `#${hexColor[1]}${hexColor[1]}${hexColor[2]}${hexColor[2]}${hexColor[3]}${hexColor[3]}`;
        }
        
        const r = parseInt(hexColor.slice(1, 3), 16);
        const g = parseInt(hexColor.slice(3, 5), 16);
        const b = parseInt(hexColor.slice(5, 7), 16);
        
        const yiq = (r * 299 + g * 587 + b * 114) / 1000;
        
        return yiq >= 128 ? "c00" : "c15";
    }
    let squareContainer = document.getElementById('color-test-bar');
    squareContainer.style.position = "absolute";
    squareContainer.style.top = "0px";
    squareContainer.style.left = "0px";

    for(let i = 0; i < Object.keys(colorPalettes[config.colorPalette]).length; i++){
        let color = Object.keys(colorPalettes[config.colorPalette])[i];
        let square = document.createElement('div');
        let text = `<br><br><br><br><br><br>${color}<br>${colorPalettes[config.colorPalette][color].replace("#","")}`

        square.innerHTML = text;
        square.style.backgroundColor = `var(--${color})`;
        square.style.color = `var(--${getContrastYIQ(colorPalettes[config.colorPalette][color])})`;
        square.style.width = "48px";
        square.style.height = "48px";
        square.style.position = "absolute";
        square.style.left = `${(i % 8) * 48}px`;
        square.style.top = `${Math.floor(i / 8) * 48}px`;
        square.style.fontSize = "6px";
        squareContainer.appendChild(square);
        if(i == Object.keys(colorPalettes[config.colorPalette]).length / 2){
            squareContainer.appendChild(document.createElement('br'));
        }
    }
    document.body.appendChild(squareContainer);
}

// helper functions
function createPalettesObject(){
    let paletteDir = config.fileSystem["D:/Palettes"];
    let palettes = {};

    const colorArray = ["c00", "c01", "c02", "c03", "c04", "c05", "c06", "c07", "c08", "c09", "c10", "c11", "c12", "c13", "c14", "c15"];

    try {
        for(let palette of paletteDir){
            palettes[palette.name] = {};
            for(let i = 0; i < palette.data.length; i++){
                palettes[palette.name][colorArray[i]] = "#"+palette.data[i];
            }
        }
    } catch (err) {
        createTerminalLine("Could create palette.", config.errorText)
    }

    return palettes;
}

function moveCaretToEnd(element) {
    if (typeof window.getSelection !== "undefined" && typeof document.createRange !== "undefined") {
        const range = document.createRange();
        range.selectNodeContents(element);
        range.collapse(false);
        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
        if (element.getBoundingClientRect().bottom > window.innerHeight) element.scrollIntoView(false);
        if (element.getBoundingClientRect().top < 0) element.scrollIntoView(true);
        
    } else if (typeof document.body.createTextRange !== "undefined") {
        const textRange = document.body.createTextRange();
        textRange.moveToElementText(element);
        textRange.collapse(false);
        textRange.select();

        if (element.getBoundingClientRect().bottom > window.innerHeight) element.scrollIntoView(false);
        if (element.getBoundingClientRect().top < 0) element.scrollIntoView(true);
    }
}

function createTerminalLine(text, path, color){
    let lineContainer = document.createElement('div');
    let terminalPath = document.createElement('span');
    let terminalLine = document.createElement('div');

    lineContainer.classList.add('line-container');

    terminalPath.innerHTML = path;
    terminalLine.textContent = text;

    if(color != undefined){
        terminalLine.style.color = `var(--${color})`;
    }

    lineContainer.appendChild(terminalPath);
    lineContainer.appendChild(terminalLine);
    terminal.appendChild(lineContainer);
    terminal.scrollTop = terminal.scrollHeight;
}

function getFileWithName(path, name){
    let file = config.fileSystem[path];
    if(file == undefined) return undefined;
    return file.find(file => file.name == name);
}

function cleanInnerQuotes(input) {
    if ((input.startsWith('"') && input.endsWith('"')) || (input.startsWith("'") && input.endsWith("'"))) {
        let quoteType = input[0];
        let innerContent = input.slice(1, -1);
        let cleanedContent = innerContent.replace(/["']/g, '');
        return quoteType + cleanedContent + quoteType;
    }
    return input;
}

function cleanQuotes(input){
    return input.replaceAll(/["']/g, '');
}

function evaluate(string){
    try {
        if(/`([^`\\]*(\\.[^`\\]*)*)`/g.test(string)){
            throw new Error();
        }
        parsedString = new Function(`return (${string});`)();
        return parsedString;
    } catch (err) {
        return null;
    }
}

function updateLineHighlighting() {
    let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
    lines.forEach(line => {
        if (document.activeElement === line) {
            line.style.background = "var(--terminal-line-highlighted-background)";
        } else {
            line.style.background = "var(--terminal-line-background)";
        }
    });
}

function sendCommand(command, args, createEditableLineAfter){
    if(createEditableLineAfter == undefined) createEditableLineAfter = true;
    command = command.trim();
    args = args.filter(arg => arg.trim() != "");
    let directory;
    let file;

    switch(command){
        case "":
            createTerminalLine("Froggy doesn't like that. >:(", "");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // commands =========================================================================================================================================================
        // change color palette
        case "changepalette": {
            let colorPalettes = createPalettesObject();
            if(args.length == 0){
                createTerminalLine("Please provide a color palette name.", config.errorText);
                createTerminalLine(`* Available color palettes *`, "");
                createTerminalLine(Object.keys(colorPalettes).join(", "), ">");
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(colorPalettes[args[0]] == undefined){
                createTerminalLine("Color palette does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            changeColorPalette(args[0]);
            createColorTestBar()
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        } break;

        case "cl":
        case "clear":
            document.getElementById('terminal').innerHTML = "";
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // clear froggyOS state
        case "cls":
        case "clearstate":
            localStorage.removeItem("froggyOS-state");
            createTerminalLine("State cleared.", ">")
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // delete files
        case "c":
        case "croak":
            if(args.length == 0){
                createTerminalLine("Please provide a file name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = config.fileSystem[config.currentPath];
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = file.find(file => file.name == args[0]);
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(file.properties.write == false){
                createTerminalLine("You do not have permission to delete this file.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            let fileIndex = config.fileSystem[config.currentPath].findIndex(file => file.name == args[0]);
            delete config.fileSystem[config.currentPath][fileIndex];
            config.fileSystem[config.currentPath] = config.fileSystem[config.currentPath].filter(file => file != undefined);

            createTerminalLine("File deleted.", ">")
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "ft":
        case "formattime":
            if(args.length == 0){
                createTerminalLine("Please provide a time format.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(args.join(" ").length > 59){
                createTerminalLine("The argument is too long.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            config.timeFormat = args.join(" ");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // make files
        case "ch":
        case "hatch":
            if(args.length == 0){
                createTerminalLine("Please provide a file name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(config.fileSystem[config.currentPath] == undefined){
                createTerminalLine("Directory does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
            }
            if(config.fileSystem[config.currentPath].find(file => file.name == args[0]) != undefined){
                createTerminalLine("File already exists.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            config.fileSystem[config.currentPath].push({
                name: args[0],
                properties: {
                    read: true,
                    write: true,
                    hidden: false
                }, 
                data: [""]
            });
            createTerminalLine("File created.", ">")
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "hello":
            createTerminalLine("Hello, I'm Froggy! ^v^", ">");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "?":
        case "help":
            createTerminalLine("* A few basic froggyOS commands *", "");
            createTerminalLine("changepalette [palette]. . . . Changes the color palette.", ">");
            createTerminalLine("clear. . . . . . . . . . . . . Clears the terminal output.", ">");
            createTerminalLine("clearstate . . . . . . . . . . Clears froggyOS state.", ">");
            createTerminalLine("croak [file] . . . . . . . . . Deletes the file.", ">");
            createTerminalLine("ribbit [text]. . . . . . . . . Displays the text.", ">");
            createTerminalLine("formattime [format]. . . . . . Changes the time format.", ">");
            createTerminalLine("hatch [file] . . . . . . . . . Creates a file.", ">");
            createTerminalLine("hello. . . . . . . . . . . . . Displays a greeting message.", ">");
            createTerminalLine("help . . . . . . . . . . . . . Displays this message.", ">");
            createTerminalLine("hop [directory]. . . . . . . . Moves to a directory.", ">");
            createTerminalLine("list . . . . . . . . . . . . . Lists files and subdirectories in the current                                directory.", ">");
            createTerminalLine("listdrives . . . . . . . . . . Lists all drives.", ">");
            createTerminalLine("loadstate. . . . . . . . . . . Load froggyOS state.", ">");
            createTerminalLine("meta [file]. . . . . . . . . . Edits a file.", ">");
            createTerminalLine("metaprop [file] [perm] [0/1] . Edits a file's properties.", ">");
            createTerminalLine("savestate. . . . . . . . . . . Save froggyOS state.", ">");
            createTerminalLine("spawn [directory]. . . . . . . Creates a directory.", ">");
            createTerminalLine("spy [file] . . . . . . . . . . Reads the file.", ">");
            createTerminalLine("swimto [program] . . . . . . . Start a program.", ">");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;


        // move directories
        case "h":
        case "hop":
            directory = args[0];

            if(directory == undefined){
                createTerminalLine("Please provide a directory name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            directory = directory.replace(".", config.currentPath);
            if(directory == "~") directory = config.currentPath.split("/")[0];
            if(directory == "-") directory = config.currentPath.split("/").slice(0, -1).join("/");

            if(config.fileSystem[directory] == undefined){
                createTerminalLine("Directory does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            sendCommand("[[BULLFROG]]changepath", [directory], createEditableLineAfter);
        break;

        // list files
        case "ls":
        case "list":
            let currentPathWithSlash = config.currentPath.endsWith('/') ? config.currentPath : config.currentPath + '/';

            // Get subdirectory names under the currentPath
            let subdirectoryNames = Object.keys(config.fileSystem)
                .filter(path => path.startsWith(currentPathWithSlash) && path !== config.currentPath && !path.slice(currentPathWithSlash.length).includes('/'))
                .map(path => path.slice(currentPathWithSlash.length)); // Extract only the subdirectory name

            let files = config.fileSystem[config.currentPath];
            if(files == undefined) files = [];
            // remove all files that are hidden
            files = files.filter(file => file.properties.hidden == false);

            if(files.length == 0 && subdirectoryNames.length == 0){
                createTerminalLine("This directory is empty.", ">")
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            subdirectoryNames.forEach(subdirectory => {
                createTerminalLine(` [DIR] ${subdirectory}`, ">")
            });
            files.forEach(file => {
                createTerminalLine(`       ${file.name}`, ">")
            });
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "ld":
        case "listdrives": {
            let drives = Object.keys(config.fileSystem).map(drive => drive.split(":"))
            drives = [...new Set(drives.filter(drive => drive.length == 2).map(drive => drive[0]))].map(drive => drive + ":");

            drives.forEach(drive => {
                createTerminalLine(`[DRIVE] ${drive}`, ">");
            });
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        } break;

        // load state
        case "lds":
        case "loadstate":
            let state = localStorage.getItem("froggyOS-state");
            if(state == null){
                createTerminalLine("No state found.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            for(let key in JSON.parse(state)){
                config[key] = JSON.parse(state)[key];
            }

            changeColorPalette(config.colorPalette);

            createTerminalLine("State loaded.", ">")
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "/":
        case "macro": {
            if(args.length == 0){
                createTerminalLine("Please provide a macro name.", config.errorText);
                createTerminalLine(`* Available macros *`, "");
                let macros = config.fileSystem["D:/Macros"];
                if(macros == undefined){
                    createTerminalLine("No macros found.", config.errorText);
                } else {
                    createTerminalLine(macros.map(macro => macro.name).join(", "), ">")
                }
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            let macro = getFileWithName("D:/Macros", args[0]);

            config.fileSystem["D:/Macros"].forEach(_macro => {
                if(_macro.data[0].startsWith("!") && _macro.data[0].slice(1).trim() == args[0]){
                    macro = _macro;
                }
            });
            
            if(macro == undefined){
                createTerminalLine("Macro does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            macro = JSON.parse(JSON.stringify(macro));
            let totalFileArguments = 0;

            macro.data.forEach(line => {
                if(line.includes("$")){
                    // if the number behind $ is greater than the totalFileArguments, set totalFileArguments to that number
                    let fileArgument = parseInt(line.split("$")[1].split(" ")[0]);
                    if(fileArgument > totalFileArguments) totalFileArguments = fileArgument;
                }
            });

            if(args.length - 1 < totalFileArguments){
                createTerminalLine(`Missing file argument(s).`, config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            let fileArguments = {};

            for(let i = 1; i < args.length; i++){
                fileArguments["$" + i] = args[i];
            }

            // go through each line, replace the file arguments
            macro.data = macro.data.map(line => {
                for(let fileArgument in fileArguments){
                    line = line.replaceAll(fileArgument, fileArguments[fileArgument]);
                }
                return line;
            });

            macro.data.shift();

            macro.data.forEach(line => {
                sendCommand(line.split(" ")[0], line.split(" ").slice(1), false);
            });

            if(createEditableLineAfter && config.currentProgram == "cli") createEditableTerminalLine(`${config.currentPath}>`);
        } break;

        // edit file
        case "m":
        case "meta":
            if(args.length == 0){
                createTerminalLine("Please provide a file name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = config.fileSystem[config.currentPath];
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = file.find(file => file.name == args[0]);
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(file.properties.write == false){
                createTerminalLine("You do not have permission to edit this file.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            createTerminalLine("* press ESC to save and exit lilypad *", "");
            for(let i = 0; i < file.data.length; i++){
                if(config.allowedProgramDirectories.includes(config.currentPath)){
                    createLilypadLine(String(i+1).padStart(3, "0"), "code", file.name);
                } else if (config.currentPath == "D:/Palettes") {
                    createLilypadLine(String(i).padStart(2, "0"), "palette", file.name);
                } else createLilypadLine(">", undefined, file.name);
                let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
                lines[i].textContent = file.data[i];
                moveCaretToEnd(lines[i]);
            }
        break;

        // edit file properties
        case "mp":
        case "metaprop":
            file = getFileWithName(config.currentPath, args[0]);

            let property = args[1];
            let value = args[2];
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            let propertyTypes = Object.keys(file.properties);

            if(property == undefined || propertyTypes.includes(property) == false){
                createTerminalLine("Please provide a valid property type.", config.errorText);
                createTerminalLine("* Available properties *", "");
                createTerminalLine(propertyTypes.join(", "), ">");
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            if(value == undefined || (value != "0" && value != "1")){
                createTerminalLine("Please provide a valid value. 0 or 1.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break
            }

            if(file.properties.write == false){
                createTerminalLine("You do not have permission to edit this file.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            file.properties[property] = value == "1" ? true : false;
            createTerminalLine("properties updated.", ">")

            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "ribbit":
            if(args.length == 0){
                createTerminalLine("Please provide text to display.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            createTerminalLine(args.join(" "), ">")
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // save state
        case "svs":
        case "savestate":
            localStorage.setItem("froggyOS-state", JSON.stringify(config));
            createTerminalLine("State saved.", ">")
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // make directories
        case "s":
        case "spawn":
            directory = config.currentPath + "/" + args[0];

            if(config.dissallowSubdirectoriesIn.includes(config.currentPath)){
                createTerminalLine("You cannot create directories in this directory.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(args[0] == undefined){
                createTerminalLine("Please provide a directory name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(config.fileSystem[directory] != undefined){
                createTerminalLine("Directory already exists.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            config.fileSystem[directory] = [];
            createTerminalLine("Directory created.", ">");
            sendCommand("[[BULLFROG]]changepath", [directory], createEditableLineAfter);
        break;

        // read file contents
        case "spy":
            if(args.length == 0){
                createTerminalLine("Please provide a file name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = config.fileSystem[config.currentPath];
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = file.find(file => file.name == args[0]);
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(file.properties.read == false){
                createTerminalLine("You do not have permission to read this file.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file.data.forEach(line => {
                createTerminalLine(line, ">")
            });
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "st":
        case "swimto":
            if(!config.programList.includes(args[0])){

                let programList = [];

                // if the file is hidden, do not show it in the program list
                for(let directory of config.allowedProgramDirectories){
                    programList = programList.concat(config.fileSystem[directory].filter(file => file.properties.hidden == false).map(file => file.name));
                }

                createTerminalLine("Please provide a valid program.", config.errorText);
                createTerminalLine("* Available programs *", "");
                createTerminalLine(programList.join(", "), ">");
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            config.programSession++
            if(args[0] == "cli"){
                config.currentProgram = "cli";
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
            } else if(args[0] == "lilypad"){
                config.currentProgram = "lilypad";
                createTerminalLine("* press ESC to exit lilypad *", "");
                createLilypadLine(">", undefined, undefined);
            } else {
                let file;
                for(let directory of config.allowedProgramDirectories){
                    file = getFileWithName(directory, args[0]);
                    if(file != undefined) break;
                }
                if(file.properties.read == false){
                    createTerminalLine("You do not have permission to run this program.", config.errorText);
                    if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                    break;
                }

                let formatted = format(file.data);
                if(formatted.errors.length > 0){
                    createTerminalLine(formatted.errors[0], config.errorText);
                    if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                } else {
                    config.currentProgram = args[0];
                    // interpret the formatted code
                    interpreter(formatted);
                }
            }
        break;

        // hidden commands =======================================================================================================================================
        case "[[BULLFROG]]changepath":
            if(args.length == 0){
                createTerminalLine("Please provide a path.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            config.currentPath = args.join(" ");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]greeting':
            createTerminalLine(`Version ${config.version} is a special version of froggyOS for LBC2`, "");
            createTerminalLine(`* Don't forget to use the help command *` , "");
            createTerminalLine(`* Read the documentation. *` , "");
            createTerminalLine(`Good luck.` , "");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]help':
            createTerminalLine("* A few bullfrog commands *", "");
            createTerminalLine("[[BULLFROG]]changepath [path] - Changes the path of the terminal", ">");
            createTerminalLine("[[BULLFROG]]greeting - Displays the greeting message", ">");
            createTerminalLine("[[BULLFROG]]help - Displays this message", ">");
            createTerminalLine("[[BULLFROG]]setstatbar [text] - Changes the text in the status bar", ">");
            createTerminalLine("[[BULLFROG]]statbarlock [0/1] - Locks the status bar from updating", ">");
            createTerminalLine("[[BULLFROG]]spinner [0/1] - Toggles the loading spinner", ">");
            createTerminalLine("[[BULLFROG]]debugmode [0/1] - Toggles debug mode", ">");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]setstatbar':
            if(args.length > 79){
                createTerminalLine("The argument is too long.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            document.getElementById('bar').textContent = args.join(" ");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]spinner':
            let bool = args[0];
            if(bool == "1") config.showLoadingSpinner = true;
            else if(bool == "0") config.showLoadingSpinner = false;
            else createTerminalLine("Invalid argument. Please provide '1' or '0'.", config.errorText);
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]statbarlock': {
            let bool = args[0];
            if(bool == "1") config.updateStatBar = false;
            else if(bool == "0") config.updateStatBar = true;
            else createTerminalLine("Invalid argument. Please provide '1' or '0'.", config.errorText);
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        } break;

        
        case "[[BULLFROG]]debugmode": {
            let bool = args[0];
            if(bool == "1") config.debugMode = true;
            else if(bool == "0") config.debugMode = false;
            else createTerminalLine("Invalid argument. Please provide '1' or '0'.", config.errorText);
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        } break;

        default:
            createTerminalLine(`Froggy doesn't know "${command}", sorry.`, ">");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;
    }
}

/*
create a line for user input
path - the path

PROGRAM SPECIFIC: for program CLI ===============================================================================================
*/
function createEditableTerminalLine(path){
    let lineContainer = document.createElement('div');
    let terminalPath = document.createElement('span');
    let terminalLine = document.createElement('div');

    lineContainer.classList.add('line-container');
    terminalLine.setAttribute('contenteditable', 'true');
    terminalLine.setAttribute('spellcheck', 'false');

    terminalPath.textContent = path;
    terminalLine.textContent = "";

    terminalLine.addEventListener('keydown', function(e){
        if(e.key == "Enter"){
            e.preventDefault();
        }
    });

    terminalLine.addEventListener('keyup', function(e){
        let userInput = terminalLine.textContent;
        
        e.stopImmediatePropagation();
        if(e.key == "Enter"){
            e.preventDefault();
            terminalLine.setAttribute('contenteditable', 'false');
            let args = userInput.split(" ");

            terminalLine.innerHTML = terminalLine.innerHTML.replaceAll("<div><br></div>", "");

            let command = args[0].trim();
            args = args.slice(1);

            config.commandHistory.reverse();
            config.commandHistory.push(userInput);
            config.commandHistory.reverse();
            config.commandHistoryIndex = -1;

            sendCommand(command, args);
        }

        if(e.key == "ArrowUp"){
            e.preventDefault();
            if(config.commandHistoryIndex <= config.commandHistory.length - 2) config.commandHistoryIndex++;
            if(config.commandHistoryIndex != -1){
                terminalLine.textContent = config.commandHistory[config.commandHistoryIndex];
                moveCaretToEnd(terminalLine);
            }
        }

        if(e.key == "ArrowDown"){
            e.preventDefault();
            if(config.commandHistoryIndex > 0) config.commandHistoryIndex--;
            if(config.commandHistoryIndex == -1){
                terminalLine.textContent = "";
            } else {
                terminalLine.textContent = config.commandHistory[config.commandHistoryIndex];
                moveCaretToEnd(terminalLine);
            }
        }
    });

    lineContainer.appendChild(terminalPath);
    lineContainer.appendChild(terminalLine);
    terminal.appendChild(lineContainer);

    terminal.scrollTop = terminal.scrollHeight;
    terminalLine.focus();
}

/*
PROGRAM SPECIFIC: for program LILYPAD ===============================================================================================
*/
function createLilypadLine(path, linetype, filename){
    config.currentProgram = "lilypad";
    let lineContainer = document.createElement('div');
    let terminalPath = document.createElement('span');
    let terminalLine = document.createElement('div');

    lineContainer.classList.add('line-container');
    terminalLine.setAttribute('contenteditable', 'true');
    terminalLine.setAttribute('data-program', `lilypad-session-${config.programSession}`);
    terminalLine.setAttribute('data-filename', filename);
    terminalLine.setAttribute('spellcheck', 'false');

    terminalPath.textContent = path;
    terminalLine.textContent = "";

    let highlightedLineUpdater = setInterval(updateLineHighlighting, 1);

    terminalLine.addEventListener('keyup', function(e){
        if(linetype == "code"){
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            for(let i = 0; i < lines.length; i++){
                let lineNumber = String(i+1).padStart(3, "0");
                lines[i].previousElementSibling.textContent = lineNumber;
            }
        } else if (linetype == "palette"){
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            for(let i = 0; i < lines.length; i++){
                let lineNumber = String(i).padStart(2, "0");
                lines[i].previousElementSibling.textContent = lineNumber;
            }
        }
    });

    terminalLine.addEventListener('keydown', function(e){
        if(e.key == "Enter"){
            e.preventDefault();
            if(linetype == "code"){
                let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
                let lineNumber = String(+lines[lines.length - 1].previousElementSibling.textContent+1).padStart(3, '0');
                createLilypadLine(lineNumber, "code", filename);
            } else if (linetype == "palette") {
                let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
                let lineNumber = String(+lines[lines.length - 1].previousElementSibling.textContent).padStart(2, '0');
                if(+lineNumber < 15) createLilypadLine(lineNumber, "palette", filename);
            } else {
                createLilypadLine(">", undefined, filename);
            }
        }
        if(e.key == "Backspace"){
            if(terminalLine.textContent.length == 0) {
                let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
                let currentLineIndex = Array.from(lines).indexOf(document.activeElement);
                if(lines.length > 1 && currentLineIndex != 0){
                    if(currentLineIndex == 0){
                        let nextLine = lines[currentLineIndex + 1];
                        moveCaretToEnd(nextLine);
                    }

                    let parent = document.activeElement.parentElement;
                    let previousLine = parent.previousElementSibling.children[1];
                    previousLine.textContent = previousLine.textContent + "​";
                    moveCaretToEnd(previousLine);
                    parent.remove();
                }
            }
        };
        if(e.key == "ArrowUp"){
            e.preventDefault();
            // get the lines by the data-program attribute
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            let focusedLine = document.activeElement;

            let focusedLineIndex = Array.from(lines).indexOf(focusedLine);
            if(focusedLineIndex > 0){
                moveCaretToEnd(lines[focusedLineIndex - 1]);
            };
        };
        if(e.key == "ArrowDown"){
            e.preventDefault();
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            let focusedLine = document.activeElement;

            let focusedLineIndex = Array.from(lines).indexOf(focusedLine);
            if(focusedLineIndex < lines.length - 1){
                moveCaretToEnd(lines[focusedLineIndex + 1]);
            };
        };

        if(e.key == "Escape"){
            config.currentProgram = "cli";
            clearInterval(highlightedLineUpdater);
            let file = {
                name: null,
                properties: {
                    read: true,
                    write: true,
                    hidden: false
                },
                data: []
            };
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            for(let i = 0; i < lines.length; i++){
                file.data.push(lines[i].textContent);
                lines[i].setAttribute('contenteditable', 'false');
            };

            if(filename == undefined){
                createEditableTerminalLine(`${config.currentPath}>`);
            } else {
                config.showLoadingSpinner = true;
                createTerminalLine(`Saving file...`, ">");

                let dataLength = 0;

                file.name = filename;
                let fileIndex = config.fileSystem[config.currentPath].findIndex(file => file.name == filename);
                config.fileSystem[config.currentPath][fileIndex].data = file.data;

                file.data.forEach(line => {
                    dataLength += line.length;
                });
                
                setTimeout(function(){
                    config.showLoadingSpinner = false;
                    createTerminalLine(`Done! ^v^`, ">");
                    createEditableTerminalLine(`${config.currentPath}>`);
                    config.programSession++;
                }, dataLength * 2);
                
            }
        }
    });

    lineContainer.appendChild(terminalPath);
    lineContainer.appendChild(terminalLine);
    
    let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);

    if(lines.length == 0) terminal.appendChild(lineContainer);
    else terminal.insertBefore(lineContainer, document.activeElement.parentElement.nextSibling);

    terminal.scrollTop = terminal.scrollHeight;
    terminalLine.focus();
}

changeColorPalette(config.colorPalette);
createColorTestBar();
sendCommand('[[BULLFROG]]greeting', []);
})();