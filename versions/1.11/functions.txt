
process single line:
        case "endfunc": {
            let matchingFuncIndex = +input.split(" ")[1]; // remove the keyword to find the func start index

            token = { ...token, match: matchingFuncIndex }
        } break;

        case "f:": {
            let functionName = input.replace(/^f:\s+/, '').split(' ')[0].trim();

            if(FroggyscriptMemory.functions[functionName] == undefined) {
                token = new ScriptError("ReferenceError", `Function [${functionName}] does not exist`, clock_interval);
            }
            else token = { ...token, name: functionName };
        } break;

        case "func": {
            let funcName = input.replace(/^func\s+/, '').split(' ')[0].trim();

            token = { ...token, name: funcName };
        } break;

interpret single line:

                case "func": {
                    // find matching endfunc
                    let stack = [];
                    let endIndex = null;
                    for (let i = clock_interval + 1; i < lines.length; i++) {
                        let currentKeyword = lines[i].trim().split(" ")[0];
                        
                        if (currentKeyword === "func") {
                            stack.push("func");
                        } else if (currentKeyword === "endfunc") {
                            if (stack.length === 0) {
                                endIndex = i;
                                break;
                            } else {
                                stack.pop();
                            }
                        }
                    }
                    token.endfuncIndex = endIndex;

                    if (endIndex === null) {
                        token = new ScriptError("SyntaxError", `Missing matching [endfunc] for [func]`, clock_interval);
                    }

                    lines[token.endfuncIndex] += " " + clock_interval;

                    let body = lines.slice(clock_interval + 1, token.endfuncIndex).map(x => x.trim()).filter(x => x.length > 0 && x !== "--");

                    let func = {
                        name: token.name,
                        body: [],
                    }

                    body.forEach(x => {
                        let token = processSingleLine(x, clock_interval);
                        if(token.type === "Error") {
                            token.currentProgram = config.currentProgram;
                            outputError(token);
                            return;
                        }

                        func.body.push(token)
                    })

                    FroggyscriptMemory.functions[token.name] = func;

                    clock_interval = token.endfuncIndex;
                } break;

                case "f:": {
                    let functionName = token.name;
                    let func = FroggyscriptMemory.functions[functionName];
                    let funcStart = func.start;
                    let funcEnd = func.end;
                    let funcLines = lines.slice(funcStart + 1, funcEnd).map(x => x.trim()).filter(x => x.length > 0 && x !== "--");

                    for(let i = 0; i < funcLines.length; i++) {
                        let line = funcLines[i];
                        let token = processSingleLine(line, clock_interval);
                        if(token.type === "Error") {
                            token.currentProgram = config.currentProgram;
                            outputError(token);
                            return;
                        } else {
                            interpretSingleLine(interval, line);
                        }
                    }
                } break;




        // let functionArguments = extractFunctionArguments(functionToken.value).map(x => {
        //     let t = typeify(x);
        //     t.methods = getMethods(x);
        //     return t;
        // })

        // functionArguments = functionArguments.map(arg => methodParser(arg));
        // let func = FroggyscriptMemory.functions[functionToken.functionName]

        // let funcArgs = func.args

        // for(let i = 0; i < func.args.length; i++){
        //     let arg = functionArguments[i];
        //     let expected = funcArgs[i];

        //     if(arg == undefined){
        //         token = new ScriptError("ArgumentError", `Function [${functionToken.functionName}] expected ${funcArgs.length} argument${expectedArguments.args.length != 1 ? "s" : ""}, found ${functionArguments.length}`);
        //         break;
        //     }

        //     if(arg.type != expected.type && expected.type != "Any"){
        //         token = new ScriptError("TypeError", `Function [${functionToken.functionName}] argument [${expected.name}] expected type ${expected.type}, found type ${arg.type}`);
        //         break;
        //     }
        // }

        //console.log(token, functionArguments, expectedArguments)