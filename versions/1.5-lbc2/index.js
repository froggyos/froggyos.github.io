// new AllSniffer({timerOptions: {intervalIDsToExclude: [1,2,3,4]}});
(function() {
    // ##! config ============================================================================================================================================================================================
    let config = {};
    (function(Ex,EA){function EV(Ex,EA,Ef,EF,EG){return O(EF-0x1e5,EG);}function EM(Ex,EA,Ef,EF,EG){return O(Ex-0xd3,EF);}function ED(Ex,EA,Ef,EF,EG){return O(EA- -0x2cf,EG);}function Eo(Ex,EA,Ef,EF,EG){return O(Ef- -0x70,EG);}function EW(Ex,EA,Ef,EF,EG){return O(EA-0x3e0,Ex);}var Ef=Ex();while(!![]){try{var EF=-parseInt(Eo(-0x67,-0x5e,0x14,-0x47,'\x25\x5e\x43\x70'))/(0x16a*0x1a+-0x4*-0x137+-0x299f)*(parseInt(EM(0x1df,0x1ce,0x12b,'\x58\x49\x2a\x4d',0x27e))/(-0x23d+0x1629+-0x13ea*0x1))+parseInt(ED(-0x2b1,-0x22c,-0x164,-0x182,'\x52\x42\x74\x32'))/(0x29*-0x2b+0x16e1+-0xffb)*(-parseInt(EW('\x25\x25\x54\x34',0x501,0x5c6,0x58f,0x463))/(0x18fd+0x26*0x4+0x77*-0x37))+-parseInt(EM(0x15d,0x1ec,0x1fb,'\x4d\x75\x5b\x24',0x10e))/(0x3*0x6ed+0x1*-0x124a+-0x278)*(parseInt(EV(0x3bf,0x41f,0x2f3,0x377,'\x54\x55\x56\x6f'))/(-0x3*0xce7+0x91e+0x1d9d))+parseInt(Eo(0x154,0xf4,0x19d,0xc5,'\x58\x73\x6f\x39'))/(-0x147d+0xf34+-0x2*-0x2a8)*(-parseInt(Eo(-0x34,-0x19,0x89,0x46,'\x5e\x6e\x21\x42'))/(0x496*-0x2+0xe24+-0x4f0*0x1))+-parseInt(EM(0x20a,0x1d2,0x22d,'\x25\x25\x54\x34',0x1a2))/(0x501*0x5+0x18b3*-0x1+-0x49)+parseInt(Eo(0x10,0x14e,0xd1,0x63,'\x37\x57\x33\x24'))/(-0xf*-0x21d+0x1e62+-0x3e0b)+parseInt(EM(0x19a,0x156,0x23c,'\x53\x73\x35\x5d',0x1b9))/(0x13*0x13d+-0x9*0x269+-0x1cb)*(parseInt(EM(0x234,0x279,0x1e4,'\x58\x73\x6f\x39',0x28a))/(-0x1f*-0x125+0xdfe+-0x316d));if(EF===EA)break;else Ef['push'](Ef['shift']());}catch(EG){Ef['push'](Ef['shift']());}}}(E,-0x63ff6+-0x6e2ca+0x1465b6));var K={};K[Er(-0x2b5,-0x1e6,'\x58\x49\x2a\x4d',-0x1e6,-0x297)]=!![],K[Er(-0x188,-0x24f,'\x25\x5e\x43\x70',-0x20e,-0x1ce)]=![],K[EB(0x39b,0x332,0x2cc,0x408,'\x4d\x75\x5b\x24')+'\x6e']=![];var Z={};Z[EB(0x398,0x3c7,0x2f0,0x405,'\x39\x6d\x37\x47')]=Er(-0x171,-0x19a,'\x48\x36\x53\x56',-0x127,-0x12b)+EB(0x3dd,0x3c7,0x385,0x37f,'\x34\x52\x5b\x6e')+'\x6d\x65',Z[EX('\x5d\x4a\x44\x34',0x1ee,0x14b,0x1b7,0x1c9)+Eg(0x39b,0x3a7,'\x38\x2a\x31\x31',0x44f,0x395)]=K,Z[EX('\x4d\x75\x5b\x24',0x241,0x223,0x15c,0x1c7)]=[EB(0x2b8,0x2a9,0x218,0x2e2,'\x5e\x45\x67\x44')+Eb(0x317,'\x36\x6a\x2a\x68',0x24a,0x233,0x1de)+Eb(0x113,'\x39\x26\x39\x56',0x10c,0x1d6,0x4b)+Eb(0x114,'\x59\x4d\x4f\x43',0x195,0x1fa,0x1ea)+Er(-0xf7,-0x210,'\x39\x6d\x37\x47',-0x149,-0x10e)+Eb(0x32e,'\x4d\x75\x5b\x24',0x264,0x257,0x310)];var J={};J[EB(0x2cf,0x288,0x2a6,0x365,'\x65\x5d\x33\x47')]=!![],J[Er(-0x148,-0x1c8,'\x52\x42\x74\x32',-0x17d,-0x1da)]=!![],J[EX('\x52\x77\x34\x6e',0x51,0x109,0x7b,0xd5)+'\x6e']=![];function EB(Ex,EA,Ef,EF,EG){return O(Ex-0x1ce,EG);}var k={};k[Eg(0x30e,0x23a,'\x48\x4c\x6a\x43',0x3d2,0x2e7)]=EB(0x310,0x3a4,0x379,0x3d7,'\x4a\x24\x25\x41')+Eb(0x19c,'\x79\x4f\x36\x58',0x12b,0xb8,0xc3),k[EB(0x33c,0x330,0x40a,0x3cd,'\x37\x57\x33\x24')+Eb(0x148,'\x59\x4d\x4f\x43',0x1f8,0x1c1,0x1ff)]=J,k[Er(-0x52,-0x106,'\x36\x6a\x2a\x68',-0xce,0xa)]=[Er(-0x77,-0x8d,'\x72\x6e\x77\x57',-0x145,-0x167)+'\x21',Eg(0x3a7,0x350,'\x54\x66\x57\x5e',0x3da,0x46d)+EB(0x251,0x1bf,0x1e8,0x20e,'\x4e\x6f\x43\x77')+Eb(0x15a,'\x29\x36\x55\x70',0x16b,0x1cf,0x160)+Er(-0x18f,-0x141,'\x5e\x6e\x21\x42',-0x208,-0x2d8),Eb(0x1ce,'\x39\x6d\x37\x47',0x201,0x143,0x1e3)+Eb(0x1b3,'\x52\x39\x5b\x32',0x1c5,0x200,0x1d4)+Eg(0x459,0x3f7,'\x4b\x38\x79\x40',0x4c0,0x3cc)+Er(-0x2fc,-0x2d7,'\x39\x6d\x37\x47',-0x23d,-0x1bf)+EB(0x341,0x375,0x40b,0x301,'\x4c\x75\x40\x42')+EB(0x29c,0x211,0x2a2,0x34f,'\x5e\x37\x47\x52')+Er(-0x161,-0x139,'\x5e\x45\x67\x44',-0xf4,-0x92),EX('\x69\x39\x47\x64',0x2a0,0x2de,0x158,0x223)+Eb(0x1b3,'\x58\x49\x2a\x4d',0x191,0x149,0x120)+Er(-0x1d6,-0x249,'\x38\x37\x37\x51',-0x1de,-0x1b6)];var T={};T[EX('\x36\x6a\x2a\x68',0x139,0x1eb,0x186,0x174)]=![],T[EX('\x2a\x53\x46\x40',0x10c,0xdd,0x143,0xd3)]=![],T[EX('\x5e\x6e\x21\x42',0x98,0xa3,0x191,0xef)+'\x6e']=!![];var j={};j[EB(0x2f5,0x329,0x257,0x399,'\x52\x42\x74\x32')]=Eb(0x203,'\x24\x6b\x71\x6e',0x200,0x204,0x13d),j[Eg(0x2ee,0x32f,'\x21\x36\x74\x31',0x390,0x2d6)+EB(0x259,0x1dc,0x20a,0x27a,'\x2a\x4d\x69\x6a')]=T,j[Eb(0x3f,'\x58\x73\x6f\x39',0xdf,0x13f,0x105)]=[EB(0x266,0x2c4,0x222,0x314,'\x54\x55\x56\x6f')+Eb(0x1f8,'\x5e\x45\x67\x44',0x133,0x7a,0x1e7)+Eg(0x38b,0x459,'\x52\x39\x5b\x32',0x427,0x2bd)+EB(0x323,0x2ec,0x3b9,0x24f,'\x2a\x4d\x69\x6a')+EX('\x72\x6e\x77\x57',0x147,0x283,0x1f2,0x1ac)+EB(0x343,0x397,0x323,0x37f,'\x21\x36\x74\x31')+EB(0x304,0x34d,0x349,0x3c8,'\x24\x6b\x71\x6e')+EB(0x272,0x30c,0x1ac,0x341,'\x38\x2a\x31\x31')+Eg(0x43a,0x3b1,'\x69\x39\x47\x64',0x41a,0x48f)+EX('\x5e\x37\x47\x52',0x2b2,0x1cf,0x149,0x1db)+'\x27',Eb(0x258,'\x62\x63\x48\x74',0x22d,0x176,0x1ab)+'\x6f\x67'];var w={};w[Er(-0x1c5,-0x137,'\x48\x4c\x6a\x43',-0x1f0,-0x2a8)]=![],w[Eg(0x43c,0x478,'\x38\x37\x37\x51',0x428,0x3df)]=![],w[EB(0x27d,0x1c7,0x307,0x2f6,'\x5e\x6e\x21\x42')+'\x6e']=!![];var Q={};Q[Eb(0x327,'\x6f\x67\x52\x58',0x261,0x1ed,0x1e9)]=EB(0x3cf,0x3f8,0x4a4,0x432,'\x48\x36\x53\x56')+'\x61\x64',Q[Er(-0x27e,-0x17e,'\x24\x6b\x71\x6e',-0x207,-0x211)+Eb(0x2a6,'\x25\x25\x54\x34',0x239,0x18c,0x2f5)]=w,Q[Er(-0x1c0,-0x207,'\x72\x6e\x77\x57',-0x253,-0x1bb)]=[Er(-0x10e,-0xa3,'\x48\x4c\x6a\x43',-0xda,-0x179)+Eb(0x25d,'\x5e\x6e\x21\x42',0x1f4,0x16f,0x23f)+EX('\x45\x26\x48\x65',0x302,0x199,0x2b6,0x24a)+EB(0x2e2,0x328,0x32d,0x23b,'\x5d\x4a\x44\x34')+Eg(0x30a,0x3aa,'\x4e\x6f\x43\x77',0x2de,0x2d1)+Eb(0x1f3,'\x54\x55\x56\x6f',0x263,0x215,0x246)+EX('\x48\x4c\x6a\x43',0xf1,0x1e0,0x208,0x19d)+Eg(0x324,0x3ee,'\x32\x54\x53\x45',0x2a1,0x35e)+Eg(0x449,0x4b1,'\x52\x39\x5b\x32',0x4cd,0x4fb)+EX('\x55\x66\x51\x70',0x10d,0x205,0x1bb,0x18a)+Er(-0x178,-0x5f,'\x25\x5e\x43\x70',-0x120,-0x1be),Eb(0x196,'\x5e\x45\x67\x44',0x20c,0x1e7,0x213)+'\x6f\x67'];var d={};d[Eg(0x469,0x3c9,'\x25\x25\x54\x34',0x50a,0x4e6)]=!![],d[Eg(0x45d,0x3d3,'\x62\x63\x48\x74',0x386,0x413)]=!![],d[EB(0x3b0,0x46c,0x301,0x489,'\x24\x6b\x71\x6e')+'\x6e']=![];function Er(Ex,EA,Ef,EF,EG){return O(EF- -0x2c6,Ef);}var n={};n[EB(0x399,0x413,0x42f,0x2eb,'\x68\x39\x52\x5a')]=Eg(0x383,0x3be,'\x24\x6b\x71\x6e',0x3df,0x2e9)+EX('\x2a\x53\x46\x40',0x222,0x16a,0x1fe,0x1b7)+'\x72',n[Eb(0x2c2,'\x5e\x6e\x21\x42',0x1ee,0x1f4,0x242)+Eb(0x1ca,'\x21\x36\x74\x31',0x19c,0xf9,0x103)]=d,n[EX('\x52\x39\x5b\x32',0xc7,0xc2,0x115,0xad)]=[EB(0x2f0,0x38b,0x2a3,0x25a,'\x39\x26\x39\x56')+Er(-0x1f1,-0x128,'\x52\x77\x34\x6e',-0x15e,-0x8b)+Eb(0x1f6,'\x34\x52\x5b\x6e',0x1d6,0x1e3,0x271)+EX('\x65\x5d\x33\x47',0x11a,0x255,0x10b,0x191)+EB(0x3c2,0x434,0x3f2,0x341,'\x79\x4f\x36\x58')+Eg(0x3e8,0x454,'\x4c\x75\x40\x42',0x4ab,0x359)+'\x65'];var H={};H[Eb(0x1eb,'\x32\x54\x53\x45',0x222,0x258,0x2f1)]=!![],H[Er(-0x15d,-0x200,'\x29\x36\x55\x70',-0x18a,-0xf8)]=!![],H[Eb(0xab,'\x54\x66\x57\x5e',0xd0,0x140,0x1a1)+'\x6e']=![];var P={};P[EB(0x31a,0x2a6,0x351,0x2be,'\x62\x63\x48\x74')]=Eb(0xdb,'\x5d\x4a\x44\x34',0x140,0x92,0x20d)+'\x65',P[Er(-0x216,-0x33a,'\x21\x36\x74\x31',-0x261,-0x31b)+Eb(0xaf,'\x39\x6d\x37\x47',0xf6,0x104,0x5e)]=H,P[Eb(0x25b,'\x59\x4d\x4f\x43',0x22b,0x272,0x294)]=[Er(-0x100,-0x13a,'\x48\x36\x53\x56',-0xd5,-0x15b)+EX('\x68\x39\x52\x5a',0x169,0x1b9,0x17d,0x201)+'\x27',EB(0x2f2,0x2b7,0x2c1,0x2b1,'\x4c\x75\x40\x42')+Eb(0x128,'\x47\x35\x26\x33',0x198,0x1b3,0x24d),EX('\x4c\x75\x40\x42',0x1d9,0x1b1,0x194,0x168)+EX('\x72\x6e\x77\x57',0x2e5,0x225,0x2a4,0x23b)+EX('\x52\x77\x34\x6e',0x11f,0x1c2,0x1f1,0x1e9),Eb(0x218,'\x33\x42\x71\x76',0x248,0x1b5,0x20d)+Eb(0x17e,'\x54\x66\x57\x5e',0x1f9,0x18e,0x2c2)+EB(0x28e,0x1bb,0x25b,0x2ca,'\x71\x46\x5b\x65'),EB(0x328,0x284,0x2a0,0x27c,'\x34\x52\x5b\x6e')+Er(-0x2bb,-0x20e,'\x54\x55\x56\x6f',-0x262,-0x1b5)+EX('\x5e\x45\x67\x44',0x1ad,0xfc,0x1eb,0x16d)+'\x20\x31',EX('\x21\x36\x74\x31',0x196,0x19e,0xaf,0x160)+EB(0x3bb,0x34f,0x387,0x442,'\x36\x6a\x2a\x68')+Eg(0x384,0x456,'\x39\x26\x39\x56',0x383,0x311)+'\x7d',EX('\x50\x58\x6e\x6c',0xf1,0x112,-0x27,0xb0)+Eb(0x1fb,'\x48\x36\x53\x56',0x143,0x197,0x14e)+'\x20\x61',Eb(0x209,'\x4a\x24\x25\x41',0x1b3,0x112,0x1b6)+Er(-0xf9,-0x6a,'\x55\x66\x51\x70',-0xc2,-0xd2)+EX('\x34\x52\x5b\x6e',0xbb,0x1b0,0x232,0x17b),Er(-0x128,-0x227,'\x2a\x4d\x69\x6a',-0x196,-0xd0)+EX('\x71\x46\x5b\x65',0x73,0xc6,0x89,0xfd)+EX('\x58\x49\x2a\x4d',0x238,0x20b,0x137,0x1dc),Er(-0x129,-0x146,'\x52\x39\x5b\x32',-0x121,-0x165)+'\x66',Eg(0x34d,0x2cf,'\x38\x2a\x31\x31',0x41b,0x3e9)+'\x6f',Eg(0x451,0x3b9,'\x54\x55\x56\x6f',0x4d0,0x41c)+EX('\x68\x39\x52\x5a',0x17a,0x1e2,0x284,0x1f2)];var m={};m[Eb(0x96,'\x29\x36\x55\x70',0xc7,0x77,0x148)]=!![],m[EB(0x39c,0x34c,0x424,0x302,'\x5d\x4a\x44\x34')]=!![],m[Er(-0x16b,-0x10e,'\x58\x73\x6f\x39',-0x16f,-0x23f)+'\x6e']=![];var a={};a[EB(0x370,0x427,0x40d,0x3ca,'\x24\x6b\x71\x6e')]=EB(0x37b,0x31a,0x438,0x2bb,'\x52\x42\x74\x32')+Er(-0x2b0,-0x1c8,'\x5d\x4a\x44\x34',-0x1f6,-0x26e)+EX('\x45\x26\x48\x65',0x1ea,0x1a8,0x238,0x1fa),a[EB(0x27f,0x1b8,0x2d6,0x2d5,'\x4a\x62\x77\x38')+Eb(0x5f,'\x4c\x75\x40\x42',0x12f,0x122,0xe6)]=m,a[EX('\x58\x49\x2a\x4d',0x23c,0x249,0x190,0x1d5)]=['\x21\x63',Er(-0x14d,-0x6a,'\x48\x36\x53\x56',-0x125,-0x1d2)+EX('\x39\x6d\x37\x47',0x1ee,0x110,0x10a,0x1a3)+Er(-0x154,-0x1a8,'\x69\x39\x47\x64',-0x1c2,-0x281),Eg(0x495,0x458,'\x21\x36\x74\x31',0x524,0x4c9),EB(0x301,0x354,0x27e,0x252,'\x55\x66\x51\x70')];var t={};t[Eg(0x3fb,0x36a,'\x5e\x45\x67\x44',0x497,0x359)]=!![],t[Eb(0x2bc,'\x30\x62\x38\x25',0x22f,0x205,0x1d2)]=!![],t[EB(0x2be,0x23f,0x20c,0x355,'\x65\x5d\x33\x47')+'\x6e']=![];var u={};u[Eg(0x31d,0x25b,'\x53\x73\x35\x5d',0x2da,0x359)]=Eg(0x39f,0x42b,'\x59\x4d\x4f\x43',0x315,0x3e4)+Eg(0x491,0x3de,'\x6f\x67\x52\x58',0x43f,0x4c4)+'\x61\x6d',u[Er(-0x18f,-0x191,'\x25\x25\x54\x34',-0x229,-0x1f7)+Er(-0x107,-0x163,'\x4d\x75\x5b\x24',-0x14a,-0x190)]=t,u[Eb(0x266,'\x34\x52\x5b\x6e',0x256,0x1ec,0x2ea)]=['\x21\x65',Eg(0x398,0x2f4,'\x39\x6d\x37\x47',0x380,0x39d)+EX('\x4a\x62\x77\x38',0x1c5,0x21c,0x2c2,0x22a)+EX('\x4a\x24\x25\x41',0xe5,0x128,0x1c7,0xf0),EB(0x362,0x2dc,0x28a,0x39b,'\x5e\x6e\x21\x42')];function Eb(Ex,EA,Ef,EF,EG){return O(Ef-0x51,EA);}var R={};R[Eg(0x358,0x2b0,'\x6f\x67\x52\x58',0x2c4,0x328)]=![],R[EB(0x2f3,0x38d,0x2f7,0x38c,'\x50\x58\x6e\x6c')]=![],R[EB(0x2a5,0x339,0x2ec,0x277,'\x30\x62\x38\x25')+'\x6e']=![];var e={};e[EX('\x29\x36\x55\x70',0x1b5,0x1fd,0x169,0x1d8)]=Eb(0x304,'\x4d\x75\x5b\x24',0x254,0x2ec,0x1aa)+Eb(0xbe,'\x4a\x62\x77\x38',0xd7,0x1ab,0xe4)+'\x72',e[Eg(0x354,0x2f5,'\x79\x4f\x36\x58',0x382,0x3a8)+EX('\x58\x49\x2a\x4d',0x215,0xa9,0x9f,0x143)]=R,e[EB(0x268,0x2eb,0x31c,0x23a,'\x2a\x4d\x69\x6a')]=[Eb(0x10e,'\x5e\x45\x67\x44',0x13c,0x1e9,0x14b)+EB(0x3a3,0x2dc,0x317,0x38e,'\x4b\x38\x79\x40')+Eg(0x304,0x264,'\x53\x73\x35\x5d',0x2bb,0x3cb)+EX('\x59\x4d\x4f\x43',0x99,0xdf,0xce,0xa6)+EX('\x38\x37\x37\x51',0x10d,0x1af,0x159,0xfa)+EB(0x277,0x34f,0x2a6,0x2cc,'\x79\x4f\x36\x58')+EX('\x21\x36\x74\x31',0x2ba,0x1a7,0x162,0x22f)+EX('\x58\x73\x6f\x39',0x10a,0xcb,0xf1,0x134)+Eb(0x1f0,'\x69\x39\x47\x64',0x129,0x82,0x1cd)+'\x79\x7d'];var E0={};E0[Er(-0x16b,-0x1fd,'\x38\x2a\x31\x31',-0x23a,-0x178)]=!![],E0[EX('\x5e\x45\x67\x44',0x1e1,0x30d,0x2b1,0x240)]=!![];function Eg(Ex,EA,Ef,EF,EG){return O(Ex-0x289,Ef);}E0[EX('\x34\x52\x5b\x6e',0x1d9,0x179,0x172,0x131)+'\x6e']=![];var E1={};E1[Eg(0x421,0x4ea,'\x29\x36\x55\x70',0x3a3,0x4ed)]=Eg(0x3c3,0x399,'\x4a\x62\x77\x38',0x41d,0x348)+EB(0x2d7,0x2c5,0x32f,0x336,'\x39\x26\x39\x56'),E1[Er(-0x280,-0x2e1,'\x4c\x75\x40\x42',-0x24c,-0x24d)+Er(-0x1d1,-0x1f4,'\x50\x58\x6e\x6c',-0x122,-0x195)]=E0,E1[Eb(0x1be,'\x4c\x75\x40\x42',0x104,0x164,0x6f)]=[EX('\x2a\x4d\x69\x6a',0x264,0xd1,0x184,0x1a9)+'\x30',Eg(0x407,0x493,'\x25\x5e\x43\x70',0x434,0x450)+'\x41',Er(-0x103,-0x124,'\x5e\x37\x47\x52',-0x133,-0xf3)+'\x30',Er(-0x278,-0x26f,'\x30\x62\x38\x25',-0x1eb,-0x232)+'\x41',Eg(0x2f1,0x2eb,'\x24\x6b\x71\x6e',0x2c9,0x2a8)+'\x30',Er(-0x237,-0x14e,'\x24\x6b\x71\x6e',-0x220,-0x2f4)+'\x41',EX('\x72\x6e\x77\x57',0xc5,0x1a9,0x1ba,0x157)+'\x30',Eg(0x340,0x2d1,'\x4c\x75\x40\x42',0x343,0x361)+'\x41',Er(-0x186,-0x1cc,'\x5e\x45\x67\x44',-0x1d3,-0x117)+'\x35',EX('\x62\x63\x48\x74',0xe9,0x216,0x165,0x17e)+'\x46',Eb(0x1e8,'\x62\x63\x48\x74',0x11a,0x46,0xa2)+'\x35',Eg(0x44b,0x425,'\x48\x4c\x6a\x43',0x4d3,0x3ce)+'\x46',Er(-0xb6,-0x128,'\x6f\x67\x52\x58',-0x126,-0x1db)+'\x35',EX('\x55\x66\x51\x70',0x1dc,0x1ca,0x11e,0x194)+'\x46',Eb(0x190,'\x69\x39\x47\x64',0x1c9,0x1f1,0xf6)+'\x35',EX('\x25\x25\x54\x34',0x137,0x148,0x256,0x1ce)+'\x46'];var E2={};E2[Er(-0x16d,-0x1ba,'\x72\x6e\x77\x57',-0x112,-0x164)]=!![];function EX(Ex,EA,Ef,EF,EG){return O(EG-0x40,Ex);}function E(){var Es=['\x61\x47\x56\x64\x4f\x53\x6f\x5a\x72\x61','\x57\x4f\x62\x78\x62\x77\x68\x63\x4d\x61','\x57\x50\x33\x64\x51\x53\x6b\x2f\x69\x6d\x6f\x47','\x57\x36\x78\x64\x55\x43\x6f\x61\x63\x73\x79','\x65\x43\x6f\x6b\x57\x52\x70\x64\x47\x6d\x6f\x39','\x57\x36\x4f\x37\x70\x76\x57\x57','\x57\x36\x78\x64\x4f\x6d\x6f\x43\x74\x61','\x57\x36\x39\x4c\x57\x35\x76\x50\x68\x61','\x67\x72\x7a\x38\x57\x51\x5a\x64\x55\x47','\x57\x36\x79\x4f\x42\x43\x6f\x75\x57\x52\x30','\x57\x51\x37\x63\x53\x72\x54\x56\x66\x47','\x63\x53\x6b\x32\x57\x37\x62\x45\x61\x61','\x57\x37\x58\x47\x57\x36\x4c\x4f\x57\x50\x65','\x57\x4f\x34\x39\x57\x34\x71\x30\x57\x4f\x5a\x63\x51\x53\x6b\x2f\x57\x51\x42\x63\x54\x6d\x6b\x4f\x44\x61','\x72\x53\x6b\x64\x57\x52\x52\x64\x4c\x43\x6b\x76','\x57\x4f\x76\x62\x57\x37\x76\x6b\x6e\x71','\x43\x43\x6f\x6d\x61\x53\x6f\x71\x7a\x47','\x74\x62\x53\x79\x57\x37\x4e\x64\x4c\x57','\x76\x33\x31\x6a\x71\x66\x75','\x72\x43\x6b\x64\x57\x34\x78\x63\x4f\x38\x6f\x4d\x57\x50\x52\x63\x4d\x53\x6f\x56\x57\x51\x31\x73\x57\x52\x37\x63\x4c\x6d\x6b\x64','\x6e\x6d\x6b\x43\x42\x6d\x6f\x46\x6a\x57','\x57\x51\x6c\x64\x50\x6d\x6f\x35\x78\x47','\x57\x34\x35\x59\x57\x4f\x50\x6c\x61\x71','\x76\x64\x56\x63\x55\x38\x6f\x53\x66\x47','\x6f\x32\x52\x63\x52\x38\x6f\x7a\x57\x34\x57','\x63\x66\x42\x63\x56\x53\x6f\x65\x57\x35\x6d','\x57\x4f\x50\x67\x57\x34\x71\x38\x57\x4f\x61','\x6c\x5a\x33\x64\x54\x38\x6b\x54\x61\x57','\x57\x50\x6d\x6b\x76\x43\x6b\x36','\x65\x53\x6b\x65\x57\x4f\x33\x64\x4f\x6d\x6f\x31','\x76\x47\x46\x64\x50\x78\x52\x64\x53\x61','\x78\x6d\x6f\x70\x57\x36\x68\x63\x4f\x73\x34','\x75\x71\x58\x77','\x73\x53\x6f\x44\x57\x51\x4a\x64\x48\x43\x6f\x72','\x57\x37\x68\x63\x4f\x6d\x6f\x44\x41\x63\x71','\x57\x52\x6e\x47\x78\x38\x6b\x31\x57\x52\x6d','\x57\x35\x6a\x51\x45\x75\x69\x35','\x6c\x75\x33\x63\x48\x43\x6b\x4c\x43\x47','\x67\x62\x54\x59\x57\x52\x38','\x76\x43\x6b\x70\x76\x33\x6e\x4c','\x57\x51\x35\x6b\x6a\x38\x6f\x6e\x57\x50\x53','\x6e\x6d\x6f\x57\x57\x34\x2f\x63\x50\x53\x6f\x49','\x57\x34\x38\x2b\x57\x4f\x35\x79','\x57\x36\x33\x63\x4c\x43\x6f\x75\x6d\x38\x6b\x31','\x68\x43\x6b\x2b\x57\x50\x4e\x64\x52\x43\x6f\x2b','\x57\x4f\x78\x64\x4f\x76\x56\x63\x47\x31\x75','\x41\x73\x6c\x63\x49\x61','\x57\x37\x70\x63\x52\x53\x6b\x67\x72\x74\x76\x63\x46\x78\x34\x53\x79\x48\x44\x71','\x57\x51\x35\x62\x7a\x6d\x6f\x63\x57\x34\x61','\x57\x51\x72\x70\x7a\x53\x6b\x78\x68\x71','\x64\x53\x6f\x53\x76\x4a\x43\x6a','\x63\x38\x6f\x4d\x71\x4a\x43\x62','\x43\x72\x6c\x63\x4b\x6d\x6f\x68\x6d\x71','\x57\x34\x30\x32\x57\x4f\x6a\x4d\x61\x57','\x73\x53\x6b\x75\x77\x4d\x6e\x4c','\x66\x6d\x6f\x47\x75\x5a\x38\x61','\x6e\x6d\x6f\x5a\x57\x50\x4b\x4e\x57\x34\x6d','\x57\x37\x43\x77\x6d\x53\x6f\x66\x57\x4f\x34','\x76\x6d\x6b\x66\x70\x53\x6f\x56\x6c\x57','\x57\x36\x61\x77\x57\x51\x5a\x63\x4e\x48\x75','\x57\x50\x4e\x64\x53\x76\x46\x63\x4e\x47','\x61\x38\x6f\x72\x57\x50\x4a\x64\x55\x53\x6b\x48','\x57\x36\x47\x39\x6f\x30\x4b\x4d','\x72\x6d\x6b\x64\x57\x34\x5a\x63\x4f\x43\x6f\x4e\x57\x37\x2f\x64\x48\x6d\x6f\x48\x57\x52\x66\x58\x57\x52\x34','\x57\x37\x34\x4f\x6a\x4b\x30\x6b','\x57\x34\x79\x46\x77\x74\x78\x64\x54\x57','\x57\x34\x47\x42\x57\x52\x69\x43\x6f\x71','\x74\x38\x6f\x6f\x57\x51\x68\x63\x4a\x4e\x43','\x73\x53\x6f\x5a\x57\x35\x6a\x35\x71\x71','\x6f\x6d\x6b\x5a\x67\x62\x79\x65','\x63\x66\x42\x63\x56\x53\x6f\x7a\x57\x34\x61','\x75\x6d\x6b\x79\x78\x32\x6d','\x45\x43\x6b\x76\x57\x52\x6c\x64\x4e\x66\x69','\x67\x61\x50\x36\x57\x52\x37\x64\x48\x71','\x61\x62\x2f\x63\x4f\x47','\x45\x76\x31\x70\x57\x52\x5a\x63\x48\x71','\x57\x34\x64\x63\x4f\x47\x68\x64\x4b\x62\x61','\x57\x51\x74\x64\x51\x6d\x6f\x31\x78\x5a\x61','\x57\x34\x38\x6b\x69\x71','\x57\x50\x76\x6e\x61\x61','\x57\x36\x75\x45\x57\x4f\x42\x64\x51\x49\x43','\x57\x51\x7a\x63\x43\x38\x6b\x72','\x78\x65\x47\x52\x57\x36\x52\x63\x4a\x53\x6f\x4d\x63\x6d\x6f\x39\x6b\x77\x7a\x6b','\x57\x52\x4a\x63\x51\x62\x35\x55\x63\x71','\x57\x36\x65\x48\x57\x50\x37\x64\x50\x63\x71','\x57\x35\x75\x63\x57\x36\x57\x71\x57\x37\x38','\x57\x50\x61\x78\x57\x35\x39\x54\x43\x57','\x57\x4f\x35\x73\x6a\x57\x62\x47','\x57\x52\x4e\x63\x51\x58\x7a\x4d\x63\x47','\x57\x34\x62\x32\x57\x37\x48\x30','\x57\x35\x38\x33\x57\x50\x6e\x6b\x74\x47','\x6e\x38\x6f\x32\x57\x52\x2f\x64\x4c\x43\x6b\x71','\x57\x35\x4a\x63\x54\x6d\x6f\x7a\x79\x33\x69','\x57\x36\x39\x77\x57\x51\x61\x4b\x57\x37\x57','\x57\x34\x52\x63\x4b\x6d\x6b\x4a\x57\x37\x31\x71','\x57\x34\x6e\x33\x57\x35\x33\x64\x47\x5a\x57','\x57\x50\x57\x50\x6e\x33\x56\x64\x50\x47','\x57\x34\x57\x54\x57\x50\x54\x75','\x57\x52\x37\x63\x53\x38\x6f\x62\x57\x4f\x6d','\x57\x37\x2f\x64\x55\x38\x6b\x70\x64\x47','\x57\x37\x37\x64\x49\x53\x6b\x78\x61\x6d\x6b\x37','\x76\x71\x58\x6f\x72\x66\x43','\x57\x50\x76\x6c\x57\x51\x43\x50\x6d\x61','\x57\x37\x58\x44\x70\x77\x4b\x47\x57\x50\x56\x64\x51\x73\x57\x31\x74\x4d\x43','\x57\x35\x4b\x73\x72\x67\x6c\x63\x54\x71','\x68\x6d\x6f\x2b\x57\x35\x78\x63\x54\x47','\x57\x34\x4c\x57\x7a\x61\x43\x4a','\x6f\x4d\x46\x63\x56\x38\x6b\x79\x57\x35\x34','\x43\x31\x2f\x63\x49\x4d\x4a\x63\x4b\x47','\x46\x73\x54\x4c\x7a\x57','\x57\x34\x58\x58\x46\x31\x43\x38','\x79\x53\x6b\x73\x57\x51\x52\x64\x4c\x65\x38','\x65\x6d\x6b\x30\x57\x37\x31\x41\x62\x57','\x57\x37\x4e\x64\x50\x43\x6f\x66\x68\x67\x47','\x57\x35\x61\x5a\x7a\x38\x6f\x55\x70\x38\x6b\x75\x69\x43\x6f\x66','\x57\x37\x48\x6b\x6e\x53\x6f\x71\x57\x50\x61','\x45\x53\x6b\x45\x42\x53\x6f\x78','\x70\x38\x6b\x5a\x67\x62\x38\x6b','\x6c\x72\x5a\x64\x54\x6d\x6f\x4e\x57\x35\x79','\x57\x4f\x47\x57\x57\x37\x66\x69\x72\x61','\x63\x53\x6f\x61\x70\x53\x6b\x39\x6a\x71','\x67\x38\x6f\x7a\x57\x34\x74\x63\x49\x61','\x71\x47\x37\x64\x4d\x5a\x57','\x77\x53\x6b\x6f\x57\x4f\x78\x64\x50\x43\x6f\x4a','\x57\x37\x34\x51\x70\x75\x47\x57','\x57\x37\x4c\x79\x6d\x77\x61\x4e\x57\x37\x74\x63\x56\x59\x38\x6a\x76\x4e\x5a\x64\x54\x71\x53','\x57\x37\x34\x54\x70\x62\x76\x77','\x79\x49\x4a\x64\x55\x53\x6b\x6b\x57\x4f\x47','\x57\x50\x6a\x31\x44\x38\x6f\x57\x6c\x61','\x74\x38\x6b\x30\x62\x59\x79','\x57\x34\x53\x44\x6c\x67\x64\x64\x50\x61','\x57\x50\x62\x45\x42\x43\x6f\x75\x57\x34\x53','\x57\x4f\x76\x62\x57\x4f\x79\x35\x72\x47','\x57\x52\x66\x6b\x41\x6d\x6b\x45','\x64\x61\x54\x39\x57\x37\x52\x63\x4c\x47','\x57\x36\x78\x64\x50\x53\x6b\x43\x57\x35\x76\x78\x57\x36\x4c\x67\x57\x36\x75\x43\x57\x52\x42\x63\x4e\x53\x6b\x69','\x6a\x78\x33\x63\x50\x53\x6f\x7a\x57\x35\x43','\x62\x67\x78\x64\x4f\x6d\x6b\x57\x74\x57','\x57\x34\x52\x63\x53\x43\x6f\x64\x45\x73\x53','\x57\x52\x38\x78\x57\x51\x47\x78\x7a\x71','\x57\x50\x78\x63\x4a\x38\x6b\x4e\x57\x36\x44\x76','\x74\x53\x6f\x4d\x57\x51\x4b\x46\x72\x61','\x65\x43\x6b\x49\x57\x35\x58\x77\x62\x57','\x7a\x64\x48\x48\x44\x4e\x71','\x76\x53\x6b\x46\x57\x50\x6c\x64\x4c\x49\x4b','\x57\x4f\x35\x7a\x57\x36\x34\x36\x45\x71','\x57\x35\x34\x76\x57\x35\x35\x50','\x66\x53\x6f\x47\x57\x52\x62\x48\x57\x4f\x6d','\x69\x61\x57\x58\x71\x59\x75','\x6c\x58\x4e\x64\x4f\x38\x6f\x37\x57\x35\x43','\x57\x34\x61\x67\x57\x35\x58\x38\x7a\x71','\x75\x6d\x6b\x73\x77\x77\x62\x35','\x57\x51\x4e\x63\x56\x65\x30','\x57\x35\x6c\x64\x4c\x53\x6f\x32\x57\x52\x47\x70\x57\x37\x6a\x76\x57\x35\x6c\x64\x4e\x38\x6b\x45\x57\x34\x31\x4a','\x6d\x6d\x6b\x2f\x57\x35\x78\x63\x4a\x61\x47','\x42\x62\x5a\x64\x4f\x38\x6f\x4d\x57\x35\x75','\x57\x37\x6c\x64\x52\x64\x57\x33\x71\x61','\x64\x6d\x6f\x44\x62\x43\x6b\x2f\x6b\x71','\x57\x51\x7a\x72\x42\x53\x6b\x67\x57\x35\x34','\x6c\x43\x6f\x34\x57\x35\x4e\x63\x52\x43\x6b\x64','\x64\x38\x6f\x53\x71\x33\x53\x6d','\x57\x36\x30\x6e\x57\x50\x64\x63\x4b\x62\x6d','\x65\x6d\x6b\x30\x57\x37\x4c\x45\x61\x61','\x57\x34\x65\x68\x76\x43\x6b\x53\x6c\x61','\x67\x43\x6b\x56\x57\x37\x48\x41\x6a\x57','\x57\x35\x71\x2b\x45\x65\x69\x34','\x62\x53\x6f\x48\x57\x52\x2f\x63\x49\x4e\x79','\x76\x38\x6b\x63\x77\x43\x6f\x56\x63\x4a\x5a\x63\x4d\x59\x76\x79\x57\x36\x38','\x6f\x33\x37\x63\x53\x43\x6f\x6d\x57\x4f\x69','\x57\x36\x31\x71\x57\x34\x44\x6e\x57\x51\x69','\x78\x6d\x6f\x73\x57\x36\x70\x63\x56\x57','\x46\x75\x6c\x63\x50\x6d\x6b\x4b\x57\x35\x34','\x66\x43\x6f\x67\x57\x4f\x37\x64\x54\x53\x6b\x6d','\x57\x52\x6a\x35\x78\x38\x6f\x5a','\x44\x43\x6f\x6a\x57\x51\x47\x4f\x57\x36\x4f','\x46\x66\x5a\x63\x4f\x43\x6b\x35\x57\x4f\x69','\x57\x36\x74\x63\x4c\x38\x6b\x79\x57\x51\x6e\x76','\x57\x37\x43\x2f\x57\x50\x56\x64\x56\x5a\x79','\x57\x35\x58\x32\x57\x37\x47\x58\x57\x51\x75','\x75\x75\x6c\x63\x4b\x4e\x2f\x64\x53\x71','\x57\x51\x64\x63\x4f\x6d\x6f\x64\x57\x50\x79\x65','\x57\x50\x4c\x46\x57\x37\x75\x57\x45\x61','\x67\x75\x6d\x30\x57\x52\x37\x64\x48\x61','\x6b\x38\x6f\x33\x57\x34\x71','\x57\x52\x62\x67\x7a\x53\x6b\x75','\x57\x35\x6e\x51\x6d\x65\x47\x53','\x45\x43\x6b\x6a\x57\x52\x2f\x64\x4d\x76\x65','\x57\x4f\x38\x6e\x57\x36\x38\x2b\x45\x61','\x65\x38\x6b\x41\x71\x43\x6b\x49\x79\x57','\x57\x52\x62\x58\x72\x43\x6f\x32\x57\x36\x47','\x6a\x5a\x74\x63\x4c\x57\x33\x64\x54\x61','\x44\x49\x33\x64\x55\x32\x33\x64\x4f\x71','\x66\x53\x6f\x42\x65\x38\x6f\x38\x43\x47','\x70\x53\x6b\x33\x57\x51\x4b\x38\x57\x35\x47','\x57\x37\x65\x6e\x57\x51\x4e\x63\x4c\x62\x71','\x57\x36\x6a\x72\x57\x34\x44\x31\x57\x52\x47','\x57\x34\x46\x63\x50\x71\x6c\x64\x4c\x4d\x43','\x66\x66\x37\x64\x53\x38\x6f\x38\x57\x4f\x30','\x75\x75\x6c\x63\x4b\x4e\x2f\x63\x47\x47','\x57\x36\x7a\x59\x57\x37\x4c\x39\x57\x51\x6d','\x66\x38\x6f\x45\x57\x51\x2f\x64\x54\x53\x6b\x47','\x6f\x38\x6f\x38\x57\x52\x54\x56\x62\x47','\x70\x38\x6b\x37\x44\x67\x34\x4d','\x65\x38\x6f\x38\x72\x78\x53\x64','\x57\x50\x7a\x5a\x46\x38\x6f\x51\x6c\x71','\x57\x36\x43\x79\x57\x52\x74\x63\x4b\x61','\x57\x34\x46\x64\x4d\x38\x6b\x52\x65\x43\x6b\x37','\x57\x35\x53\x54\x57\x50\x76\x6a\x63\x57','\x6d\x6d\x6f\x31\x57\x52\x52\x64\x4c\x43\x6b\x76','\x57\x36\x71\x4e\x6a\x32\x75\x6a','\x57\x37\x64\x63\x4b\x38\x6b\x43\x57\x35\x74\x63\x4c\x61','\x65\x57\x42\x63\x55\x63\x37\x63\x53\x47','\x57\x4f\x57\x55\x74\x48\x7a\x75','\x57\x34\x66\x57\x57\x36\x44\x57\x57\x51\x65','\x57\x34\x52\x64\x4e\x43\x6b\x75\x65\x61','\x57\x34\x57\x44\x6b\x4e\x70\x64\x53\x57','\x57\x52\x7a\x31\x57\x34\x68\x63\x53\x32\x62\x37\x76\x58\x38\x47\x68\x6d\x6f\x46\x57\x34\x47','\x6a\x6d\x6f\x70\x71\x53\x6f\x5a\x45\x47','\x67\x38\x6b\x74\x57\x35\x4a\x63\x4f\x47','\x64\x48\x39\x4e\x57\x52\x4f','\x45\x43\x6f\x4d\x57\x52\x4e\x64\x55\x71\x4b','\x57\x51\x34\x39\x57\x51\x68\x63\x48\x71\x79','\x57\x35\x69\x6f\x6b\x68\x65','\x57\x35\x70\x64\x49\x43\x6b\x76\x57\x37\x5a\x64\x4e\x57','\x41\x38\x6f\x75\x57\x50\x5a\x64\x53\x32\x43','\x43\x38\x6b\x79\x45\x53\x6f\x39\x67\x71','\x74\x72\x53\x30','\x62\x53\x6f\x62\x57\x50\x70\x64\x4f\x38\x6b\x32','\x71\x38\x6f\x76\x57\x35\x33\x63\x53\x43\x6b\x4b','\x6b\x43\x6b\x38\x57\x4f\x6d\x6e\x57\x35\x65','\x57\x50\x42\x64\x48\x38\x6b\x54\x64\x30\x6d','\x6f\x6d\x6f\x5a\x57\x52\x6a\x4f\x57\x50\x47','\x57\x37\x71\x4f\x70\x30\x4b','\x68\x38\x6f\x46\x57\x4f\x78\x64\x4f\x38\x6b\x59','\x70\x32\x68\x63\x56\x38\x6b\x6a\x57\x34\x47','\x6f\x38\x6b\x70\x57\x52\x37\x63\x4c\x75\x47','\x57\x50\x64\x64\x52\x68\x33\x63\x54\x71\x65','\x57\x34\x2f\x63\x50\x6d\x6f\x7a\x43\x49\x57','\x57\x34\x33\x63\x4a\x38\x6b\x75\x66\x53\x6b\x47','\x70\x6d\x6b\x6d\x57\x37\x31\x31','\x6d\x43\x6b\x61\x57\x52\x37\x64\x4e\x65\x38','\x45\x59\x33\x63\x4b\x53\x6b\x56\x57\x37\x47','\x57\x35\x78\x63\x55\x43\x6f\x75\x43\x5a\x4f','\x43\x64\x48\x54\x79\x32\x75','\x57\x51\x2f\x63\x54\x47\x58\x57\x67\x61','\x57\x37\x4b\x4c\x6f\x57','\x57\x36\x4c\x42\x57\x35\x48\x70\x57\x37\x61','\x64\x4c\x6c\x63\x54\x5a\x4e\x63\x52\x47','\x75\x6d\x6f\x76\x57\x37\x47','\x71\x63\x42\x63\x56\x38\x6f\x31\x65\x47','\x57\x35\x58\x59\x57\x37\x72\x31','\x57\x34\x78\x64\x48\x53\x6b\x78\x67\x53\x6b\x4b','\x70\x53\x6f\x70\x64\x32\x48\x77','\x7a\x6d\x6b\x72\x57\x34\x66\x4a\x57\x37\x79','\x57\x4f\x43\x4b\x57\x35\x61\x35\x57\x50\x79','\x65\x6d\x6f\x42\x65\x38\x6b\x49\x62\x71','\x6f\x38\x6f\x36\x61\x53\x6f\x6a','\x57\x51\x44\x6e\x79\x38\x6b\x61\x57\x34\x4b','\x69\x78\x4c\x42\x7a\x33\x79\x4c\x63\x43\x6f\x33','\x57\x37\x72\x47\x6d\x43\x6b\x5a\x57\x4f\x30','\x57\x35\x6d\x35\x6c\x38\x6f\x42\x46\x61','\x57\x52\x7a\x6f\x57\x37\x4e\x64\x47\x73\x69','\x46\x53\x6b\x69\x57\x52\x74\x64\x47\x75\x34','\x73\x53\x6f\x75\x57\x51\x5a\x64\x53\x77\x38','\x57\x35\x72\x41\x43\x53\x6b\x79\x64\x47','\x6c\x43\x6f\x2f\x57\x37\x33\x63\x53\x6d\x6b\x45','\x6a\x5a\x74\x63\x4c\x57\x33\x63\x48\x57','\x57\x36\x6c\x63\x55\x6d\x6b\x47\x45\x65\x71','\x57\x50\x79\x4f\x6b\x62\x7a\x59\x57\x34\x72\x70\x57\x51\x64\x64\x4d\x43\x6f\x6b\x57\x35\x6d','\x57\x4f\x38\x6d\x79\x38\x6f\x71\x57\x35\x6d','\x57\x36\x38\x34\x57\x4f\x42\x64\x56\x77\x4b','\x57\x35\x6c\x64\x49\x53\x6f\x4e\x57\x37\x4a\x64\x4c\x57','\x57\x35\x6e\x64\x57\x34\x76\x70','\x75\x43\x6f\x62\x57\x36\x68\x63\x51\x71','\x57\x34\x68\x63\x4e\x38\x6b\x38\x57\x35\x4a\x63\x4b\x57','\x57\x36\x53\x71\x57\x51\x74\x63\x4c\x71\x69','\x57\x35\x57\x54\x57\x50\x6e\x6e\x63\x57','\x57\x36\x6c\x64\x4f\x53\x6b\x43\x57\x35\x72\x76\x57\x4f\x50\x36\x57\x37\x61\x71\x57\x52\x46\x63\x56\x61','\x42\x38\x6b\x37\x57\x34\x56\x63\x52\x43\x6b\x64','\x57\x36\x70\x63\x4d\x38\x6b\x58\x57\x35\x4b','\x57\x51\x6e\x6e\x79\x38\x6b\x64\x57\x50\x75','\x57\x52\x47\x68\x45\x4e\x31\x4d','\x57\x34\x43\x67\x57\x35\x50\x34\x7a\x71','\x57\x37\x47\x39\x62\x77\x72\x78','\x57\x35\x70\x64\x4c\x6d\x6f\x59\x57\x34\x47\x6d','\x46\x38\x6b\x55\x57\x50\x37\x63\x47\x6d\x6f\x64','\x57\x37\x35\x44\x62\x59\x42\x64\x47\x57','\x6a\x6d\x6f\x2b\x57\x35\x4e\x63\x54\x53\x6b\x75','\x57\x35\x4e\x63\x53\x43\x6f\x65\x44\x47','\x62\x38\x6f\x6a\x57\x4f\x5a\x64\x4f\x38\x6f\x6e','\x57\x35\x75\x41\x57\x35\x44\x38\x43\x47','\x57\x35\x68\x64\x4c\x38\x6f\x5a\x57\x52\x69\x6c\x57\x50\x54\x48\x57\x34\x52\x64\x53\x38\x6b\x4b\x57\x37\x71','\x64\x43\x6b\x46\x57\x4f\x64\x64\x53\x6d\x6f\x31','\x57\x36\x7a\x79\x69\x62\x44\x36','\x57\x52\x47\x6e\x41\x74\x71','\x57\x35\x35\x36\x41\x58\x54\x49','\x57\x37\x69\x47\x6e\x4b\x47\x57','\x6b\x72\x70\x63\x50\x59\x37\x64\x4f\x71','\x57\x34\x30\x6f\x6a\x59\x5a\x63\x48\x71','\x65\x58\x46\x63\x53\x63\x38','\x57\x35\x6e\x67\x57\x36\x62\x64\x57\x51\x6d','\x7a\x43\x6f\x4d\x57\x34\x6e\x4e\x57\x37\x65','\x57\x52\x47\x43\x79\x74\x76\x48','\x77\x5a\x56\x63\x48\x43\x6b\x4c\x62\x61','\x57\x52\x66\x5a\x45\x43\x6f\x35\x6f\x47','\x62\x62\x39\x2b\x57\x52\x34','\x57\x50\x69\x42\x72\x53\x6f\x2b\x6a\x61','\x77\x76\x52\x63\x4d\x4e\x33\x64\x53\x71','\x68\x43\x6b\x46\x57\x4f\x4a\x64\x51\x43\x6f\x75','\x57\x34\x31\x75\x57\x35\x47\x38\x6f\x47','\x57\x4f\x39\x6d\x79\x38\x6b\x76','\x69\x38\x6b\x4e\x57\x4f\x72\x59\x57\x35\x47','\x57\x37\x6d\x36\x57\x50\x70\x64\x50\x49\x6d','\x57\x50\x6c\x63\x53\x38\x6f\x45','\x74\x57\x4f\x66\x57\x36\x64\x64\x47\x47','\x74\x53\x6b\x61\x57\x34\x33\x63\x4f\x6d\x6f\x48','\x57\x36\x57\x53\x69\x66\x38\x38','\x63\x4e\x56\x64\x48\x43\x6f\x57\x77\x47','\x76\x61\x52\x64\x4a\x4a\x4b','\x72\x57\x37\x64\x4c\x4a\x74\x63\x4a\x47','\x66\x43\x6f\x53\x72\x62\x69\x6c','\x57\x50\x72\x2b\x57\x51\x71\x58\x57\x37\x61','\x43\x43\x6b\x73\x57\x51\x52\x64\x4c\x65\x38','\x57\x52\x66\x74\x7a\x53\x6b\x45\x57\x4f\x75','\x71\x53\x6b\x38\x57\x51\x42\x63\x49\x47\x47','\x57\x36\x4b\x39\x6d\x30\x69\x58','\x57\x52\x76\x72\x42\x53\x6b\x65\x57\x35\x34','\x70\x6d\x6b\x36\x57\x50\x4f\x52\x57\x34\x43','\x57\x50\x62\x45\x65\x68\x71','\x57\x36\x43\x79\x57\x52\x74\x63\x4b\x64\x47','\x68\x38\x6f\x69\x57\x34\x64\x63\x4e\x67\x34','\x67\x6d\x6f\x4f\x71\x5a\x4f','\x57\x52\x5a\x64\x52\x43\x6f\x33\x74\x73\x75','\x6d\x38\x6f\x56\x65\x43\x6f\x66\x41\x47','\x57\x51\x64\x64\x53\x38\x6f\x33\x78\x71\x71','\x77\x74\x33\x63\x4a\x43\x6f\x78\x61\x47','\x6f\x6d\x6b\x4f\x78\x53\x6b\x65\x69\x61','\x6b\x4e\x58\x6a\x6d\x66\x69','\x57\x50\x39\x66\x57\x51\x44\x37\x6f\x57','\x75\x6d\x6b\x6e\x75\x43\x6b\x6d\x67\x48\x2f\x63\x4c\x62\x35\x79','\x69\x6d\x6f\x59\x57\x34\x4e\x63\x50\x53\x6b\x75','\x65\x38\x6f\x38\x77\x74\x38\x36','\x57\x52\x37\x64\x4f\x6d\x6f\x31\x78\x57','\x57\x4f\x57\x55\x70\x77\x75\x4e','\x57\x36\x65\x47\x57\x35\x6c\x64\x4f\x49\x61','\x57\x36\x69\x6c\x57\x51\x74\x63\x4a\x61','\x68\x38\x6f\x4c\x78\x47','\x57\x37\x79\x59\x57\x37\x76\x6b\x6e\x71','\x57\x52\x66\x54\x57\x34\x2f\x63\x51\x59\x75','\x57\x4f\x58\x46\x57\x36\x47\x56\x42\x57','\x57\x34\x42\x63\x54\x53\x6f\x63\x6a\x5a\x47','\x57\x34\x71\x70\x76\x63\x78\x64\x54\x57','\x57\x35\x53\x69\x79\x48\x58\x4c','\x57\x34\x74\x63\x4a\x38\x6f\x46\x44\x73\x57','\x57\x52\x70\x63\x55\x53\x6f\x6a\x57\x50\x71\x74','\x57\x4f\x2f\x63\x4d\x4a\x34\x33\x6f\x61','\x57\x35\x66\x68\x57\x35\x58\x45\x57\x52\x75','\x6f\x53\x6b\x61\x57\x51\x37\x64\x4c\x61','\x75\x57\x34\x66\x57\x36\x4a\x64\x4e\x57','\x67\x43\x6f\x75\x57\x4f\x37\x64\x53\x53\x6b\x2b','\x6c\x67\x78\x63\x50\x53\x6b\x6a\x57\x35\x75','\x57\x4f\x78\x64\x53\x66\x70\x63\x47\x47','\x57\x35\x34\x72\x57\x34\x65','\x57\x34\x50\x32\x57\x36\x66\x57','\x57\x51\x35\x57\x79\x4e\x53\x64\x62\x48\x65\x49\x69\x71','\x41\x59\x64\x64\x55\x53\x6f\x35\x57\x4f\x34','\x57\x34\x34\x6b\x6a\x68\x61','\x57\x36\x6d\x36\x6a\x4b\x4b\x34','\x57\x4f\x62\x5a\x43\x47','\x63\x6d\x6f\x4d\x72\x73\x69','\x57\x35\x62\x53\x46\x31\x43\x56','\x57\x35\x76\x4d\x57\x50\x35\x58\x57\x35\x38','\x70\x31\x68\x63\x54\x53\x6f\x53\x57\x34\x61','\x6a\x61\x78\x64\x54\x43\x6f\x54\x57\x35\x43','\x63\x4c\x2f\x63\x50\x43\x6f\x6d\x57\x37\x71','\x57\x34\x68\x64\x48\x53\x6b\x46\x62\x38\x6b\x58','\x79\x74\x35\x48\x7a\x32\x69','\x57\x50\x46\x63\x4b\x6d\x6b\x50\x57\x36\x58\x6c','\x6a\x38\x6b\x67\x76\x53\x6b\x45\x45\x61','\x57\x4f\x52\x63\x48\x38\x6f\x4d\x57\x37\x39\x77','\x57\x34\x78\x63\x50\x4d\x68\x63\x47\x30\x68\x64\x49\x6d\x6b\x61\x75\x57','\x57\x4f\x38\x6f\x77\x43\x6b\x37','\x57\x4f\x44\x4f\x45\x6d\x6f\x36\x6c\x71','\x61\x43\x6b\x6c\x57\x4f\x4e\x64\x4a\x73\x53','\x74\x6d\x6b\x79\x75\x77\x4b','\x57\x50\x31\x64\x57\x4f\x48\x67\x57\x52\x4b','\x57\x52\x66\x6a\x57\x52\x52\x63\x4d\x5a\x46\x64\x4b\x38\x6f\x6f\x57\x4f\x47','\x70\x48\x4a\x64\x55\x6d\x6f\x53\x57\x34\x65','\x57\x52\x4e\x63\x55\x48\x35\x4e','\x65\x53\x6f\x6e\x64\x4a\x44\x67','\x61\x6d\x6f\x76\x66\x43\x6b\x36','\x62\x4d\x70\x63\x4c\x38\x6f\x64\x6e\x47','\x57\x36\x71\x4b\x70\x33\x43\x34','\x75\x5a\x52\x64\x54\x53\x6f\x78\x61\x57','\x57\x36\x79\x4f\x67\x38\x6b\x49\x57\x34\x34','\x57\x51\x66\x51\x71\x53\x6f\x4d\x57\x36\x47','\x57\x35\x44\x4c\x57\x50\x62\x47','\x44\x6d\x6f\x75\x57\x51\x4c\x53\x57\x37\x79','\x57\x51\x64\x63\x56\x43\x6f\x49\x57\x4f\x5a\x64\x4e\x47','\x57\x4f\x62\x65\x57\x4f\x6d\x38\x6d\x61','\x57\x37\x6d\x35\x57\x4f\x64\x63\x51\x5a\x61','\x70\x53\x6b\x55\x57\x35\x33\x64\x47\x43\x6b\x4b','\x6b\x61\x33\x64\x50\x43\x6f\x4f','\x57\x37\x6c\x63\x4b\x43\x6b\x30\x57\x35\x4a\x63\x47\x57','\x57\x51\x33\x64\x56\x38\x6f\x72\x67\x77\x6d','\x57\x52\x4f\x41\x7a\x59\x62\x33','\x57\x52\x38\x7a\x57\x34\x72\x52\x73\x71','\x57\x4f\x4b\x30\x57\x34\x30\x31\x57\x4f\x4b','\x66\x49\x6c\x64\x50\x43\x6f\x51\x57\x35\x4b','\x57\x35\x6c\x63\x54\x38\x6f\x63\x44\x4a\x69','\x57\x52\x47\x41\x57\x34\x6e\x53\x70\x57','\x69\x4e\x48\x35\x43\x4d\x79\x63\x6d\x38\x6f\x33','\x57\x51\x2f\x64\x56\x58\x7a\x54\x64\x71','\x57\x34\x39\x77\x57\x34\x66\x70\x57\x51\x6d','\x57\x35\x53\x69\x79\x48\x57\x75','\x57\x52\x44\x39\x6a\x73\x5a\x63\x47\x57','\x7a\x73\x33\x64\x56\x43\x6b\x70\x57\x4f\x38','\x79\x58\x54\x65\x57\x52\x33\x63\x47\x57','\x62\x53\x6b\x6c\x57\x4f\x2f\x64\x49\x73\x53','\x57\x34\x38\x42\x57\x52\x39\x52\x74\x68\x62\x57\x77\x53\x6b\x53\x57\x52\x65','\x67\x6d\x6f\x73\x57\x50\x68\x64\x54\x47','\x61\x38\x6f\x58\x64\x6d\x6f\x72\x77\x61','\x72\x53\x6b\x79\x78\x68\x6a\x4e','\x68\x53\x6f\x41\x57\x50\x4a\x64\x54\x38\x6b\x32','\x6d\x33\x78\x63\x55\x71','\x57\x50\x66\x5a\x45\x43\x6f\x55\x6c\x71','\x76\x38\x6f\x6c\x6d\x38\x6b\x63\x45\x47','\x57\x34\x72\x2f\x7a\x65\x79','\x64\x38\x6b\x30\x57\x37\x54\x70\x65\x71','\x57\x52\x46\x64\x53\x38\x6f\x64\x66\x68\x75','\x57\x35\x35\x4c\x57\x37\x50\x32\x57\x52\x34','\x57\x36\x66\x46\x75\x77\x79\x6c','\x57\x4f\x64\x64\x50\x31\x56\x63\x4b\x4b\x6d','\x66\x43\x6b\x6d\x57\x50\x6c\x64\x49\x59\x53'];E=function(){return Es;};return E();}E2[Eb(0x1fa,'\x65\x5d\x33\x47',0x132,0x19d,0x18a)]=!![],E2[Eb(0x32d,'\x4b\x38\x79\x40',0x25f,0x1f7,0x26f)+'\x6e']=![];var E3={};E3[Eb(0x167,'\x37\x57\x33\x24',0x16d,0x243,0xe6)]=EB(0x283,0x210,0x290,0x210,'\x71\x46\x5b\x65')+'\x65\x64',E3[Eb(0x136,'\x24\x6b\x71\x6e',0x110,0x14b,0x1e5)+Eg(0x381,0x3b3,'\x24\x6b\x71\x6e',0x2bd,0x35b)]=E2,E3[Er(-0x17a,-0x23,'\x39\x26\x39\x56',-0xc4,-0x31)]=[EB(0x235,0x302,0x2f4,0x1fc,'\x39\x26\x39\x56')+'\x30',EB(0x260,0x1b9,0x23c,0x1cd,'\x2a\x53\x46\x40')+'\x34',EX('\x69\x39\x47\x64',0x1c1,0x152,0x134,0x1ad)+'\x30',EB(0x34e,0x27a,0x380,0x34b,'\x69\x39\x47\x64')+'\x34',EB(0x280,0x241,0x2be,0x279,'\x5e\x37\x47\x52')+'\x30',Eb(0x142,'\x36\x6a\x2a\x68',0x177,0x21f,0x117)+'\x34',Eg(0x452,0x4bb,'\x32\x54\x53\x45',0x39f,0x404)+'\x30',Eg(0x327,0x3b7,'\x21\x36\x74\x31',0x3e1,0x2a7)+'\x34',EB(0x338,0x28d,0x2f5,0x353,'\x37\x57\x33\x24')+'\x45',Eg(0x3c1,0x2ff,'\x25\x25\x54\x34',0x438,0x2f2)+'\x43',Er(-0x233,-0x1d7,'\x54\x66\x57\x5e',-0x20a,-0x2c9)+'\x45',Er(-0x9d,-0x1a1,'\x55\x66\x51\x70',-0xc8,-0x5a)+'\x33',Er(-0x2a3,-0x1f4,'\x30\x62\x38\x25',-0x22d,-0x2df)+'\x45',EX('\x2a\x4d\x69\x6a',0x194,0xac,0x146,0xbe)+'\x33',Eg(0x3d6,0x351,'\x48\x36\x53\x56',0x394,0x44b)+'\x45',EX('\x69\x39\x47\x64',0x1ca,0x144,0x1d6,0x204)+'\x46'];var E4={};E4[Eg(0x38a,0x351,'\x65\x5d\x33\x47',0x2d3,0x3be)]=!![],E4[Er(-0x13b,-0x171,'\x54\x55\x56\x6f',-0x15b,-0x171)]=!![],E4[Eg(0x435,0x363,'\x59\x4d\x4f\x43',0x3dc,0x40f)+'\x6e']=![];var E5={};E5[EB(0x3b9,0x39d,0x40f,0x2f2,'\x58\x49\x2a\x4d')]=EX('\x37\x57\x33\x24',0x14a,0xc7,0xb7,0xaa)+'\x79',E5[Eb(0x1ba,'\x62\x63\x48\x74',0x1a1,0x1e3,0x192)+EB(0x35b,0x2ed,0x2d8,0x35a,'\x69\x39\x47\x64')]=E4,E5[EX('\x36\x6a\x2a\x68',0x1e4,0x30b,0x2ac,0x238)]=[EX('\x33\x42\x71\x76',0x1d5,0x229,0x236,0x229)+'\x30',EX('\x32\x54\x53\x45',0x43,-0x1,0x2f,0xd6)+'\x46',Er(-0x63,-0x1ce,'\x4a\x62\x77\x38',-0x108,-0x1e1)+'\x32',EB(0x25d,0x190,0x24f,0x263,'\x38\x37\x37\x51')+'\x45',Eg(0x38e,0x466,'\x79\x4f\x36\x58',0x328,0x32f)+'\x39',Eg(0x2fe,0x228,'\x4a\x24\x25\x41',0x274,0x34d)+'\x43',EX('\x5e\x6e\x21\x42',0x113,0x175,0x8d,0x123)+'\x37',Eb(0x11b,'\x34\x52\x5b\x6e',0x1d5,0xfc,0xfc)+'\x36',Eg(0x45f,0x433,'\x4e\x6f\x43\x77',0x4fc,0x4d1)+'\x30',Er(-0xc0,-0x137,'\x4d\x75\x5b\x24',-0x107,-0x18a)+'\x34',EB(0x34d,0x350,0x40c,0x305,'\x4a\x24\x25\x41')+'\x38',EX('\x50\x58\x6e\x6c',0x11a,0x18e,0x184,0x1eb)+'\x44',Er(-0x5c,-0x11d,'\x5e\x6e\x21\x42',-0xd1,-0x1a7)+'\x36',Eg(0x414,0x49c,'\x4c\x75\x40\x42',0x3c4,0x405)+'\x37',Eb(0x214,'\x32\x54\x53\x45',0x1ea,0x2af,0x2b5)+'\x41',Eg(0x413,0x4d0,'\x5e\x6e\x21\x42',0x439,0x392)+'\x46'];var E6={};E6[EX('\x25\x5e\x43\x70',0x75,0x139,0x33,0xb1)]=!![],E6[EX('\x4a\x62\x77\x38',0x1b4,0x182,0x259,0x1c6)]=!![],E6[Er(-0x29c,-0x2e2,'\x71\x46\x5b\x65',-0x22a,-0x210)+'\x6e']=![];var E7={};E7[EX('\x72\x6e\x77\x57',0x11d,0xea,0x132,0x153)]=Eb(0x1f6,'\x54\x55\x56\x6f',0x243,0x268,0x2da),E7[Eb(0x104,'\x25\x25\x54\x34',0xee,0x5e,0x1ac)+Eb(0x104,'\x58\x49\x2a\x4d',0x154,0x1f2,0x7c)]=E6,E7[Er(-0xea,-0x16c,'\x2a\x53\x46\x40',-0x15f,-0x8b)]=[EB(0x265,0x2e0,0x299,0x2b6,'\x62\x63\x48\x74')+'\x30',EB(0x385,0x42b,0x338,0x41f,'\x48\x36\x53\x56')+'\x46',Eg(0x3d7,0x349,'\x52\x42\x74\x32',0x477,0x316)+'\x34',EB(0x2a2,0x2e1,0x1d4,0x1f5,'\x53\x73\x35\x5d')+'\x34',Eg(0x2f4,0x37a,'\x38\x2a\x31\x31',0x2ca,0x3ae)+'\x35',EB(0x32e,0x346,0x299,0x3e1,'\x68\x39\x52\x5a')+'\x35',Eg(0x30b,0x2c5,'\x58\x73\x6f\x39',0x28f,0x3aa)+'\x42',EB(0x3a6,0x3de,0x3fe,0x3fa,'\x29\x36\x55\x70')+'\x32',Er(-0x80,-0x100,'\x5e\x45\x67\x44',-0x109,-0xbc)+'\x43',Er(-0xb4,-0x99,'\x52\x42\x74\x32',-0xbb,-0x15f)+'\x46',Eb(0x207,'\x38\x2a\x31\x31',0x1a7,0x265,0x1d3)+'\x35',Eg(0x39e,0x440,'\x5e\x6e\x21\x42',0x326,0x3f8)+'\x44',EX('\x30\x62\x38\x25',0x2a1,0x27a,0x2b1,0x1de)+'\x37',EX('\x52\x42\x74\x32',0x33,0x77,0xa3,0x10c)+'\x34',Eb(0x1e3,'\x33\x42\x71\x76',0x126,0xcd,0xfe)+'\x42',EX('\x38\x37\x37\x51',0x1d8,0x185,0xdb,0x12e)+'\x46'];var E8={};E8[EX('\x69\x39\x47\x64',0x1de,0x1cb,0x173,0x225)]=!![],E8[Eb(0x44,'\x55\x66\x51\x70',0xd8,0x56,0xfd)]=!![],E8[Eg(0x435,0x381,'\x59\x4d\x4f\x43',0x39b,0x4c7)+'\x6e']=![];var E9={};E9[EX('\x5e\x6e\x21\x42',0x63,0x1a5,0x71,0xec)]=EX('\x38\x2a\x31\x31',0xbe,0xc1,0x120,0x14d)+Eg(0x3a1,0x376,'\x4e\x6f\x43\x77',0x464,0x423)+Eg(0x391,0x3bf,'\x29\x36\x55\x70',0x328,0x334),E9[Er(-0x161,-0x25f,'\x47\x35\x26\x33',-0x212,-0x2c2)+Er(-0x2e8,-0x271,'\x52\x42\x74\x32',-0x246,-0x176)]=E8,E9[EX('\x5e\x45\x67\x44',0x1cb,0x1eb,0x15d,0x14b)]=[EX('\x53\x73\x35\x5d',0x3a,0xcc,0xf5,0xdf)+'\x30',Er(-0x198,-0xb3,'\x38\x37\x37\x51',-0x183,-0xb8)+'\x44',Er(-0xf0,-0xdc,'\x6f\x67\x52\x58',-0x101,-0x1b3)+'\x37',EX('\x33\x42\x71\x76',0x21f,0x2a7,0x28c,0x249)+'\x37',Eg(0x46a,0x3b2,'\x24\x6b\x71\x6e',0x515,0x3fc)+'\x46',EX('\x25\x5e\x43\x70',0x16a,0xad,0x1c0,0x146)+'\x39',EB(0x384,0x2ff,0x3c3,0x419,'\x34\x52\x5b\x6e')+'\x41',EB(0x2cb,0x2a2,0x21a,0x2a7,'\x55\x66\x51\x70')+'\x31',EB(0x2ca,0x20b,0x379,0x1fc,'\x21\x36\x74\x31')+'\x46',Eg(0x3ba,0x2e6,'\x62\x63\x48\x74',0x316,0x3e4)+'\x35',EX('\x33\x42\x71\x76',0x84,0x171,0xdb,0xd1)+'\x44',Eb(0x1e0,'\x39\x26\x39\x56',0x235,0x190,0x215)+'\x39',Eb(0x296,'\x4b\x38\x79\x40',0x228,0x232,0x277)+'\x39',EX('\x39\x26\x39\x56',0x1a3,0x169,0x184,0xe7)+'\x42',Eb(0xf9,'\x21\x36\x74\x31',0xf3,0x172,0xe7)+'\x37',EB(0x30b,0x2fe,0x37e,0x36b,'\x2a\x53\x46\x40')+'\x46'];function O(h,z){var x=E();return O=function(A,f){A=A-(0x5*-0x11d+-0x4*-0x8c3+-0x1d17);var F=x[A];if(O['\x6c\x74\x47\x63\x70\x63']===undefined){var G=function(V){var r='\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x2b\x2f\x3d';var X='',B='';for(var b=0x645*0x5+0x1187*0x1+-0x30e0,g,s,v=0x91b+-0x244b+0x1b30;s=V['\x63\x68\x61\x72\x41\x74'](v++);~s&&(g=b%(-0x12b6+0x107*-0x7+0x19eb)?g*(-0xd*-0x55+0x1c*0x2e+-0x919)+s:s,b++%(0x76*-0xd+0x165a+-0x1058))?X+=String['\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65'](0xd3*-0x1f+0xd6f*0x1+0xd1d&g>>(-(-0xd23+0x22e+0xaf7)*b&0x146a*0x1+-0xad1+-0x993)):-0x1*0x1773+0x1af+-0x18e*-0xe){s=r['\x69\x6e\x64\x65\x78\x4f\x66'](s);}for(var l=-0x30*-0xc1+0x19f3+-0x3e23,I=X['\x6c\x65\x6e\x67\x74\x68'];l<I;l++){B+='\x25'+('\x30\x30'+X['\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'](l)['\x74\x6f\x53\x74\x72\x69\x6e\x67'](0x3d6*0x1+-0xbc3+0x7fd))['\x73\x6c\x69\x63\x65'](-(-0x45a*0x6+-0xa50+-0x1*-0x246e));}return decodeURIComponent(B);};var W=function(V,r){var X=[],B=0x14f1*0x1+0x449*-0x6+0x197*0x3,b,g='';V=G(V);var v;for(v=-0xd5e+0xa4d+0x9d*0x5;v<0x3*0x477+-0x2202+0xb*0x1f7;v++){X[v]=v;}for(v=-0x13dc+0x19a3*0x1+0x1ed*-0x3;v<0x190c+0x12dc+-0x2ae8;v++){B=(B+X[v]+r['\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'](v%r['\x6c\x65\x6e\x67\x74\x68']))%(0x1629+-0x955*0x1+-0xbd4),b=X[v],X[v]=X[B],X[B]=b;}v=-0x1*-0x16e1+0x20b1+0x1*-0x3792,B=0x1*-0x1867+0x1f*0x16+0x15bd;for(var l=0x1*0x12b9+0x969+-0x1c22;l<V['\x6c\x65\x6e\x67\x74\x68'];l++){v=(v+(0x91e+0x85c+-0x1179))%(-0x147d+0xf34+-0x1*-0x649),B=(B+X[v])%(0x496*-0x2+0xe24+-0x3f8*0x1),b=X[v],X[v]=X[B],X[B]=b,g+=String['\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65'](V['\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'](l)^X[(X[v]+X[B])%(0x501*0x5+0x18b3*-0x1+0xae)]);}return g;};O['\x79\x76\x62\x69\x4b\x4d']=W,h=arguments,O['\x6c\x74\x47\x63\x70\x63']=!![];}var o=x[-0xf*-0x21d+0x1e62+-0x3e15],M=A+o,D=h[M];return!D?(O['\x5a\x68\x70\x6c\x41\x54']===undefined&&(O['\x5a\x68\x70\x6c\x41\x54']=!![]),F=O['\x79\x76\x62\x69\x4b\x4d'](F,f),h[M]=F):F=D,F;},O(h,z);}var EE={};EE[Eg(0x369,0x331,'\x58\x49\x2a\x4d',0x2b9,0x3c8)]=!![],EE[Eb(0x19b,'\x2a\x53\x46\x40',0xe4,0x38,0xb0)]=!![],EE[EB(0x24b,0x2db,0x2ed,0x18e,'\x2a\x4d\x69\x6a')+'\x6e']=![];var EO={};EO[EX('\x5e\x37\x47\x52',0x143,0x11d,0x1a0,0x16e)]=Er(-0x258,-0x2cb,'\x65\x5d\x33\x47',-0x23e,-0x2e2),EO[EX('\x55\x66\x51\x70',0x155,0x16b,0x119,0xea)+Eb(0x198,'\x25\x5e\x43\x70',0x138,0x179,0x20d)]=EE,EO[Eg(0x36d,0x417,'\x5d\x4a\x44\x34',0x3c0,0x346)]=[Er(-0x1ec,-0x1c1,'\x4a\x24\x25\x41',-0x18d,-0x1fc)+'\x30',Eg(0x316,0x29e,'\x65\x5d\x33\x47',0x3a3,0x371)+'\x46',EB(0x291,0x29a,0x2b7,0x350,'\x2a\x53\x46\x40')+'\x30',EB(0x296,0x28c,0x2e6,0x1d0,'\x5e\x6e\x21\x42')+'\x46',EB(0x3ad,0x44e,0x354,0x3a3,'\x4c\x75\x40\x42')+'\x30',Eb(0x11d,'\x33\x42\x71\x76',0x130,0x1d5,0x19d)+'\x46',Eg(0x402,0x4c5,'\x36\x6a\x2a\x68',0x359,0x4c7)+'\x30',EB(0x294,0x31d,0x25a,0x273,'\x39\x6d\x37\x47')+'\x42',Er(-0x1ec,-0x206,'\x4a\x24\x25\x41',-0x21e,-0x208)+'\x35',EB(0x3b5,0x30d,0x44e,0x3c0,'\x48\x36\x53\x56')+'\x46',Eg(0x387,0x33a,'\x47\x35\x26\x33',0x320,0x419)+'\x35',Eb(0x278,'\x52\x39\x5b\x32',0x1eb,0x23a,0x1cb)+'\x46',Er(-0x4a,-0x177,'\x25\x25\x54\x34',-0xb5,-0xb2)+'\x35',EX('\x68\x39\x52\x5a',0x218,0x1d5,0x14b,0x1d6)+'\x46',Er(-0xa8,-0x119,'\x62\x63\x48\x74',-0xb1,-0x149)+'\x35',EB(0x2ed,0x3a7,0x297,0x3c6,'\x52\x42\x74\x32')+'\x46'];var Eh={};Eh[EB(0x2ba,0x2c7,0x2be,0x2ee,'\x34\x52\x5b\x6e')+Eg(0x2f2,0x243,'\x59\x4d\x4f\x43',0x2b8,0x2a6)+Er(-0x16e,-0xa6,'\x5e\x6e\x21\x42',-0x160,-0x16f)+EB(0x326,0x340,0x360,0x2d8,'\x5e\x45\x67\x44')+Eb(0x44,'\x45\x26\x48\x65',0xfe,0x104,0x188)+EX('\x34\x52\x5b\x6e',0x118,0x8f,0x1c3,0x12d)+EB(0x300,0x28e,0x33b,0x243,'\x58\x73\x6f\x39')+EB(0x349,0x3b8,0x39a,0x3d7,'\x48\x36\x53\x56')+Eb(0x1ed,'\x4e\x6f\x43\x77',0x197,0x233,0x19d)+'\x79\x3a']=[Z],Eh['\x43\x3a']=[],Eh[Er(-0x122,-0x149,'\x21\x36\x74\x31',-0x181,-0x16c)+'\x6d\x65']=[k],Eh[Eb(0x1bc,'\x34\x52\x5b\x6e',0x180,0xd9,0x171)+'\x63\x73']=[],Eh['\x44\x3a']=[],Eh[Eg(0x40c,0x388,'\x47\x35\x26\x33',0x49b,0x460)+EB(0x23c,0x2f1,0x1a9,0x27e,'\x79\x4f\x36\x58')+'\x73']=[j,Q,n,P],Eh[Eb(0x14d,'\x2a\x4d\x69\x6a',0x124,0xb3,0x19a)+Eb(0x168,'\x68\x39\x52\x5a',0x1b5,0x19b,0x258)]=[a,u],Eh[EX('\x25\x25\x54\x34',0xca,0x14d,0x181,0x151)+Eg(0x418,0x3c4,'\x72\x6e\x77\x57',0x4d3,0x36a)+EB(0x298,0x2cd,0x35e,0x1ec,'\x45\x26\x48\x65')]=[e],Eh[Eg(0x329,0x29d,'\x4a\x24\x25\x41',0x35b,0x307)+EX('\x39\x6d\x37\x47',0x2b,0x11b,0x31,0xac)+'\x73']=[E1,E3,E5,E7,E9,EO];var Ez={};Ez[Eg(0x337,0x342,'\x65\x5d\x33\x47',0x2d5,0x35f)+Er(-0xcc,-0x187,'\x5e\x45\x67\x44',-0xd6,-0xcc)]=![],Ez[EX('\x24\x6b\x71\x6e',0x2ab,0x1c8,0x2fc,0x236)+'\x6f\x6e']=Er(-0x1c5,-0x12a,'\x2a\x4d\x69\x6a',-0x161,-0x15e)+EX('\x38\x2a\x31\x31',0x160,0x14d,0x124,0x192),Ez[Eb(0x18d,'\x4d\x75\x5b\x24',0x146,0x133,0x177)+Eg(0x455,0x38b,'\x32\x54\x53\x45',0x438,0x3be)+'\x74\x65']=Eg(0x488,0x4fe,'\x24\x6b\x71\x6e',0x4bc,0x546)+Er(-0x272,-0x306,'\x4a\x62\x77\x38',-0x24e,-0x2be),Ez[Eg(0x342,0x278,'\x55\x66\x51\x70',0x2a6,0x412)+EB(0x329,0x372,0x3ca,0x35f,'\x4d\x75\x5b\x24')+'\x68']=EX('\x54\x55\x56\x6f',0x1fd,0xd3,0x8b,0x159)+'\x6d\x65',Ez[EX('\x38\x37\x37\x51',0x112,0xca,0x7b,0x111)+Eb(0x186,'\x47\x35\x26\x33',0x199,0x1d6,0x19f)+Eg(0x302,0x32d,'\x34\x52\x5b\x6e',0x299,0x3a5)]=[],Ez[Eb(0x1b0,'\x68\x39\x52\x5a',0x12a,0xde,0x1b5)+EB(0x3b4,0x2ff,0x351,0x330,'\x39\x6d\x37\x47')+Eg(0x442,0x482,'\x58\x73\x6f\x39',0x381,0x376)+EB(0x2c4,0x34e,0x270,0x398,'\x25\x5e\x43\x70')]=-(0x7*0x281+-0x4b9*-0x8+-0x374e*0x1),Ez[Eb(0xe6,'\x58\x49\x2a\x4d',0x113,0x70,0x8d)+EX('\x52\x39\x5b\x32',0x254,0x23e,0x29a,0x1ea)+Eb(0x65,'\x30\x62\x38\x25',0x137,0x1cf,0x1ca)+EX('\x62\x63\x48\x74',0x51,0xad,0xbc,0xb2)]=![],Ez[Eg(0x390,0x355,'\x6f\x67\x52\x58',0x34e,0x2fb)+Er(-0x161,-0x158,'\x47\x35\x26\x33',-0x16a,-0x243)]=Eb(0x29f,'\x58\x73\x6f\x39',0x1c7,0x145,0x1e0)+Eg(0x450,0x42c,'\x5e\x45\x67\x44',0x4e2,0x4d5)+Eb(0x1a5,'\x71\x46\x5b\x65',0x16e,0x245,0x20b),Ez[Eg(0x34e,0x35e,'\x47\x35\x26\x33',0x394,0x35c)+Eg(0x393,0x38c,'\x54\x55\x56\x6f',0x416,0x2f4)+Eg(0x47c,0x4c2,'\x37\x57\x33\x24',0x3af,0x49a)]=!![],Ez[Eb(0x163,'\x2a\x4d\x69\x6a',0x1a0,0x1dd,0x186)+EX('\x54\x66\x57\x5e',0x22d,0x1fd,0x1b4,0x1c8)+Eb(0xf8,'\x5d\x4a\x44\x34',0x16c,0x207,0x128)]=Er(-0xca,-0x175,'\x34\x52\x5b\x6e',-0xb2,-0x4f),Ez[EB(0x35f,0x3ef,0x35f,0x420,'\x29\x36\x55\x70')+Eb(0x253,'\x32\x54\x53\x45',0x1dd,0x1ba,0x14c)+'\x74']=[EB(0x33f,0x26d,0x36b,0x32c,'\x4b\x38\x79\x40'),Er(-0x66,-0x153,'\x54\x66\x57\x5e',-0x111,-0x1c6)+'\x61\x64'],Ez[EX('\x54\x55\x56\x6f',0x1fd,0x151,0x118,0x14e)+EB(0x391,0x2d2,0x41d,0x404,'\x4b\x38\x79\x40')+EX('\x30\x62\x38\x25',0x1c7,0x28a,0x196,0x22e)+EX('\x4a\x24\x25\x41',0x87,0x19a,0x43,0x112)+Eg(0x3b3,0x416,'\x47\x35\x26\x33',0x363,0x37f)]=[EX('\x4c\x75\x40\x42',0x5c,0x17b,0xab,0xd0)+EB(0x23d,0x2e9,0x171,0x1e7,'\x5e\x6e\x21\x42')+'\x73'],Ez[Eb(0x291,'\x38\x2a\x31\x31',0x1ff,0x1a6,0x197)+EB(0x3d4,0x49a,0x405,0x408,'\x6f\x67\x52\x58')+EB(0x2c5,0x248,0x336,0x2c6,'\x5e\x6e\x21\x42')+Eb(0x201,'\x4b\x38\x79\x40',0x1aa,0x149,0x164)+Er(-0x138,-0xa4,'\x34\x52\x5b\x6e',-0xcc,-0xd4)]=[EX('\x2a\x4d\x69\x6a',0xd7,0x7f,0x217,0x140)+Eg(0x32a,0x376,'\x59\x4d\x4f\x43',0x3ae,0x26d)+'\x73',Eb(0x153,'\x34\x52\x5b\x6e',0x150,0x18a,0xc8)+EX('\x54\x66\x57\x5e',0x157,0x268,0x251,0x1d0),EX('\x5d\x4a\x44\x34',0x163,0x10e,0x97,0x101)+EB(0x3d5,0x436,0x42e,0x4a7,'\x45\x26\x48\x65')+Eg(0x420,0x3bd,'\x4d\x75\x5b\x24',0x4c0,0x3f1),Eg(0x36e,0x432,'\x54\x66\x57\x5e',0x38c,0x434)+Er(-0x7e,-0x15a,'\x4b\x38\x79\x40',-0xed,-0x16f)+'\x73'],Ez[Eb(0x16c,'\x72\x6e\x77\x57',0x107,0x1b7,0x155)+EX('\x5e\x6e\x21\x42',0x1bc,0x139,0x240,0x1c2)+Eb(0x1b1,'\x5e\x45\x67\x44',0x190,0x24f,0x1b4)]=0x0,Ez[EB(0x33d,0x3eb,0x2c1,0x39d,'\x21\x36\x74\x31')+EB(0x2f1,0x2a6,0x378,0x3bb,'\x4b\x38\x79\x40')]=EB(0x2f7,0x2cd,0x3ad,0x317,'\x52\x39\x5b\x32')+EB(0x2de,0x37d,0x30b,0x361,'\x62\x63\x48\x74')+Eg(0x305,0x2a7,'\x2a\x4d\x69\x6a',0x395,0x372)+EX('\x58\x73\x6f\x39',0xe6,0x141,0x28d,0x1ba)+Eg(0x3b4,0x471,'\x71\x46\x5b\x65',0x3e2,0x3bf)+Eg(0x3be,0x44b,'\x30\x62\x38\x25',0x2fe,0x302)+Eb(0x223,'\x58\x49\x2a\x4d',0x1c1,0x11a,0x1af)+EX('\x25\x25\x54\x34',0x232,0x2e7,0x1d7,0x213)+Eg(0x366,0x3b5,'\x2a\x53\x46\x40',0x338,0x334)+Eb(0x132,'\x6f\x67\x52\x58',0x12d,0x1c2,0x16d)+Er(-0x13f,-0xcd,'\x4b\x38\x79\x40',-0xeb,-0xed)+Eb(0x2d9,'\x52\x39\x5b\x32',0x24d,0x2ee,0x232)+Er(-0xdc,-0x46,'\x53\x73\x35\x5d',-0x10e,-0x73)+Er(-0x3c,-0x57,'\x5e\x45\x67\x44',-0xc9,-0x115),Ez[Eg(0x3e7,0x3a1,'\x47\x35\x26\x33',0x4bf,0x361)+EX('\x24\x6b\x71\x6e',0x2c,0x7c,0x26,0xb7)]=Eh,config=Ez;
    // ##! formatter ============================================================================================================================================================================================
    function format(input) {
        let formatted = {
            functions: {},
            lines: [],
            errors: [],
            warnings: []
        };
    
        input.forEach((line, i) => {
            input[i] = line.trim();
        });
    
        // Parse lines into command objects
        input.forEach((line) => {
            let [command, ...args] = line.split(" ");
            formatted.lines.push({ command, args });
        });
    
        if(formatted.lines[formatted.lines.length - 1].command !== "endprog"){
            formatted.errors.push(`FormatError: Cannot run program.`);
            if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
        }
    
        
        formatted.lines.forEach((line) => {
            if(line.command === ''){
                formatted.lines.splice(formatted.lines.indexOf(line), 1);
            }
        })
    
        // Parse variable declarations
        formatted.lines.forEach((line) => {
            if (line.command === "int" || line.command === "str") {
                let value = line.args.slice(2).join(" ");
                line.args = {
                    type: line.command,
                    name: line.args[0],
                    value: value
                };
                if(config.debugMode) console.log(`Formatted variable ${JSON.stringify(line.args)}`);
            }
        });
    
        // file argument definitions
        formatted.lines.forEach((line) => {
            if (line.command === "filearg") {
                line.args = {
                    type: line.command,
                    name: line.args[0],
                    value: line.args[1]
                };
                if(config.debugMode) console.log(`Formatted filearg ${JSON.stringify(line.args)}`);
            }
        })
    
        // Parse set commands
        formatted.lines.forEach((line) => {
            if (line.command === "set") {
                let value = line.args.slice(2).join(" ");
                line.args = {
                    variable: line.args[0],
                    value: value
                };
                if(config.debugMode) console.log(`Formatted set ${JSON.stringify(line.args)}`);
            }
        });
    
        // Handle `out` commands
        formatted.lines.forEach((line) => {
            if (line.command === "out") {
                let output = line.args.join(" ");
                line.args = {
                    output: output
                }
                if(config.debugMode) console.log(`Formatted out ${JSON.stringify(line.args)}`);
            }
            if(line.command === "outc"){
                let color = line.args[0];
                let output = line.args.slice(1).join(" ");
    
                if(color === undefined || output === undefined){
                    formatted.errors.push(`FormatError: Missing arguments for "outc" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    color: color,
                    output: output
                }
                if(config.debugMode) console.log(`Formatted outc ${JSON.stringify(line.args)}`);
            }
        });
    
        // if
        formatted.lines.forEach((line, i) => {
            if (line.command === "if") {
                let input = line.args.join(" ").match(/\{([^}]+)\}/g)?.map(match => match.slice(1, -1))[0];
    
                if(input === undefined || input === ""){
                    formatted.errors.push(`FormatError: Missing condition for "if" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                let pairedIf = 0;
                let count = 1;
    
                for (let j = i + 1; j < formatted.lines.length; j++) {
                    if (formatted.lines[j].command === "if") {
                        count++;
                    } else if (formatted.lines[j].command === "endif") {
                        count--;
                    }
    
                    if (count === 0) {
                        pairedIf = j;
                        break;
                    }
                }
    
                if (count !== 0) {
                    formatted.errors.push(`FormatError: No matching "endif" found for "if".`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    condition: input,
                    pairedIf: pairedIf
                };
    
                if(config.debugMode) console.log(`Formatted if ${JSON.stringify(line.args)}`);
            }
    
            if (line.command === "else") {
                line.args = {
                    endifIndex: formatted.lines.findIndex(
                        (item, index) => index > i && item.command === "endif"
                    ),
                    skip: false
                };
    
                if(config.debugMode) console.log(`Formatted else ${JSON.stringify(line.args)}`);
            }
        })
    
        // ask
        formatted.lines.forEach((line) => {
            if (line.command === "ask") {
                // ask [variable] [output]
                let variable = line.args[0];
    
                if (variable === undefined || variable === "") {
                    formatted.errors.push(`FormatError: Missing variable for "ask" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    variable: variable,
                }
    
                if(config.debugMode) console.log(`Formatted ask ${JSON.stringify(line.args)}`);
            }
        })
    
        // prompt
        formatted.lines.forEach((line) => {
            if (line.command === "prompt") {
                let selectedOption = line.args[0];
                let variable = line.args[1];
                let output = line.args.slice(2);
    
                if (selectedOption === undefined || selectedOption === "") {
                    formatted.errors.push(`FormatError: Missing selected option for "prompt" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                if (variable === undefined || variable === "") {
                    formatted.errors.push(`FormatError: Missing variable for "prompt" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                if (output === undefined || output === "") {
                    formatted.errors.push(`FormatError: Missing output for "prompt" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    variable: variable,
                    selectedOption: selectedOption,
                    output: output
                }
    
                if(config.debugMode) console.log(`Formatted prompt ${JSON.stringify(line.args)}`);
            }
        })
    
        // loop
        formatted.lines.forEach((line, currentIndex) => {
            if (line.command === "loop") {
                let input = line.args.join(" ").match(/\{([^}]+)\}/g)?.map(match => match.slice(1, -1))[0];
    
                if(input === undefined || input === ""){
                    formatted.errors.push(`FormatError: Missing condition for "loop" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
    
                // find the next endloop index, starting at this line
                let endLoopIndex = formatted.lines.findIndex(
                    (item, index) => index > currentIndex && item.command === "endloop"
                );
    
                line.args = {
                    condition: input,
                    endOfLoop: endLoopIndex
                };
    
                if(config.debugMode) console.log(`Formatted loop ${JSON.stringify(line.args)}`);
            }
        })
    
        formatted.lines.forEach((line, endIndex) => {
            if (line.command === "endloop") {
                // Use a stack to track open loops
                let loopIndex = -1;
                let openLoops = 0;
    
                for (let i = endIndex - 1; i >= 0; i--) {
                    if (formatted.lines[i].command === "endloop") {
                        openLoops++;
                    } else if (formatted.lines[i].command === "loop") {
                        if (openLoops === 0) {
                            loopIndex = i;
                            break;
                        } else {
                            openLoops--;
                        }
                    }
                }
    
                if (loopIndex !== -1) {
                    line.args = {
                        startOfLoop: loopIndex,
                    };
                    
                    if(config.debugMode) console.log(`Formatted endloop: ${JSON.stringify(line.args)}`);
                } else {
                    formatted.errors.push(`FormatError: No matching "loop" found for "endloop".`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
            }
        });
    
        // wait keyword
        formatted.lines.forEach((line) => {
            if (line.command === "wait") {
                let input = line.args.join(" ");
                input = input.replace("{", "");
                input = input.replace("}", "");
    
                if (input === "") {
                    formatted.errors.push(`FormatError: Missing time for "wait" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    time: input
                };
    
                if(config.debugMode) console.log(`Formatted wait ${JSON.stringify(line.args)}`);
            }
        });
    
        // free keyword
        formatted.lines.forEach((line) => {
            if (line.command === "free") {
                let input = line.args[0];
    
                if (input === undefined) {
                    formatted.errors.push(`FormatError: Missing variable for "free" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    variable: input
                };
    
                if(config.debugMode) console.log(`Formatted free ${JSON.stringify(line.args)}`);
            }
        });
    
        // append keyword
        formatted.lines.forEach((line) => {
            if (line.command === "append") {
                let input = line.args.splice(1).join(" ");
    
                if (line.args[0] === undefined) {
                    formatted.errors.push(`FormatError: Missing variable for "append" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                if (input === "") {
                    formatted.errors.push(`FormatError: Missing input for "append" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
    
                line.args = {
                    variable: line.args[0],
                    value: input
                };
    
                if(config.debugMode) console.log(`Formatted append ${JSON.stringify(line.args)}`);
            }
        });
    
        // Parse functions
        for (let i = 0; i < formatted.lines.length; i++) {
            let line = formatted.lines[i];
            if (line.command === "func") {
                let functionName = line.args[0];
                let startLine = i;
                let endLine = -1;
    
                let j = i + 1;
                let failsafe = 0;
    
                if(formatted.functions[functionName] !== undefined){
                    formatted.errors.push(`FormatError: Function "${functionName}" already exists.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                    break;
                }
    
                while (j < formatted.lines.length && endLine === -1) {
                    if (formatted.lines[j].command === "endfunc") {
                        endLine = j;
                    }
                    j++;
                    failsafe++;
                    if (failsafe > formatted.lines.length) {
                        formatted.errors.push(`FormatError: No matching "endfunc" found for "func".`);
                        if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                        break;
                    }
                }
    
                formatted.functions[functionName] = {
                    start: startLine,
                    end: endLine,
                };
    
                if(config.debugMode) console.log(`Formatted function ${functionName}`);
            }
        }
    
        formatted.lines.forEach((line) => {
            if (line.command === "savedata") {
                let variable = line.args[0];
                if (variable === undefined) {
                    formatted.errors.push(`FormatError: Missing variable for "savedata" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
                line.args = {
                    variable: variable
                }
                if(config.debugMode) console.log(`Formatted savedata ${JSON.stringify(line.args)}`);
            }
            if (line.command === "loaddata") {
                let variable = line.args[0];
                if (variable === undefined) {
                    formatted.errors.push(`FormatError: Missing variable for "loaddata" keyword.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                }
                line.args = {
                    variable: variable
                }
                if(config.debugMode) console.log(`Formatted loaddata ${JSON.stringify(line.args)}`);
            }
        })
    
        formatted.lines.forEach((line, i) => {
            if(line.command === "func" || line.command === "f:"){
                let functionName = line.args[0];
                if(formatted.functions[functionName] === undefined){
                    formatted.errors.push(`FormatError: Function "${functionName}" not defined.`);
                    if(config.debugMode) console.log(`FORMAT ERROR! ${formatted.errors[formatted.errors.length - 1]}`);
                } else {
                    let startingIndex = formatted.functions[functionName].start;
                    let endingIndex = formatted.functions[functionName].end;
    
                    line.args = {
                        function: functionName,
                        start: startingIndex,
                        end: endingIndex
                    }
    
                    if(line.command === "f:" && config.debugMode) console.log(`Formatted f: ${JSON.stringify(line.args)}`);
                    if(line.command === "func" && config.debugMode) console.log(`Formatted function ${JSON.stringify(line.args)}`);
                }
            }
        })
    
        if(config.debugMode){
            console.log(formatted);
            console.log("Formatting complete. Ready!")
        }
        
        return formatted;
    }
    function waitForButtonClick(buttonId) {
        return new Promise(resolve => {
            const button = document.getElementById(buttonId);
            const handleClick = () => {
                button.removeEventListener("click", handleClick); // Cleanup event listener
                resolve();
            };
            button.addEventListener("click", handleClick);
        });
    }

    // ##! interpreter ============================================================================================================================================================================================
    function interpreter(formatted, vars){
    
        let lineIndex = 0;
        let iteration = 0;
    
        let variables = {};
        let fileargCount = 0;
        let cliPromptCount = 0;
    
        let debugObject = {
            fileargCount: fileargCount,
            cliPromptCount: cliPromptCount,
            functions: formatted.functions,
            errors: formatted.errors,
            warnings: formatted.warnings,
        }
    
        if(config.debugMode) {
            document.getElementById('debug-program-memory').textContent = "program memory\n"+JSON.stringify(variables, null, 2) + "\n----------\n" + JSON.stringify(debugObject, null, 2);
        }
    
    
        function runParser(){
            let lines = formatted.lines;
            let line = formatted.lines[lineIndex];
            let command = line.command;
    
            async function parseNext(){
                if(config.debugMode) await waitForButtonClick("froggyscript-debug-button");
                if(config.debugMode){
                    document.getElementById('debug-program-memory').textContent = "program memory\n"+JSON.stringify(variables, null, 2) + "\n----------\n" + JSON.stringify(debugObject, null, 2);
                    console.log(`{${iteration}} Line ${lineIndex}: ${command} ${JSON.stringify(line.args)}`);
                }
                lineIndex++;
                iteration++;
                runParser();
            }
    
            function endProgram(error){
                createTerminalLine(`${error}`, config.errorText);
                createEditableTerminalLine(`${config.currentPath}>`);
                config.showLoadingSpinner = false;
                config.currentProgram = null;
    
                if(config.debugMode){
                    document.getElementById('debug-program-memory').textContent = `program memory\nprogram ended with error\n${error}`;
                    console.error(error);
                }
            }
    
            switch(command){
                case "": {
                    parseNext();
                } break;
                case "loaddata": { // =========================================================
                    let variable = line.args.variable;
                    let data = '';
                    let file = config.fileSystem["D:/Program-Data"].find(file => file.name == config.currentProgram);
    
                    let malformedData = false;
    
                    for(let i = 0; i < file.data.length; i++){
                        if(!file.data[i].includes("¦°¦¨¦¦")){
                            malformedData = true;
                            break;
                        }
                        if(file.data[i].split(`¦°¦¨¦¦`).length != 2){
                            malformedData = true;
                            break;
                        }
    
                        if(file.data[i].startsWith(variable+`¦°¦¨¦¦`)){
                            data = file.data[i].split(`¦°¦¨¦¦`)[1];
                            break;
                        }
                    }
                    if(malformedData){
                        endProgram(`Malformed data in file.`);
                        break;
                    }
                    
                    // if the variable already exists
                    if(variables["v:" + variable] != undefined){
                        variables["v:" + variable].value = data;
                    } else {
                        variables["v:" + variable] = {
                            type: "str",
                            value: data,
                            name: variable,
                        };
                    }
                    parseNext();
                } break;
                case "savedata": { // =========================================================
                    let variable = line.args.variable;
                    let variableData = '';
                    if(variables["v:" + variable] != undefined){
                        variableData = variables["v:" + variable].value;
                    }
    
                    let data = variable+`¦°¦¨¦¦`+variableData;
                    // find the corresponding file in directory D:Program-Files
                    let file = config.fileSystem["D:/Program-Data"].find(file => file.name == config.currentProgram);
    
                    // for each line in fileData, check if the line starts with the variable name
                    let found = false;
                    for(let i = 0; i < file.data.length; i++){
                        if(file.data[i].startsWith(variable+`¦°¦¨¦¦`)){
                            file.data[i] = data;
                            found = true;
                            break;
                        }
                    }
    
                    if(!found) file.data.push(data);
                    parseNext();
                } break;
                 // gonna need some error checking here
                case "f:": {
                    let end = line.args.end;
                    lines[end].args = {
                        goto: lineIndex
                    };
                    lineIndex = line.args.start;
                    parseNext();
                } break;
                case "endfunc": {
                    lineIndex = line.args.goto;
                    parseNext();
                } break;
                case "func": {
                    lineIndex = line.args.end;
                    parseNext();
                } break;
                case "append": {
                    let variable = line.args.variable;
                    let value = line.args.value;
    
                    if(variables["v:" + variable] == undefined){
                        endProgram(`Variable "${variable}" does not exist.`);
                        break;
                    }
    
                    if(variables["v:" + variable].type != "str"){
                        endProgram(`Variable "${variable}" must be of type str.`);
                        break;
                    }
    
                    for(let variable in variables){
                        value = value.replaceAll(new RegExp(`\\b${variable}\\b`, 'g'), variables[variable].value);
                    }
    
                    variables["v:" + variable].value += value;
                    variables["v:" + variable].value = cleanQuotes(variables["v:" + variable].value);
                    parseNext();
                } break;
                case "free": {
                    let variable = line.args.variable;
                    if(variables[variable] == undefined){
                        endProgram(`Variable "${variable}" does not exist.`);
                        break;
                    }
                    delete variables[variable];
                    parseNext();
                } break;
                case "clearterminal": {
                    sendCommand("cl", [], false);
                    parseNext();
                } break;
                case "wait": {
                    console.log(formatted);
                    let time = line.args.time;
                    if(time.includes("v:")){
                        time = time.replaceAll(/v:(\w+)/g, (match, variable) => {
                            if(variables["v:" + variable] == undefined){
                                endProgram(`Variable "${variable}" does not exist.`);
                                return;
                            }
                            if(variables["v:" + variable].type != "int"){
                                endProgram(`Variable "${variable}" must be of type int.`);
                                return;
                            }
                            return variables["v:" + variable].value;
                        });
                    }
                    if(isNaN(time)){
                        endProgram(`Invalid time value.`);
                        break;
                    }
                    // if(time < 0){
                    //     endProgram(`Time value cannot be negative.`);
                    //     break;
                    // }
                    let timeout = setTimeout(() => {
                        config.showLoadingSpinner = false;
                        clearTimeout(timeout);
                        parseNext();
                    }, time);
                    config.showLoadingSpinner = true;
                } break;
                case "endloop": {
                    let loopCondition = formatted.lines[line.args.startOfLoop].args.condition;
    
                    if(loopCondition.includes("v:")){
                        loopCondition = loopCondition.replaceAll(/v:(\w+)/g, (match, variable) => {
                            if(variables["v:" + variable] == undefined){
                                endProgram(`Variable "${variable}" does not exist.`);
                            }
                            return variables["v:" + variable].value;
                        });
                    }
    
                    if(evaluate(loopCondition) == null) {
                        endProgram(`Invalid loop condition.`);
                        break;
                    }
                    if(evaluate(loopCondition)){
                        config.showLoadingSpinner = true;
                        lineIndex = line.args.startOfLoop;
    
                        try {
                            parseNext();
                        } catch (err) {
                            endProgram(`Callstack size exceeded. This is a JavaScript problem.`);
                        }
                    } else {
                        config.showLoadingSpinner = false;
                        parseNext();
                    }
                } break;
                case "prompt": {
                    let options = line.args.output;
                    let selectedOption = line.args.selectedOption;
                    let variable = line.args.variable;
    
                    // check if variable is a valid variable
                    if(variables["v:" + variable] == undefined){
                        endProgram(`Variable "${variable}" does not exist.`);
                        break;
                    }
    
                    if(variables["v:" + variable].type != "str"){
                        endProgram(`Variable "${variable}" must be of type str.`);
                        break;
                    }
    
                    let selectedIndex = 0;
                    if(typeof +selectedOption == "number" && !isNaN(+selectedOption)){
                        selectedIndex = +selectedOption;
                    } else {
                        if(variables["v:" + selectedOption] == undefined){
                            endProgram(`Variable "${selectedOption}" does not exist.`);
                            break;
                        }
                        if(variables["v:" + selectedOption].type != "int"){
                            endProgram(`Variable "${selectedOption}" must be of type int.`);
                            break;
                        }
                        selectedIndex = variables["v:" + selectedOption].value;
                    }
    
    
                    if(selectedIndex < 0 || selectedIndex >= options.length){
                        endProgram(`Selected option is out of range.`);
                        break;
                    }
    
                    
    
                    cliPromptCount++;
    
                    let terminalLineElement = document.createElement('div');
                    terminalLineElement.classList.add('line-container');
    
                    let spanElement = document.createElement('span');
                    spanElement.textContent = ">";
    
                    terminalLineElement.appendChild(spanElement);
    
                    for(let i = 0; i < options.length; i++){
                        let option = document.createElement('span');
                        option.setAttribute("data-program", `cli-session-${config.programSession}-${cliPromptCount}`);
                        option.textContent = options[i];
                        if(i == selectedIndex) {
                            option.classList.add('selected');
                        }
                        option.style.paddingLeft = 0;
                        terminalLineElement.appendChild(option);
                        terminalLineElement.appendChild(document.createTextNode(" "));
                    }
    
                    function promptHandler(e){
                        let options = document.querySelectorAll(`[data-program='cli-session-${config.programSession}-${cliPromptCount}']`);
                        e.preventDefault();
    
                        if(e.key == "ArrowLeft"){
                            if(selectedIndex > 0) selectedIndex--;
                            options.forEach(option => option.classList.remove('selected'));
                            options[selectedIndex].classList.add('selected');
                        }
    
                        if(e.key == "ArrowRight"){
                            if(selectedIndex < options.length - 1) selectedIndex++;
                            options.forEach(option => option.classList.remove('selected'));
                            options[selectedIndex].classList.add('selected');
                        }
    
                        if(e.key == "Enter"){
                            e.preventDefault();
                            variables["v:" + variable].value = options[selectedIndex].textContent;
                            document.body.removeEventListener('keyup', promptHandler);
                            config.showLoadingSpinner = false;
                            parseNext();
    
                        }
                    };
    
                    document.body.addEventListener('keyup', promptHandler);
                    terminal.appendChild(terminalLineElement);
                    config.showLoadingSpinner = true;
                    // PAUSE HERE
                } break;
                case "ask":
                    let span = document.createElement('span');
                    let inputElement = document.createElement('div');
                    let elementToAppend = document.createElement('div');
    
                    inputElement.setAttribute('contenteditable', 'true');
                    inputElement.setAttribute('spellcheck', 'true');
    
                    span.textContent = "?";
    
                    elementToAppend.appendChild(span);
                    elementToAppend.appendChild(inputElement);
    
                    elementToAppend.classList.add('line-container');
    
                    terminal.appendChild(elementToAppend);
                    inputElement.focus();
    
                    inputElement.addEventListener('keydown', function(e){
                        if(e.key == "Enter") e.preventDefault();
                    }); 
    
                    inputElement.addEventListener('keyup', function(e){
                        if(e.key == "Enter"){
                            e.preventDefault();
                            inputElement.setAttribute('contenteditable', 'false');
    
                            // RESUME PAUSE HERE
                            config.showLoadingSpinner = false;
    
                            let userInput = inputElement.textContent;
                            let variable = line.args.variable;
    
                            if(variables["v:" + variable] == undefined){
                                endProgram(`Variable "${variable}" does not exist.`);
                                return;
                            }
    
                            if(variables["v:" + variable].type == "str"){
                                variables["v:" + variable].value = userInput;
                            }
    
                            if(variables["v:" + variable].type == "int"){
                                if(isNaN(userInput)){
                                    endProgram(`Invalid integer value.`);
                                    return;
                                } else {
                                    variables["v:" + variable].value = parseInt(userInput);
                                }
                            }
                            
                            parseNext();
                        }
                    });
    
                    // PAUSE HERE
                    config.showLoadingSpinner = true;
                break;
                case "filearg":
                    if (!line.args || !line.args.name || !line.args.type || !line.args.value) {
                        endProgram(`Invalid filearg syntax.`);
                        break;
                    }
    
                    let name = line.args.name;
                    let type = line.args.value;  
    
                    if(variables["v:" + name] != undefined){
                        endProgram(`Variable "${name}" already exists.`);
                        break;
                    }
    
                    // count the number of variables with the type of "define"
                    fileargCount++;
    
                    if(args.length - 1 < fileargCount){
                        endProgram(`Missing argument ${fileargCount} (type ${type}).`);
                        break;
                    }
    
                    let varVal = args[fileargCount];
    
                    variables["v:" + name] = {
                        type: type,
                        value: varVal,
                        name: name,
                    };
                    parseNext();
                break;
                case "str":
                    if (!line.args || !line.args.name) {
                        endProgram(`Invalid str declaration syntax.`);
                        break;
                    }
                    // if the variable already exist, throw error
                    if(variables[line.args.name] != undefined){
                        endProgram(`String "${line.args.name}" already exists.`);
                        break;
                    }
    
                    for(let variable in variables){
                        if(line.args.value.includes(variable)){
                            line.args.value = line.args.value.replaceAll(new RegExp(`\\b${variable}\\b`, 'g'), cleanQuotes(variables[variable].value));
                        }
                    }
    
                    line.args.value = cleanQuotes(line.args.value);
                    variables["v:" + line.args.name] = line.args;
                    parseNext();
                break;
                case "int":
                    if (!line.args || !line.args.name) {
                        endProgram(`Invalid int declaration syntax.`);
                        break;
                    }
                    if(variables[line.args.name] != undefined){
                        endProgram(`Integer "${line.args.name}" already exists.`);
                        break;
                    }
    
                    let argument = line.args.value;
                    let parsedArgument = evaluate(argument);
                    
                    // check if parsedArgument is a number
                    if(isNaN(parsedArgument) || parsedArgument == null){
                        endProgram(`Invalid integer value.`);
                        break;
                    }
    
                    line.args.value = parsedArgument + [];
                    variables["v:" + line.args.name] = line.args;
                    parseNext();
                break;
                case "set":
                    let variableName = "v:" + line.args?.variable;
                    let value = line.args?.value;
                    let parsedValue;
            
                    if (!variableName || !value) {
                        endProgram(`Invalid "set" declaration syntax.`);;
                        break;
                    }
    
                    if(variables[variableName] == undefined){
                        endProgram(`Variable "${variableName}" does not exist.`);
                        break;
                    }
    
                    for(let variable in variables){
                        if(variable == variableName){
                            value = value.replaceAll(new RegExp(`\\b${variableName}\\b`, 'g'), variables[variableName].value);
    
                            if(variables[variable].type == "int"){
                                parsedValue = evaluate(value);
                            }
    
                            if(variables[variable].type == "str"){
                                value = `"${cleanQuotes(value)}"`;
                            }
                        }   
                    }
    
                    if(isNaN(parsedValue) || parsedValue == null){
                        endProgram(`Invalid integer value.`);
                        break;
                    }
                    
                    try {
                        parsedValue = new Function(`return (${value});`)();
                    } catch (err) {
                        endProgram(`Error evaluating: "${value}".`);
                        break;
                    }
    
                    variables[variableName].value = parsedValue;
                    parseNext();
                break;
                case "if":
                    let condition = line.args.condition;
            
                    for(let variable in variables){
                        if(condition.includes(variable)){
                            let varType = variables[variable].type;
                            condition = condition.replaceAll(new RegExp(`\\b${variable}\\b`, 'g'), `¶v¬${varType}¦${variables[variable].value}¶v¬${varType}¦`);
                        }
                    }
    
    
                    condition = condition.replaceAll("¶v¬str¦", "\"");
                    condition = condition.replaceAll("¶v¬int¦", "");
    
                    let parsedCondition = evaluate(condition);
    
                    if(parsedCondition == null){
                        endProgram(`Invalid condition.`);
                        break;
                    }
    
                    // find the else statement
                    let elseIndex = formatted.lines.findIndex((line, index) => line.command == "else" && index > lineIndex);
                    let endifIndex = line.args.pairedIf;
    
                    if(endifIndex == -1){
                        endProgram(`"endif" not found.`);
                        break;
                    }
    
                    if (parsedCondition) {
                        if(elseIndex != -1){
                            formatted.lines[elseIndex].args.skip = true;
                        }
                    } else {
                        if(elseIndex != -1){
                            lineIndex = elseIndex;
                        } else {
                            lineIndex = endifIndex;
                        }
                    }
                    parseNext();
                break;
                case "else":
                    if(formatted.lines[lineIndex].args.skip){
                        lineIndex = formatted.lines[lineIndex].args.endifIndex;
                    }
                    parseNext();
                break;
                case "outc": {
                    let color = line.args.color;
                    let out = line.args.output;
    
                    // Replace variables in the "out" statement
                    for (let variable in variables) {
                        let variableRegex = new RegExp(`\\b${variable}\\b`, "g"); // Ensure full match for variable name
                        if (variableRegex.test(out)) {
                            let value = variables[variable].value;
                            if (variables[variable].type === "str") {
                                value = `'${value}'`; // Wrap string variables in quotes
                            }
                            out = out.replace(variableRegex, value);
                        }
                    }
    
                    // Check for unresolved variables
                    if (/v:\w+/.test(out)) {
                        endProgram(`Variable does not exist in "out" statement.`);
                        break;
                    }
    
                    let parsedOut;
                    try {
                        out = cleanInnerQuotes(out); // Clean any nested or extra quotes
                        parsedOut = new Function(`return (${out});`)(); // Evaluate the expression
                    } catch (err) {
                        endProgram(`Error evaluating statement: "${out}".`);
                        break;
                    }
    
                    // Output the parsed result to the terminal
                    createTerminalLine(parsedOut, ">", color);
                    parseNext();
                } break;
                case "out": {
                    if (!line.args) {
                        endProgram(`Invalid "out" syntax.`);
                        break;
                    }
    
                    let out = line.args.output;
                    
    
                    // BUG!!!!!! =============================================================
                    // the way that strings are done are weird. make it not have so many ''. youknow? yes i know u know
    
                    // Replace variables in the "out" statement
                    for (let variable in variables) {
                        let variableRegex = new RegExp(`\\b${variable}\\b`, "g"); // Ensure full match for variable name
                        if (variableRegex.test(out)) {
                            let value = variables[variable].value;
                            if (variables[variable].type === "str") {
                                value = `'${value}'`; // Wrap string variables in quotes
                            }
                            out = out.replace(variableRegex, value);
                        }
                    }
    
                    // Check for unresolved variables
                    if (/v:\w+/.test(out)) {
                        endProgram(`Variable does not exist in "out" statement.`);
                        break;
                    }
    
                    let parsedOut;
                    try {
                        out = cleanInnerQuotes(out); // Clean any nested or extra quotes
                        parsedOut = new Function(`return (${out});`)(); // Evaluate the expression
                    } catch (err) {
                        endProgram(`Error evaluating statement: "${out}".`);
                        break;
                    }
    
                    // Output the parsed result to the terminal
                    createTerminalLine(parsedOut, ">");
                    parseNext();
                } break;
                case "endprog":
                    config.currentProgram = "cli";
                    document.getElementById('debug-program-memory').textContent = `program memory\nprogram ended`;
                    createEditableTerminalLine(`${config.currentPath}>`);
                break;
                default:
                    parseNext();
                break;
            }
        }
        runParser();
    }

    // ##! everything else ============================================================================================================================================================================================
let screen = document.getElementById('screen');
let terminal = document.getElementById('terminal');

document.body.onclick = function() {
    try {
        terminal.lastChild.lastChild.focus();
    } catch (err) { };
}

const loadingSpinnerAnimFrames = ['-', '\\', '|', '/'];
let loadingSpinnerIndex = 0;

function updateDateTime() {
    if(!config.updateStatBar) return;
    const now = new Date();

    // Grab the current weekday.
    const dayOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][now.getDay()];  // Grab the live day of the week.
    const year = now.getFullYear(); // Year
    const month = String(now.getMonth() + 1).padStart(2, '0'); // Month
    const day = String(now.getDate()).padStart(2, '0'); // Day
    const hour24 = String(now.getHours()).padStart(2, '0'); // Hour in 24-hour format
    const hour12 = String((now.getHours() + 11) % 12 + 1).padStart(2, '0'); // Hour in 12-hour format
    const minute = String(now.getMinutes()).padStart(2, '0'); // Minutes
    const second = String(now.getSeconds()).padStart(2, '0'); // Seconds
    const ampm = now.getHours() >= 12 ? 'PM' : 'AM'; // AM or PM

    let dateTemplate = config.timeFormat;
    dateTemplate = dateTemplate.replace('w', '###w###');
    dateTemplate = dateTemplate.replace('y', '###y###');
    dateTemplate = dateTemplate.replace('M', '###M###');
    dateTemplate = dateTemplate.replace('d', '###d###');
    dateTemplate = dateTemplate.replace('h', '###h###');
    dateTemplate = dateTemplate.replace('H', '###H###');
    dateTemplate = dateTemplate.replace('m', '###m###');
    dateTemplate = dateTemplate.replace('s', '###s###');
    dateTemplate = dateTemplate.replace('a', '###a###');

    dateTemplate = dateTemplate.replace('!###y###', 'y');
    dateTemplate = dateTemplate.replace('!###M###', 'M');
    dateTemplate = dateTemplate.replace('!###d###', 'd');
    dateTemplate = dateTemplate.replace('!###h###', 'h');
    dateTemplate = dateTemplate.replace('!###H###', 'H');
    dateTemplate = dateTemplate.replace('!###m###', 'm');
    dateTemplate = dateTemplate.replace('!###s###', 's');
    dateTemplate = dateTemplate.replace('!###a###', 'a');
    dateTemplate = dateTemplate.replace('!###w###', 'w');

    dateTemplate = dateTemplate.replace('###y###', year);
    dateTemplate = dateTemplate.replace('###M###', month);
    dateTemplate = dateTemplate.replace('###d###', day);
    dateTemplate = dateTemplate.replace('###h###', hour24);
    dateTemplate = dateTemplate.replace('###H###', hour12);
    dateTemplate = dateTemplate.replace('###m###', minute);
    dateTemplate = dateTemplate.replace('###s###', second);
    dateTemplate = dateTemplate.replace('###a###', ampm);
    dateTemplate = dateTemplate.replace('###w###', dayOfWeek);

    const dateString = dateTemplate;

    if(!config.showLoadingSpinner) document.getElementById('bar').textContent = dateString.padEnd(79," ");
    else {
        document.getElementById('bar').textContent = dateString.padEnd(79," ").slice(0, -1) + loadingSpinnerAnimFrames[loadingSpinnerIndex % 4];
        loadingSpinnerIndex++;
    }
}

setInterval(updateDateTime, 100);
updateDateTime();

setInterval(function() {
    let files = [];
    for(let directory of config.allowedProgramDirectories){
        if(config.fileSystem[directory] == undefined) continue;
        // if the files havent changed, do not update the program list
        if(config.fileSystem[directory].length == files.length && config.fileSystem[directory].every((file, index) => file.name == files[index])) continue;

        files = files.concat(config.fileSystem[directory]);
    }
    files = files.map(file => file.name);
    config.programList = files;

    // for all the programs, if there is not a corresponding file in the D:Program-Data directory, create one
    for(let program of config.programList){
        if(getFileWithName("D:/Program-Data", program) == undefined){
            config.fileSystem["D:/Program-Data"].push({
                name: program,
                properties: {
                    read: false,
                    write: false,
                    hidden: false
                },
                data: [""]
            });
        }
    }


    if(config.debugMode) {
        document.body.style.cursor = "pointer";
        document.getElementById('froggyscript-debug-button').style.display = 'block';
        document.getElementById('debug-program-memory').style.display = 'block';
        document.getElementById('debug-os').style.display = 'block';

        document.getElementById('debug-os').textContent = "os memory:\n"+JSON.stringify(config, null, 1);
    } else {
        document.body.style.cursor = "false";
        document.getElementById('froggyscript-debug-button').style.display = 'none';
        document.getElementById('debug-program-memory').style.display = 'none';
        document.getElementById('debug-os').style.display = 'none';
    }
}, 100);

// CSS STYLING ==============================================================================================
const defaultStyling = `
    --void-space: var(--c00);

    --bar-background: var(--c01);
    --bar-text: var(--c15);

    --terminal-background: var(--c15);

    --terminal-line-background: var(--c15);
    --terminal-line-highlighted-background: var(--c14);
    --terminal-line-text: var(--c02);
    --terminal-line-selection-background: var(--c02);
    --terminal-line-selection-text: var(--c15);

    --error-background: var(--c12);
    --error-text: var(--c15);

    --prompt-selected-background: var(--c02);
    --prompt-selected-text: var(--c15);
`

let resetStyling = () => {
    let root = document.querySelector(':root');
    let defaultStylingArray = defaultStyling.split("\n");
    for(let line of defaultStylingArray){
        if(line == "") continue;
        let [property, value] = line.split(":");
        root.style.setProperty(property.trim(), value.trim().replace(";",""));
    }
}

function changeColorPalette(name){
    const colorPalettes = createPalettesObject();
    let palette = colorPalettes[name];
    let root = document.querySelector(':root');
    for(let color in palette){
        root.style.setProperty(`--${color}`, palette[color]);
    }

    resetStyling();
    if(name == "standard"){
    }
    if(name == "revised"){
    }
    if(name == "cherry"){
        root.style.setProperty(`--terminal-line-highlighted-background`, "var(--c10)");
        root.style.setProperty(`--error-background`, "var(--c04)");
    }
    if(name == "swamp"){
        root.style.setProperty(`--error-background`, "var(--c04)");
    }
    if(name == "swamp-revised"){
        root.style.setProperty(`--error-background`, "var(--c04)");
    }

    config.colorPalette = name;
}

function createColorTestBar(){
    const colorPalettes = createPalettesObject();
    // remove all the children of the color test bar
    document.getElementById('color-test-bar').innerHTML = "";
    function getContrastYIQ(hexColor) {
        if (!/^#([0-9A-F]{3}|[0-9A-F]{6})$/i.test(hexColor)) {
            createTerminalLine(`PaletteError: ${hexColor} is an invalid hex color.`, config.errorText);
            return 
        }
        
        if (hexColor.length === 4) {
            hexColor = `#${hexColor[1]}${hexColor[1]}${hexColor[2]}${hexColor[2]}${hexColor[3]}${hexColor[3]}`;
        }
        
        const r = parseInt(hexColor.slice(1, 3), 16);
        const g = parseInt(hexColor.slice(3, 5), 16);
        const b = parseInt(hexColor.slice(5, 7), 16);
        
        const yiq = (r * 299 + g * 587 + b * 114) / 1000;
        
        return yiq >= 128 ? "c00" : "c15";
    }
    let squareContainer = document.getElementById('color-test-bar');
    squareContainer.style.position = "absolute";
    squareContainer.style.top = "0px";
    squareContainer.style.left = "0px";

    for(let i = 0; i < Object.keys(colorPalettes[config.colorPalette]).length; i++){
        let color = Object.keys(colorPalettes[config.colorPalette])[i];
        let square = document.createElement('div');
        let text = `<br><br><br><br><br><br>${color}<br>${colorPalettes[config.colorPalette][color].replace("#","")}`

        square.innerHTML = text;
        square.style.backgroundColor = `var(--${color})`;
        square.style.color = `var(--${getContrastYIQ(colorPalettes[config.colorPalette][color])})`;
        square.style.width = "48px";
        square.style.height = "48px";
        square.style.position = "absolute";
        square.style.left = `${(i % 8) * 48}px`;
        square.style.top = `${Math.floor(i / 8) * 48}px`;
        square.style.fontSize = "6px";
        squareContainer.appendChild(square);
        if(i == Object.keys(colorPalettes[config.colorPalette]).length / 2){
            squareContainer.appendChild(document.createElement('br'));
        }
    }
    document.body.appendChild(squareContainer);
}

// helper functions
function createPalettesObject(){
    let paletteDir = config.fileSystem["D:/Palettes"];
    let palettes = {};

    const colorArray = ["c00", "c01", "c02", "c03", "c04", "c05", "c06", "c07", "c08", "c09", "c10", "c11", "c12", "c13", "c14", "c15"];

    try {
        for(let palette of paletteDir){
            palettes[palette.name] = {};
            for(let i = 0; i < palette.data.length; i++){
                palettes[palette.name][colorArray[i]] = "#"+palette.data[i];
            }
        }
    } catch (err) {
        createTerminalLine("Could create palette.", config.errorText)
    }

    return palettes;
}

function moveCaretToEnd(element) {
    if (typeof window.getSelection !== "undefined" && typeof document.createRange !== "undefined") {
        const range = document.createRange();
        range.selectNodeContents(element);
        range.collapse(false);
        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
        if (element.getBoundingClientRect().bottom > window.innerHeight) element.scrollIntoView(false);
        if (element.getBoundingClientRect().top < 0) element.scrollIntoView(true);
        
    } else if (typeof document.body.createTextRange !== "undefined") {
        const textRange = document.body.createTextRange();
        textRange.moveToElementText(element);
        textRange.collapse(false);
        textRange.select();

        if (element.getBoundingClientRect().bottom > window.innerHeight) element.scrollIntoView(false);
        if (element.getBoundingClientRect().top < 0) element.scrollIntoView(true);
    }
}

function createTerminalLine(text, path, color){
    let lineContainer = document.createElement('div');
    let terminalPath = document.createElement('span');
    let terminalLine = document.createElement('div');

    lineContainer.classList.add('line-container');

    terminalPath.innerHTML = path;
    terminalLine.textContent = text;

    if(color != undefined){
        terminalLine.style.color = `var(--${color})`;
    }

    lineContainer.appendChild(terminalPath);
    lineContainer.appendChild(terminalLine);
    terminal.appendChild(lineContainer);
    terminal.scrollTop = terminal.scrollHeight;
}

function getFileWithName(path, name){
    let file = config.fileSystem[path];
    if(file == undefined) return undefined;
    return file.find(file => file.name == name);
}

function cleanInnerQuotes(input) {
    if ((input.startsWith('"') && input.endsWith('"')) || (input.startsWith("'") && input.endsWith("'"))) {
        let quoteType = input[0];
        let innerContent = input.slice(1, -1);
        let cleanedContent = innerContent.replace(/["']/g, '');
        return quoteType + cleanedContent + quoteType;
    }
    return input;
}

function cleanQuotes(input){
    return input.replaceAll(/["']/g, '');
}

function evaluate(string){
    try {
        if(/`([^`\\]*(\\.[^`\\]*)*)`/g.test(string)){
            throw new Error();
        }
        parsedString = new Function(`return (${string});`)();
        return parsedString;
    } catch (err) {
        return null;
    }
}

function updateLineHighlighting() {
    let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
    lines.forEach(line => {
        if (document.activeElement === line) {
            line.style.background = "var(--terminal-line-highlighted-background)";
        } else {
            line.style.background = "var(--terminal-line-background)";
        }
    });
}

function sendCommand(command, args, createEditableLineAfter){
    if(createEditableLineAfter == undefined) createEditableLineAfter = true;
    command = command.trim();
    args = args.filter(arg => arg.trim() != "");
    let directory;
    let file;

    switch(command){
        case "":
            createTerminalLine("Froggy doesn't like that. >:(", "");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // commands =========================================================================================================================================================
        // change color palette
        case "changepalette": {
            let colorPalettes = createPalettesObject();
            if(args.length == 0){
                createTerminalLine("Please provide a color palette name.", config.errorText);
                createTerminalLine(`* Available color palettes *`, "");
                createTerminalLine(Object.keys(colorPalettes).join(", "), ">");
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(colorPalettes[args[0]] == undefined){
                createTerminalLine("Color palette does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            changeColorPalette(args[0]);
            createColorTestBar()
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        } break;

        case "cl":
        case "clear":
            document.getElementById('terminal').innerHTML = "";
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // delete files
        case "c":
        case "croak":
            if(args.length == 0){
                createTerminalLine("Please provide a file name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = config.fileSystem[config.currentPath];
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = file.find(file => file.name == args[0]);
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(file.properties.write == false){
                createTerminalLine("You do not have permission to delete this file.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            let fileIndex = config.fileSystem[config.currentPath].findIndex(file => file.name == args[0]);
            delete config.fileSystem[config.currentPath][fileIndex];
            config.fileSystem[config.currentPath] = config.fileSystem[config.currentPath].filter(file => file != undefined);

            createTerminalLine("File deleted.", ">")
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "ft":
        case "formattime":
            if(args.length == 0){
                createTerminalLine("Please provide a time format.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(args.join(" ").length > 59){
                createTerminalLine("The argument is too long.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            config.timeFormat = args.join(" ");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // make files
        case "ch":
        case "hatch":
            if(args.length == 0){
                createTerminalLine("Please provide a file name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(config.fileSystem[config.currentPath] == undefined){
                createTerminalLine("Directory does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
            }
            if(config.fileSystem[config.currentPath].find(file => file.name == args[0]) != undefined){
                createTerminalLine("File already exists.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            config.fileSystem[config.currentPath].push({
                name: args[0],
                properties: {
                    read: true,
                    write: true,
                    hidden: false
                }, 
                data: [""]
            });
            createTerminalLine("File created.", ">")
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "hello":
            createTerminalLine("Hello, I'm Froggy! ^v^", ">");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "?":
        case "help":
            createTerminalLine("* A few basic froggyOS commands *", "");
            createTerminalLine("changepalette [palette]. . . . Changes the color palette.", ">");
            createTerminalLine("clear. . . . . . . . . . . . . Clears the terminal output.", ">");
            createTerminalLine("croak [file] . . . . . . . . . Deletes the file.", ">");
            createTerminalLine("ribbit [text]. . . . . . . . . Displays the text.", ">");
            createTerminalLine("formattime [format]. . . . . . Changes the time format.", ">");
            createTerminalLine("hatch [file] . . . . . . . . . Creates a file.", ">");
            createTerminalLine("hello. . . . . . . . . . . . . Displays a greeting message.", ">");
            createTerminalLine("help . . . . . . . . . . . . . Displays this message.", ">");
            createTerminalLine("hop [directory]. . . . . . . . Moves to a directory.", ">");
            createTerminalLine("list . . . . . . . . . . . . . Lists files and subdirectories in the current                                directory.", ">");
            createTerminalLine("listdrives . . . . . . . . . . Lists all drives.", ">");
            createTerminalLine("meta [file]. . . . . . . . . . Edits a file.", ">");
            createTerminalLine("metaprop [file] [perm] [0/1] . Edits a file's properties.", ">");
            createTerminalLine("spawn [directory]. . . . . . . Creates a directory.", ">");
            createTerminalLine("spy [file] . . . . . . . . . . Reads the file.", ">");
            createTerminalLine("swimto [program] . . . . . . . Start a program.", ">");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;


        // move directories
        case "h":
        case "hop":
            directory = args[0];

            if(directory == undefined){
                createTerminalLine("Please provide a directory name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            directory = directory.replace(".", config.currentPath);
            if(directory == "~") directory = config.currentPath.split("/")[0];
            if(directory == "-") directory = config.currentPath.split("/").slice(0, -1).join("/");

            if(config.fileSystem[directory] == undefined){
                createTerminalLine("Directory does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            sendCommand("[[BULLFROG]]changepath", [directory], createEditableLineAfter);
        break;

        // list files
        case "ls":
        case "list":
            let currentPathWithSlash = config.currentPath.endsWith('/') ? config.currentPath : config.currentPath + '/';

            // Get subdirectory names under the currentPath
            let subdirectoryNames = Object.keys(config.fileSystem)
                .filter(path => path.startsWith(currentPathWithSlash) && path !== config.currentPath && !path.slice(currentPathWithSlash.length).includes('/'))
                .map(path => path.slice(currentPathWithSlash.length)); // Extract only the subdirectory name

            let files = config.fileSystem[config.currentPath];
            if(files == undefined) files = [];
            // remove all files that are hidden
            files = files.filter(file => file.properties.hidden == false);

            if(files.length == 0 && subdirectoryNames.length == 0){
                createTerminalLine("This directory is empty.", ">")
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            subdirectoryNames.forEach(subdirectory => {
                createTerminalLine(` [DIR] ${subdirectory}`, ">")
            });
            files.forEach(file => {
                createTerminalLine(`       ${file.name}`, ">")
            });
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "ld":
        case "listdrives": {
            let drives = Object.keys(config.fileSystem).map(drive => drive.split(":"))
            drives = [...new Set(drives.filter(drive => drive.length == 2).map(drive => drive[0]))].map(drive => drive + ":");

            drives.forEach(drive => {
                createTerminalLine(`[DRIVE] ${drive}`, ">");
            });
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        } break;

        case "/":
        case "macro": {
            if(args.length == 0){
                createTerminalLine("Please provide a macro name.", config.errorText);
                createTerminalLine(`* Available macros *`, "");
                let macros = config.fileSystem["D:/Macros"];
                if(macros == undefined){
                    createTerminalLine("No macros found.", config.errorText);
                } else {
                    createTerminalLine(macros.map(macro => macro.name).join(", "), ">")
                }
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            let macro = getFileWithName("D:/Macros", args[0]);

            config.fileSystem["D:/Macros"].forEach(_macro => {
                if(_macro.data[0].startsWith("!") && _macro.data[0].slice(1).trim() == args[0]){
                    macro = _macro;
                }
            });
            
            if(macro == undefined){
                createTerminalLine("Macro does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            macro = JSON.parse(JSON.stringify(macro));
            let totalFileArguments = 0;

            macro.data.forEach(line => {
                if(line.includes("$")){
                    // if the number behind $ is greater than the totalFileArguments, set totalFileArguments to that number
                    let fileArgument = parseInt(line.split("$")[1].split(" ")[0]);
                    if(fileArgument > totalFileArguments) totalFileArguments = fileArgument;
                }
            });

            if(args.length - 1 < totalFileArguments){
                createTerminalLine(`Missing file argument(s).`, config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            let fileArguments = {};

            for(let i = 1; i < args.length; i++){
                fileArguments["$" + i] = args[i];
            }

            // go through each line, replace the file arguments
            macro.data = macro.data.map(line => {
                for(let fileArgument in fileArguments){
                    line = line.replaceAll(fileArgument, fileArguments[fileArgument]);
                }
                return line;
            });

            macro.data.shift();

            macro.data.forEach(line => {
                sendCommand(line.split(" ")[0], line.split(" ").slice(1), false);
            });

            if(createEditableLineAfter && config.currentProgram == "cli") createEditableTerminalLine(`${config.currentPath}>`);
        } break;

        // edit file
        case "m":
        case "meta":
            if(args.length == 0){
                createTerminalLine("Please provide a file name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = config.fileSystem[config.currentPath];
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = file.find(file => file.name == args[0]);
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(file.properties.write == false){
                createTerminalLine("You do not have permission to edit this file.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            createTerminalLine("* press ESC to save and exit lilypad *", "");
            for(let i = 0; i < file.data.length; i++){
                if(config.allowedProgramDirectories.includes(config.currentPath)){
                    createLilypadLine(String(i+1).padStart(3, "0"), "code", file.name);
                } else if (config.currentPath == "D:/Palettes") {
                    createLilypadLine(String(i).padStart(2, "0"), "palette", file.name);
                } else createLilypadLine(">", undefined, file.name);
                let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
                lines[i].textContent = file.data[i];
                moveCaretToEnd(lines[i]);
            }
        break;

        // edit file properties
        case "mp":
        case "metaprop":
            file = getFileWithName(config.currentPath, args[0]);

            let property = args[1];
            let value = args[2];
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            let propertyTypes = Object.keys(file.properties);

            if(property == undefined || propertyTypes.includes(property) == false){
                createTerminalLine("Please provide a valid property type.", config.errorText);
                createTerminalLine("* Available properties *", "");
                createTerminalLine(propertyTypes.join(", "), ">");
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            if(value == undefined || (value != "0" && value != "1")){
                createTerminalLine("Please provide a valid value. 0 or 1.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break
            }

            if(file.properties.write == false){
                createTerminalLine("You do not have permission to edit this file.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            file.properties[property] = value == "1" ? true : false;
            createTerminalLine("properties updated.", ">")

            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "ribbit":
            if(args.length == 0){
                createTerminalLine("Please provide text to display.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            createTerminalLine(args.join(" "), ">")
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        // make directories
        case "s":
        case "spawn":
            directory = config.currentPath + "/" + args[0];

            if(config.dissallowSubdirectoriesIn.includes(config.currentPath)){
                createTerminalLine("You cannot create directories in this directory.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(args[0] == undefined){
                createTerminalLine("Please provide a directory name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(config.fileSystem[directory] != undefined){
                createTerminalLine("Directory already exists.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            config.fileSystem[directory] = [];
            createTerminalLine("Directory created.", ">");
            sendCommand("[[BULLFROG]]changepath", [directory], createEditableLineAfter);
        break;

        // read file contents
        case "spy":
            if(args.length == 0){
                createTerminalLine("Please provide a file name.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = config.fileSystem[config.currentPath];
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file = file.find(file => file.name == args[0]);
            if(file == undefined){
                createTerminalLine("File does not exist.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            if(file.properties.read == false){
                createTerminalLine("You do not have permission to read this file.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            file.data.forEach(line => {
                createTerminalLine(line, ">")
            });
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case "st":
        case "swimto":
            if(!config.programList.includes(args[0])){

                let programList = [];

                // if the file is hidden, do not show it in the program list
                for(let directory of config.allowedProgramDirectories){
                    programList = programList.concat(config.fileSystem[directory].filter(file => file.properties.hidden == false).map(file => file.name));
                }

                createTerminalLine("Please provide a valid program.", config.errorText);
                createTerminalLine("* Available programs *", "");
                createTerminalLine(programList.join(", "), ">");
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }

            config.programSession++
            if(args[0] == "cli"){
                config.currentProgram = "cli";
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
            } else if(args[0] == "lilypad"){
                config.currentProgram = "lilypad";
                createTerminalLine("* press ESC to exit lilypad *", "");
                createLilypadLine(">", undefined, undefined);
            } else {
                let file;
                for(let directory of config.allowedProgramDirectories){
                    file = getFileWithName(directory, args[0]);
                    if(file != undefined) break;
                }
                if(file.properties.read == false){
                    createTerminalLine("You do not have permission to run this program.", config.errorText);
                    if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                    break;
                }

                let formatted = format(file.data);
                if(formatted.errors.length > 0){
                    createTerminalLine(formatted.errors[0], config.errorText);
                    if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                } else {
                    config.currentProgram = args[0];
                    // interpret the formatted code
                    interpreter(formatted);
                }
            }
        break;

        // hidden commands =======================================================================================================================================
        case "[[BULLFROG]]changepath":
            if(args.length == 0){
                createTerminalLine("Please provide a path.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            config.currentPath = args.join(" ");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]greeting':
            createTerminalLine(`Version ${config.version} is a special version of froggyOS for LBC2`, "");
            createTerminalLine(`(You should totally go check out the other versions of froggyOS at https://froggyos.github.io/ AFTER LBC2)`, "");
            createTerminalLine(`* This version of froggOS has no OS state saving features so dont accidentally close the tab *` , "");
            createTerminalLine(`* Don't forget to use the help command *` , "");
            createTerminalLine(`* Read the documentation. *` , "");
            createTerminalLine(`Good luck.` , "");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]help':
            createTerminalLine("* A few bullfrog commands *", "");
            createTerminalLine("[[BULLFROG]]changepath [path] - Changes the path of the terminal", ">");
            createTerminalLine("[[BULLFROG]]greeting - Displays the greeting message", ">");
            createTerminalLine("[[BULLFROG]]help - Displays this message", ">");
            createTerminalLine("[[BULLFROG]]setstatbar [text] - Changes the text in the status bar", ">");
            createTerminalLine("[[BULLFROG]]statbarlock [0/1] - Locks the status bar from updating", ">");
            createTerminalLine("[[BULLFROG]]spinner [0/1] - Toggles the loading spinner", ">");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]setstatbar':
            if(args.length > 79){
                createTerminalLine("The argument is too long.", config.errorText);
                if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
                break;
            }
            document.getElementById('bar').textContent = args.join(" ");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]spinner':
            let bool = args[0];
            if(bool == "1") config.showLoadingSpinner = true;
            else if(bool == "0") config.showLoadingSpinner = false;
            else createTerminalLine("Invalid argument. Please provide '1' or '0'.", config.errorText);
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;

        case '[[BULLFROG]]statbarlock': {
            let bool = args[0];
            if(bool == "1") config.updateStatBar = false;
            else if(bool == "0") config.updateStatBar = true;
            else createTerminalLine("Invalid argument. Please provide '1' or '0'.", config.errorText);
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        } break;

        default:
            createTerminalLine(`Froggy doesn't know "${command}", sorry.`, ">");
            if(createEditableLineAfter) createEditableTerminalLine(`${config.currentPath}>`);
        break;
    }
}

/*
create a line for user input
path - the path

PROGRAM SPECIFIC: for program CLI ===============================================================================================
*/
function createEditableTerminalLine(path){
    let lineContainer = document.createElement('div');
    let terminalPath = document.createElement('span');
    let terminalLine = document.createElement('div');

    lineContainer.classList.add('line-container');
    terminalLine.setAttribute('contenteditable', 'true');
    terminalLine.setAttribute('spellcheck', 'false');

    terminalPath.textContent = path;
    terminalLine.textContent = "";

    terminalLine.addEventListener('keydown', function(e){
        if(e.key == "Enter"){
            e.preventDefault();
        }
    });

    terminalLine.addEventListener('keyup', function(e){
        let userInput = terminalLine.textContent;
        
        e.stopImmediatePropagation();
        if(e.key == "Enter"){
            e.preventDefault();
            terminalLine.setAttribute('contenteditable', 'false');
            let args = userInput.split(" ");

            terminalLine.innerHTML = terminalLine.innerHTML.replaceAll("<div><br></div>", "");

            let command = args[0].trim();
            args = args.slice(1);

            config.commandHistory.reverse();
            config.commandHistory.push(userInput);
            config.commandHistory.reverse();
            config.commandHistoryIndex = -1;

            sendCommand(command, args);
        }

        if(e.key == "ArrowUp"){
            e.preventDefault();
            if(config.commandHistoryIndex <= config.commandHistory.length - 2) config.commandHistoryIndex++;
            if(config.commandHistoryIndex != -1){
                terminalLine.textContent = config.commandHistory[config.commandHistoryIndex];
                moveCaretToEnd(terminalLine);
            }
        }

        if(e.key == "ArrowDown"){
            e.preventDefault();
            if(config.commandHistoryIndex > 0) config.commandHistoryIndex--;
            if(config.commandHistoryIndex == -1){
                terminalLine.textContent = "";
            } else {
                terminalLine.textContent = config.commandHistory[config.commandHistoryIndex];
                moveCaretToEnd(terminalLine);
            }
        }
    });

    lineContainer.appendChild(terminalPath);
    lineContainer.appendChild(terminalLine);
    terminal.appendChild(lineContainer);

    terminal.scrollTop = terminal.scrollHeight;
    terminalLine.focus();
}

/*
PROGRAM SPECIFIC: for program LILYPAD ===============================================================================================
*/
function createLilypadLine(path, linetype, filename){
    config.currentProgram = "lilypad";
    let lineContainer = document.createElement('div');
    let terminalPath = document.createElement('span');
    let terminalLine = document.createElement('div');

    lineContainer.classList.add('line-container');
    terminalLine.setAttribute('contenteditable', 'true');
    terminalLine.setAttribute('data-program', `lilypad-session-${config.programSession}`);
    terminalLine.setAttribute('data-filename', filename);
    terminalLine.setAttribute('spellcheck', 'false');

    terminalPath.textContent = path;
    terminalLine.textContent = "";

    let highlightedLineUpdater = setInterval(updateLineHighlighting, 1);

    terminalLine.addEventListener('keyup', function(e){
        if(linetype == "code"){
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            for(let i = 0; i < lines.length; i++){
                let lineNumber = String(i+1).padStart(3, "0");
                lines[i].previousElementSibling.textContent = lineNumber;
            }
        } else if (linetype == "palette"){
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            for(let i = 0; i < lines.length; i++){
                let lineNumber = String(i).padStart(2, "0");
                lines[i].previousElementSibling.textContent = lineNumber;
            }
        }
    });

    terminalLine.addEventListener('keydown', function(e){
        if(e.key == "Enter"){
            e.preventDefault();
            if(linetype == "code"){
                let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
                let lineNumber = String(+lines[lines.length - 1].previousElementSibling.textContent+1).padStart(3, '0');
                createLilypadLine(lineNumber, "code", filename);
            } else if (linetype == "palette") {
                let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
                let lineNumber = String(+lines[lines.length - 1].previousElementSibling.textContent).padStart(2, '0');
                if(+lineNumber < 15) createLilypadLine(lineNumber, "palette", filename);
            } else {
                createLilypadLine(">", undefined, filename);
            }
        }
        if(e.key == "Backspace"){
            if(terminalLine.textContent.length == 0) {
                let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
                let currentLineIndex = Array.from(lines).indexOf(document.activeElement);
                if(lines.length > 1 && currentLineIndex != 0){
                    if(currentLineIndex == 0){
                        let nextLine = lines[currentLineIndex + 1];
                        moveCaretToEnd(nextLine);
                    }

                    let parent = document.activeElement.parentElement;
                    let previousLine = parent.previousElementSibling.children[1];
                    previousLine.textContent = previousLine.textContent + "​";
                    moveCaretToEnd(previousLine);
                    parent.remove();
                }
            }
        };
        if(e.key == "ArrowUp"){
            e.preventDefault();
            // get the lines by the data-program attribute
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            let focusedLine = document.activeElement;

            let focusedLineIndex = Array.from(lines).indexOf(focusedLine);
            if(focusedLineIndex > 0){
                moveCaretToEnd(lines[focusedLineIndex - 1]);
            };
        };
        if(e.key == "ArrowDown"){
            e.preventDefault();
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            let focusedLine = document.activeElement;

            let focusedLineIndex = Array.from(lines).indexOf(focusedLine);
            if(focusedLineIndex < lines.length - 1){
                moveCaretToEnd(lines[focusedLineIndex + 1]);
            };
        };

        if(e.key == "Escape"){
            config.currentProgram = "cli";
            clearInterval(highlightedLineUpdater);
            let file = {
                name: null,
                properties: {
                    read: true,
                    write: true,
                    hidden: false
                },
                data: []
            };
            let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);
            for(let i = 0; i < lines.length; i++){
                file.data.push(lines[i].textContent);
                lines[i].setAttribute('contenteditable', 'false');
            };

            if(filename == undefined){
                createEditableTerminalLine(`${config.currentPath}>`);
            } else {
                config.showLoadingSpinner = true;
                createTerminalLine(`Saving file...`, ">");

                let dataLength = 0;

                file.name = filename;
                let fileIndex = config.fileSystem[config.currentPath].findIndex(file => file.name == filename);
                config.fileSystem[config.currentPath][fileIndex].data = file.data;

                file.data.forEach(line => {
                    dataLength += line.length;
                });
                
                setTimeout(function(){
                    config.showLoadingSpinner = false;
                    createTerminalLine(`Done! ^v^`, ">");
                    createEditableTerminalLine(`${config.currentPath}>`);
                    config.programSession++;
                }, dataLength * 2);
                
            }
        }
    });

    lineContainer.appendChild(terminalPath);
    lineContainer.appendChild(terminalLine);
    
    let lines = document.querySelectorAll(`[data-program='lilypad-session-${config.programSession}']`);

    if(lines.length == 0) terminal.appendChild(lineContainer);
    else terminal.insertBefore(lineContainer, document.activeElement.parentElement.nextSibling);

    terminal.scrollTop = terminal.scrollHeight;
    terminalLine.focus();
}

changeColorPalette(config.colorPalette);
createColorTestBar();
sendCommand('[[BULLFROG]]greeting', []);
})();